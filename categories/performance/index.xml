<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on aonemd</title>
    <link>https://aonemd.github.io/categories/performance/</link>
    <description>Recent content in Performance on aonemd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://aonemd.github.io/categories/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Improved the Loading Speed of My Blog</title>
      <link>https://aonemd.github.io/posts/how-i-improved-the-loading-speed-of-my-blog/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aonemd.github.io/posts/how-i-improved-the-loading-speed-of-my-blog/</guid>
      <description>In this post I&amp;rsquo;m going to demonstrate the steps I took in order to improve the loading speed of my blog. First of all, this blog is generated by Jekyll, the static site generator. I only build my static files and deploy them to GitHub pages. I use Webpack to compile my assets and then I use Jekyll to build the whole blog.
Around a year ago, I started on a mission to optimize the loading speed of my blog after feeling that it was slow and had some rendering issues.</description>
    </item>
    
    <item>
      <title>Inserting Bulk Data into Postgres Using Ruby</title>
      <link>https://aonemd.github.io/posts/inserting-bulk-data-into-pg/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://aonemd.github.io/posts/inserting-bulk-data-into-pg/</guid>
      <description>I had this task where it was required to generate a lot of data into a postgreSQL database and perform some queries on the generated data. So this is going to be some kind of a crash course on Ruby and postgreSQL (and some optimization).
Requirements The database contained only two tables. The first one was:
 cup_matches(mid, round, year, num_ratings, rating) mid is the primary key for matches round is the cup round/level (e.</description>
    </item>
    
  </channel>
</rss>
