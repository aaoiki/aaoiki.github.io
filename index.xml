<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aonemd</title>
    <link>https://aonemd.me/</link>
    <description>Recent content on Code and Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0200</lastBuildDate><atom:link href="https://aonemd.me/index.xml" rel="self" type="application/rss+xml" />
      
      <item>
        <title>Blocked!</title>
        <link>https://aonemd.me/posts/blocked/</link>
        <pubDate>Tue, 20 Jul 2021 00:00:00 +0200</pubDate>
        
        <guid>https://aonemd.me/posts/blocked/</guid>
        <description>&lt;p&gt;Since this whole week is an official holiday in the country (Egypt) and I got
nothing to share, I thought I&amp;rsquo;d write this post about basically nothing!
Seriously, I would like to talk about the current state of my side projects.&lt;/p&gt;
&lt;p&gt;I have been getting myself into multiple side projects and plans (in the back
of my head), however, I reached a point where I don&amp;rsquo;t want to work on them
anymore. I work on my projects to a half-baked state and then I lose the
motivation to continue them (side projects, right?). For example, I started a blog post that I wanted
to publish more than three months ago, and to this day, I haven&amp;rsquo;t finished it
yet. The main issue is, you get this itch that there&amp;rsquo;s always something that
you should be doing and yet, you&amp;rsquo;re not!&lt;/p&gt;
&lt;p&gt;This may seem like a state of burnout (and it could be) but I don&amp;rsquo;t think it is
(since it&amp;rsquo;s not my first encounter with burnout). I believe I was on the edge
of burnout (from work) a few weeks ago and I took some time off after talking
with my colleagues at &lt;a href=&#34;https://swvl.io&#34;&gt;Swvl&lt;/a&gt; ❤️ and everything was fine afterwards.&lt;/p&gt;
&lt;p&gt;I think the issue is I have been hassling more than the usual and I got a case
of &lt;em&gt;programmer&amp;rsquo;s block&lt;/em&gt;. &lt;em&gt;Programmer&amp;rsquo;s block&lt;/em&gt; is stolen from &lt;em&gt;writer&amp;rsquo;s block&lt;/em&gt;,
of course, and it&amp;rsquo;s the state where the programmer&amp;rsquo;s mind totally freezes and
stops thinking. This is what goes into my mind when I get into an infinite
recursion and stare into my screen endlessly (do human brains have stack
overflows?).&lt;/p&gt;
&lt;p&gt;I found this blog post, &lt;a href=&#34;https://blog.doist.com/side-projects/&#34;&gt;The 4 Secrets to Successful Side
Projects&lt;/a&gt;, by chance, while wanting to
(let&amp;rsquo;s say) kill some time while also trying to find a solution to my block. It
may sound like one of those cheesy posts from those (let&amp;rsquo;s say) &amp;ldquo;edgy&amp;rdquo; blogs
with arbitrary numbers in the title but it actually contains some sound advice.&lt;/p&gt;
&lt;p&gt;One of the points that I think inspired me to write this post is to talk about
your projects with anyone who would listen. Although, this post is not about a
specific project of mine. I believe this is to make sort of a commitment to
other people when you share and talk about your projects. Anyway, I don&amp;rsquo;t think
I work that way.&lt;/p&gt;
&lt;p&gt;A great point the blog post made is to know that it&amp;rsquo;s okay to quit your
project.  I normally get too attached to my projects and start acting like a
mad scientist which now, seems counter-productive to say the least. Also, the
post talked about how important it is to have regular checks for your projects
and evaluate their state and the value for you and whether it&amp;rsquo;s worthy to
continue them or not.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://aonemd.me/images/mad_scientist.jpg&#34; alt=&#34;i-am-mad-scientist&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since I didn&amp;rsquo;t promise much from the beginning, I will end this post here. Tschüss!&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Let&#39;s Build a Binary Clock in Node.js</title>
        <link>https://aonemd.me/posts/let-s-build-a-binary-clock-in-node-js/</link>
        <pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/let-s-build-a-binary-clock-in-node-js/</guid>
        <description>&lt;p&gt;I&amp;rsquo;m always on the lookout for fun programming exercises suitable for beginners.
Recently, I came across this
&lt;a href=&#39;https://www.youtube.com/watch?v=aYwJr3qmfBc&#39; target=&#39;_blank&#39;&gt;video on YouTube&lt;/a&gt;
where the poster builds a binary clock in Javascript, HTML, and
CSS. It was my first time coming across the idea of binary blocks and I thought
it could be a fun exercise!&lt;/p&gt;
&lt;p&gt;This is going to be my first tutorial-style post directed towards beginners so
I&amp;rsquo;m still figuring out a proper format. One thing though, I&amp;rsquo;m not very fond of
doing frontend and writing CSS so I decided to make this into a Node.js app.
Another thing, I&amp;rsquo;m going to to use TypeScript for the code in this post. It&amp;rsquo;s
JavaScript with some added features and it
&lt;a href=&#39;https://stackoverflow.com/questions/44931479/compiling-vs-transpiling&#39; target=&#39;_blank&#39;&gt;transpiles&lt;/a&gt;
to JavaScript in the end. With that out of the way, let&amp;rsquo;s build a binary clock!&lt;/p&gt;
&lt;h3 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h3&gt;
&lt;p&gt;First, you need a quick tour over what the binary numbering system is. Here are
some videos from Khan Academy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=ku4KOFQ-bB4&#39; target=&#39;_blank&#39;&gt;Introduction to number systems and binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://www.youtube.com/playlist?list=PLS---sZ5WJJvsjaAQZKwTwxl910xUdO98&#39; target=&#39;_blank&#39;&gt;Here&amp;rsquo;s the rest of the playlist on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secondly, you need to know how a binary clock works. Here&amp;rsquo;s a
&lt;a href=&#39;https://www.reddit.com/r/explainlikeimfive/comments/sdt04/eli5_how_do_binary_clocks_work/&#39; target=&#39;_blank&#39;&gt;great explanation on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, let&amp;rsquo;s install the required software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any text editor. I advice to start with &lt;a href=&#39;https://code.visualstudio.com/&#39; target=&#39;_blank&#39;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://nodejs.org/en/&#39; target=&#39;_blank&#39;&gt;Node.js&lt;/a&gt;:
a way to run JavaScript without a browser. I usually use
&lt;a href=&#39;https://github.com/nvm-sh/nvm#installing-and-updating&#39; target=&#39;_blank&#39;&gt;NVM&lt;/a&gt; as a way to
install multiple Node.js versions my machine
(for &lt;a href=&#39;https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-windows&#39; target=&#39;_blank&#39;&gt;Windows&lt;/a&gt;).
After you install &lt;code&gt;NVM&lt;/code&gt;, run &lt;code&gt;nvm install --lts&lt;/code&gt; to install a long-term
supported version of Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&#39;https://yarnpkg.com/getting-started/install&#39; target=&#39;_blank&#39;&gt;Yarn&lt;/a&gt;: a package manager to install our dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-code&#34;&gt;The Code&lt;/h3&gt;
&lt;p&gt;The full code is on &lt;a href=&#39;https://github.com/aonemd/binary-clock.ts&#39; target=&#39;_blank&#39;&gt;GitHub&lt;/a&gt;. You
can follow along with how the code progresses over time using the
&lt;a href=&#39;https://github.com/aonemd/binary-clock.ts/commits/master&#39; target=&#39;_blank&#39;&gt;Git commits&lt;/a&gt;.
I also advice to not copy the code and instead, type everything yourself. Keep
this with you in your learning journey.&lt;/p&gt;
&lt;h4 id=&#34;i-setting-up-a-new-project&#34;&gt;I. Setting up a new project&lt;/h4&gt;
&lt;p&gt;We will start first by creating a new project. In a terminal, we create a new
folder using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir binary-clock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we move to that folder using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; binary-clock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we declare the folder as a JavaScript project using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;yarn init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll be prompted to answer a few questions regarding the project and then
you&amp;rsquo;ll find a file named &lt;code&gt;pacakge.json&lt;/code&gt; in the current folder. This file
contains the configurations and dependencies of your project.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s setup TypeScript by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;yarn add -D typescript @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll find two changes in the current directory. The file &lt;code&gt;package.json&lt;/code&gt;
contains new lines under &lt;code&gt;devDependencies&lt;/code&gt; and there&amp;rsquo;s a new folder named
&lt;code&gt;node-modules&lt;/code&gt; that holds the actual code of those dependencies.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s add a new file named &lt;code&gt;tsconfig.json&lt;/code&gt; which will hold our TypeScript
configurations with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ESNext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ESNext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ESNext&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;moduleResolution&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;strict&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;outDir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;rootDir&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;declaration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;allowSyntheticDefaultImports&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;exclude&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;./node_modules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;./dist&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;include&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;./src/**/*.ts&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I don&amp;rsquo;t really know what all those options do. I have them copied
from one project to the other. There&amp;rsquo;s an online
&lt;a href=&#39;https://www.staging-typescript.org/tsconfig&#39; target=&#39;_blank&#39;&gt;reference&lt;/a&gt; for those.&lt;/p&gt;
&lt;p&gt;The last step is to make building and running the project easier. Let&amp;rsquo;s add the
following to &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;compile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tsc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node dist/src/index.js&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can create the &lt;code&gt;src&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inside &lt;code&gt;src&lt;/code&gt;, we can create our main entry point file, &lt;code&gt;index.ts&lt;/code&gt; (index is
used by convention). The following command creates a new file under &lt;code&gt;src&lt;/code&gt;
directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;touch src/index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add this to &lt;code&gt;src/index.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To build and run the project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;yarn compile &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ii-getting-the-current-time&#34;&gt;II. Getting the current time&lt;/h4&gt;
&lt;p&gt;Our goal is to convert the current time into the binary format so we start by
reading the current time. JavaScript provides a &lt;code&gt;Date&lt;/code&gt; object that holds the
current date and time. Since we only care about hours, minutes, and seconds, we
use some methods defined on the &lt;code&gt;Date&lt;/code&gt; object to extract this information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in src/index.ts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// read current date and time
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// extract time information
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getHours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getMinutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s wrap this in a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getHours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getMinutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&#39;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions&#39; target=&#39;_blank&#39;&gt;There are multiple ways to create functions in JavaScript&lt;/a&gt;.
The above is called an arrow function.&lt;/p&gt;
&lt;p&gt;The previous function takes nothing in its arguments and returns an array of
elements of type &lt;code&gt;number&lt;/code&gt;. That&amp;rsquo;s where TypeScript comes into play: the type
system. JavaScript is a
&lt;a href=&#39;https://stackoverflow.com/a/787253/4352712&#39; target=&#39;_blank&#39;&gt;dynamic&lt;/a&gt;,
&lt;a href=&#39;https://stackoverflow.com/questions/964910/is-javascript-an-untyped-language&#39; target=&#39;_blank&#39;&gt;weakly typed&lt;/a&gt;
language. TypeScript, on the other hand, adds optional static typing to our
programs. In fact, we can further annotate each variable with its
&lt;a href=&#39;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html&#39; target=&#39;_blank&#39;&gt;type&lt;/a&gt;
like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getHours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getMinutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Now, since it&amp;rsquo;s declared/typed as a &lt;code&gt;number&lt;/code&gt;, the compiler will complain if you
tried to assign a &lt;code&gt;string&lt;/code&gt; to the &lt;code&gt;hours&lt;/code&gt; variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ERROR!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the name of the function starts with an &lt;code&gt;_&lt;/code&gt;. This is a habit I picked
from writing JavaScript since it does not have a notion of private functions,
officially anyway. However, TypeScript does have a &lt;code&gt;private&lt;/code&gt; keyword by
default.&lt;/p&gt;
&lt;h4 id=&#34;iii-converting-the-time-to-binary&#34;&gt;III. Converting the time to binary&lt;/h4&gt;
&lt;p&gt;In this section, we will do two tasks: extract each section (hours, minutes,
and seconds) into two components (tens and ones) and convert each component to
binary. Let&amp;rsquo;s start by extracting section components:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in src/index.ts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSectionComponents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;section&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we take a time section as a number, &lt;code&gt;hours&lt;/code&gt; for example, and extract it
into two components: tens and ones. For example, if it&amp;rsquo;s currently &lt;code&gt;21&lt;/code&gt;, we get
an array of two elements: &lt;code&gt;[&#39;2&#39;, &#39;1&#39;]&lt;/code&gt;. The call to &lt;code&gt;padStart()&lt;/code&gt; function adds
a zero to the right if the hour is only one digit. For example, &lt;code&gt;4&lt;/code&gt; should be
&lt;code&gt;04&lt;/code&gt; and thus, we get: &lt;code&gt;[&#39;0&#39;, &#39;4&#39;]&lt;/code&gt;. The &lt;code&gt;split()&lt;/code&gt; function splits the string
into an array. For example, &lt;code&gt;&#39;12&#39;.split(&amp;quot;&amp;quot;)&lt;/code&gt; will return &lt;code&gt;[&#39;1&#39;, &#39;2&#39;]&lt;/code&gt;. Notice
that these functions work only on strings and that&amp;rsquo;s why we first called the
&lt;code&gt;toString()&lt;/code&gt; function on the section.&lt;/p&gt;
&lt;p&gt;The second task is where we convert each component of each section into binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in src/index.ts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_convertComponentsToBinary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;component&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; function is sort of like a for-loop except that it loops over some
items/array and returns another array after applying a function on the given
array. It sounded complicated writing this. Let&amp;rsquo;s take our example: given this
&lt;code&gt;[&#39;2&#39;, &#39;1&#39;]&lt;/code&gt; as the components array, we use map to loop over each element of
this array and apply the following logic on each one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;component&lt;/code&gt; is a variable that holds each element in the array. Let&amp;rsquo;s replace
the variable with a value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So &lt;code&gt;Number()&lt;/code&gt; will convert the string element into a number, &lt;code&gt;toString(2)&lt;/code&gt; will
convert the number into the binary format as a string, and &lt;code&gt;padStart(4, &#39;0&#39;)&lt;/code&gt;
will pad the result with up to 4 0&amp;rsquo;s (since each column in a binary clock has 4
rows). Applying all three functions on &lt;code&gt;&#39;2&#39;&lt;/code&gt; will give us =&amp;gt; &lt;code&gt;&#39;0010&#39;&lt;/code&gt; (2 is 10
in binary).&lt;/p&gt;
&lt;p&gt;The newly aquired value &lt;code&gt;&#39;0010&#39;&lt;/code&gt; will be appended to an array and the iteration
will move to the next value, &lt;code&gt;&#39;1&#39;&lt;/code&gt;. The new iteration will apply the same three
functions and return &lt;code&gt;&#39;0001&#39;&lt;/code&gt;. This will be added to the array as well. Now
that the iteration is done, the whole array, &lt;code&gt;[&#39;0010&#39;, &#39;0001]&lt;/code&gt; will be returned
from the &lt;code&gt;map()&lt;/code&gt; function call and that&amp;rsquo;s our final return value.&lt;/p&gt;
&lt;h4 id=&#34;vi-printing-the-output&#34;&gt;VI. Printing the output&lt;/h4&gt;
&lt;p&gt;Here&amp;rsquo;s the function that prints the output to the terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in src/index.ts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_printToConsole&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// tens component
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ones component
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It takes an array of components (each component is an array of strings [in
binary format] in itself, &lt;code&gt;[&#39;0000&#39;, &#39;0001&#39;]&lt;/code&gt;). The function starts first by
clearing the terminal so we always have only the current time in the output.
Then, it prints each row from each component. We have 4 rows, that&amp;rsquo;s the first
loop. Then we have 3 sections * 2 components = 6 components in total, that&amp;rsquo;s
the inner loop. We append the row elements into the &lt;code&gt;row&lt;/code&gt; variable. Finally, we
print each row after the inner loop.&lt;/p&gt;
&lt;h4 id=&#34;v-ticking-the-clock&#34;&gt;V. Ticking the clock&lt;/h4&gt;
&lt;p&gt;Last but not least, let&amp;rsquo;s run our clock. We will use a JavaScript function
named &lt;code&gt;setInterval()&lt;/code&gt;. This function is used to execute some logic every
defined number of milliseconds. It takes two arguments: a function containing
the logic to execute, and the number of milliseconds that define the frequency.
We use the functions we defined previously here, and pass 1000 milliseconds as
the frequency to tick our clock every 1 second:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// in src/index.ts
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;setInterval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hourComponents&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSectionComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hours&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minuteComponents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSectionComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;secondComponents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_getTimeSectionComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hourBinaryComponents&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_convertComponentsToBinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hourComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minuteBinaryComponents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_convertComponentsToBinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;minuteComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;secondBinaryComponents&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_convertComponentsToBinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;secondComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;hourBinaryComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;minuteBinaryComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;secondBinaryComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

  &lt;span class=&#34;nx&#34;&gt;_printToConsole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;vi-extra-improvements&#34;&gt;VI. Extra: improvements&lt;/h4&gt;
&lt;p&gt;This is an extra part. You can take it as a homework, although, you&amp;rsquo;ll find the
improvements in the final code on GitHub. A first improvement is to move the
ticking logic inside &lt;code&gt;setInterval()&lt;/code&gt; into a separate function. Another one is
to wrap our functions inside a &lt;code&gt;BinaryClock&lt;/code&gt; class and deal with it as an
object.  This is part of the object oriented programming capabilities provided
by TypeScript. Here&amp;rsquo;s the
&lt;a href=&#39;https://www.typescriptlang.org/docs/handbook/2/classes.html&#39; target=&#39;_blank&#39;&gt;documentation of classes and objects&lt;/a&gt;
from TypeScript documentation page.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;That&amp;rsquo;s the end of our tutorial. If you have any problems following along or any
general comments, please do not hesitate to comment below or contact me.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>A Micro Framework for Learning</title>
        <link>https://aonemd.me/posts/a-micro-framework-for-learning/</link>
        <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/a-micro-framework-for-learning/</guid>
        <description>&lt;p&gt;Software engineering as a field is notoriously known for the reputation of the
need of constant learning. This is true to some degree. I mean, who can keep up
with the infinite number of Javascript libraries?! Although, a software
engineer can get by without staying up to date with technology in some cases
(such as working on a stable or rather old technology). However, to be
hire-able or at least relevant in this field, one needs to at least have an
idea about what&amp;rsquo;s going on in the world of software.&lt;/p&gt;
&lt;p&gt;I have to say that although learning is vital here, the constant state of
always learning is not a sustainable way to live, or so I have learned! Living
to learn and study languages and frameworks and tools, etc. everyday,
eventually, will lead to burnout and numerous physical health issues.&lt;/p&gt;
&lt;p&gt;What I think is most suitable to keep up and still have a normal human life is
to study in small chunks. Most importantly, not for a very long time. You can
for example, study before preparing for interviews, or learn a certain tool
for a project at work. That&amp;rsquo;s a good way to keep up and not burn yourself out.&lt;/p&gt;
&lt;p&gt;I have a theory that given proper resources (most importantly time), learning
new skills or achieving goals is attainable to us human beings. As long as you
have the patience to keep going and the pace does not matter so much. A
feedback loop is of great importance here, mainly, for keeping motivation and
correcting your path. The feedback loop is also very important to measure your
progress; be it positive or negative.&lt;/p&gt;
&lt;p&gt;That was a long introduction! The following very few points are what I call a
micro framework for learning:&lt;/p&gt;
&lt;h3 id=&#34;practice&#34;&gt;Practice&lt;/h3&gt;
&lt;p&gt;For technical skills, practice is key. When it comes to learning though,
practice is mentioned a lot yet ignored so often. If you&amp;rsquo;re, for example,
taking a video course or reading an online tutorial to learn a new language,
you cannot say you&amp;rsquo;ve learned the material without writing it yourself. It must
be engraved by your own fingers to form the muscle memory and connections
needed later on. When I was younger and had difficulty learning something, my
father always used to tell me to write it down. Luckily, our job as software
engineers is mostly all about writing.&lt;/p&gt;
&lt;h3 id=&#34;imitate&#34;&gt;Imitate&lt;/h3&gt;
&lt;p&gt;This one is a form of practice. My advice is to devour whatever material you
can get your hands on and imitate it. If you&amp;rsquo;re learning the Go programming
language and someone made a 2-hour video building a project in Go, watch it and
write the code along with the video. I know that writing a to-do app may sound
silly but try it in your new technology, you might hit something you didn&amp;rsquo;t
know you didn&amp;rsquo;t know. It doesn&amp;rsquo;t have to be authentic, this is merely for
practice. Although, you can always add your personal touch and make changes to
what you&amp;rsquo;re building.&lt;/p&gt;
&lt;h3 id=&#34;take-notes&#34;&gt;Take notes&lt;/h3&gt;
&lt;p&gt;I always advocate for taking notes. I even &lt;a href=&#34;https://aonemd.me/posts/how-i-take-notes&#34;&gt;wrote a
post&lt;/a&gt; about how I take notes. I have seen opinions
that are against taking notes and instead prefer searching every time you need
to learn something but I don&amp;rsquo;t agree. Taking notes is a great exercise to write
what you learn in your own words. Your notes become kind of a reference that
you can go back to anytime. They are also great for preparing for interviews.
Taking notes doesn&amp;rsquo;t have to be complicated though.  I use &lt;a target=&#34;_blank&#34;
href=&#34;https://www.markdownguide.org/getting-started/&#34;&gt;Markdown&lt;/a&gt;, a text
editor, and Dropbox to sync them to my phone and that&amp;rsquo;s it. For inspiration,
you can take a look at this &lt;a href=&#34;https://github.com/jbranchaud/til&#34;&gt;TIL
repository&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;In the end, I&amp;rsquo;d like to add that in theory, things may seem perfect but in
practice, they are really not. It&amp;rsquo;s better to be practical and realistic about
your goals than being perfect and not achieving anything.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Ruby: How Can Something So Beautiful Become So Ugly</title>
        <link>https://aonemd.me/posts/ruby-how-can-something-so-beautiful-become-so-ugly/</link>
        <pubDate>Mon, 04 Jan 2021 00:00:00 +0200</pubDate>
        
        <guid>https://aonemd.me/posts/ruby-how-can-something-so-beautiful-become-so-ugly/</guid>
        <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: this is a rant.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using Ruby since 2013 and for most of my study and career, Ruby was
may main, go-to programming language for almost everything.&lt;/p&gt;
&lt;p&gt;Ruby&amp;rsquo;s syntax decisions make so much sense than most other languages. Although,
it&amp;rsquo;s often argued against making programming languages like natural languages,
Ruby programs flow like natural English.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ruby is also very well suited to be a tool for teaching programming as well as
a very good pseudo-code language. I know Python has the lead in that role,
however; I do not think Python syntax would make much sense to beginners; it
would just raise so many unnecessary questions. Ruby on the other hand, does
not have that problem. It has other kinds of problems.&lt;/p&gt;
&lt;p&gt;Although I have wanted to write about this for sometime, the main motivation
behind writing this post, finally, is the latest Ruby 3.0 release which was on
the 25th December, 2020. This release is considered the most important release
of Ruby so far and it&amp;rsquo;s been looked forward to for a long time. However, to me,
it is the most disappointing.&lt;/p&gt;
&lt;p&gt;Well, my biggest pet peeve with Ruby is that it is bloated and is getting even
more bloated with every release by the addition of useless functions and
operators to match Rails&#39; ActiveSupport utilities ¯\_( ͠° ͟ʖ ͠°)_/¯.&lt;/p&gt;
&lt;p&gt;The straw that broke the camel&amp;rsquo;s back was when types were introduced in the 3.0
release. This feature is the one I personally was most looking forward to.
Adding static type analysis to the language is a great step to help find and
mitigate type related errors in Ruby programs.&lt;/p&gt;
&lt;p&gt;However, unlike &lt;a
href=&#34;https://www.php.net/manual/en/language.types.declarations.php&#34;
target=&#34;blank&#34;&gt;PHP&lt;/a&gt; and &lt;a
href=&#34;https://docs.python.org/3/library/typing.html&#34; target=&#34;blank&#34;&gt;Python&lt;/a&gt;
(Ruby&amp;rsquo;s most famous contenders) where types are built into the language
directly via type annotations, types in Ruby were added in the form of a new
language called &lt;code&gt;RBS&lt;/code&gt;, meaning; one would have to maintain separate &lt;code&gt;.rbs&lt;/code&gt;
files for type definitions. And now instead of writing the structure of a
program once, it has to be written twice!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a small example of how it looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# messenger.rb&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Messenger&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;medium&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;vi&#34;&gt;@medium&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;medium&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deliver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;You have a new message: &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# messenger.rbs&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Messenger&lt;/span&gt;
  &lt;span class=&#34;vi&#34;&gt;@medium&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Symbol&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Symbol&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;medium&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;void&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deliver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maintaining the same structure twice is not an easy task in large software
specially that static analysis is not enforced nor required by the language;
thus, making writing types an annoying afterthought. The issue is, I don&amp;rsquo;t see
why this is the chosen solution except that maybe to avoid rewriting Rails and
instead, add new files for type definitions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=25535455&#34; target=&#34;blank&#34;&gt;Some
have already voiced their opinions on this matter&lt;/a&gt;, however; I find it weird
that the Ruby community is not talking about this.&lt;/p&gt;
&lt;p&gt;I know that no language is perfect and that each language has its use cases,
however; I see that Ruby is tiptoeing around Rails; thus, it is cornered in the
Rails web development area.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: here are parts of a comment I made replying to the backward
compatibility point and other points made:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I see the backward compatibility point of view and it&amp;rsquo;s valid and actually an
easy solution now. But my concern is maintaining software on the long run and
having to keep track of two points of truth.
&lt;br&gt;
&lt;br&gt;
And the talk about using IDEs
doesn&amp;rsquo;t make sense to me. I don&amp;rsquo;t need to use a specific tool to use the
language.
&lt;br&gt;
&lt;br&gt;
I write C more than Ruby nowadays and I use header files but in this case, this
is the best we&amp;rsquo;ve got, otherwise let&amp;rsquo;s use Go or Rust or whatever newer xD.
&lt;br&gt;
&lt;br&gt;
My point in the end is that Ruby deserves better tooling and more sane
choices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I want to end this with a quote by /u/mashatg on Reddit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is not only about this particular decision but disconcerted development
and language&amp;rsquo;s direction in general. Incapability to learn from past mistakes
and get inspired from more successful.
&lt;br&gt;
&lt;br&gt;
It is so sad to watch how an original and elegant design with lot of
progressive ideas got butchered and ended up in current diffuse mess. It does
not look like an attitude to fight back declining relevance. It looks like
towel thrown into a ring and waiting referee to notice.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      </item>
      
      <item>
        <title>للغة العربية Vim</title>
        <link>https://aonemd.me/posts/vim-for-arabic/</link>
        <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/vim-for-arabic/</guid>
        <description>&lt;p&gt;أستخدمُ محرر النصوص Vim حصراً في كتابة البرمجيات وأحاول استخدام آداة واحدة لكل
وظيفة. فلذلك؛ لا يوجد على حاسوبي الشخصي أكثر من برنامج لآداء نفس الوظيفة. ومن ذلك
المنطلق، أستخدمُ Vim في كتابة وتحرير المقالات على مدونتي ومنها المقالات باللغة
العربية (المقال الذي تقرؤه الآن مكتوبٌ باستخدام Vim).&lt;/p&gt;
&lt;p&gt;المشكلة أن الإعدادت الأساسية أو الافتراضية ل Vim غير معدّة للكتابة باللغة العربية.
فمثلاً اتجاه النص في Vim يسري من الشِّمال إلى اليمين. الصورة التالية لشكل النص
العربي في Vim حيث تظهر الحروف معكوسة:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/vim-for-arabic-ltr.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/vim-for-arabic-ltr.png&#34; alt=&#34;Vim ltr view&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;الحل&#34;&gt;الحل؟&lt;/h3&gt;
&lt;p&gt;يوجد في Vim طريقة أو إعداد لتغيير اتجاه النص ليتجه من اليمين إلى الشمال. الإعداد
المقصود هو &lt;code&gt;leftright&lt;/code&gt; أو &lt;code&gt;rl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;leftright&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;&amp;#34;OR :set lr&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;لتبديل اتجاه النص بين اليمين إلى الشمال والعكس، يمكن إضافة &lt;code&gt;!&lt;/code&gt; للقاعدة السابقة
فتصبح:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;leftright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;&amp;#34;OR :set lr!&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;الآن، يمكننا أن نضع اختصاراً لتبديل اتجاه النص بإضافة السطرين التاليين إلى ملف
إعدادت Vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;~/.vimrc&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;The Leader&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapleader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;lt;Space&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;toggle RTL mode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;في Vim، يوجد ما يسمى بــ &amp;ldquo;Leader key&amp;rdquo; أو المفتاح الأساسي؛ وهو مفتاح يمكن إضافة
مجموعة من المفاتيح الأخرى إليه  وتشكيل العديد من الاختصارات لآداء مختلف الوظائف.&lt;/p&gt;
&lt;p&gt;بالنسبة لي، أفضّل استخدام مفتاح المسافة كمفتاحٍ أساسي في Vim لتوسطه لوحة المفاتيح
ولسهولة الوصول إليه. لذلك فالاختصار السابق يمكننّا من تبديل اتجاه النص بالضغط على
مفتاح المسافة مع مفتاح حرف &amp;ldquo;L&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;ينبغي أن أنوّه عن وجود إعدادٍ بديٍل ل &lt;code&gt;leftright&lt;/code&gt; وهو &lt;code&gt;arabic&lt;/code&gt;. في الواقع، الخيار
&lt;code&gt;arabic&lt;/code&gt; يقوم بتفعيل &lt;code&gt;rightleft&lt;/code&gt; بالإضافة إلى خياراتٍ أخرى. راجع صفحة الإعداد في
Vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arabic&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;الإعداد &lt;code&gt;arabic&lt;/code&gt; يقوم بتغيير لوحة المفاتيح إلى العربية كما يسمح باستخدام حركات
Vim مع لوحة المفاتيح العربية. لذلك، فلا حاجة للتغيير إلى الإنجليزية من أجل الدخول
في وضع الكتابة (Insert mode) ثم التغيير إلى العربية مرة أخرى لبدء الكتابة. كما
يسمح Vim بالتبديل بين العربية والإنجليزية من خلال الضغط على CTRL + ^ (مفتاح رقم
٦).&lt;/p&gt;
&lt;p&gt;يمكننا تغيير القاعدة السابقة واستبدالها بالتالي:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;~/.vimrc&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;The Leader&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapleader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;lt;Space&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;toggle Arabic mode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arabic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;والنتيجة:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/vim-for-arabic-rtl.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/vim-for-arabic-rtl.png&#34; alt=&#34;Vim RTL view&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;قد لا تكون النتيجة مرضية بشكلٍ كامل لعدم دعم Vim للنصوص متعددة الاتجاه
(bidirectional text) أو لعدم دعم برنامج سطر الأوامر (Terminal client) للغة
العربية من الأساس.&lt;/p&gt;
&lt;p&gt;على أية حال، يمكنك الاطلاع على إعداداتي الخاصة ب Vim على
&lt;a href=&#34;https://github.com/aonemd/aaku-dev/blob/master/vim/vimrc&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>بـي سـي</title>
        <link>https://aonemd.me/posts/pc/</link>
        <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/pc/</guid>
        <description>&lt;p&gt;من سيل الأفكار والمصطلحات التي تتسلل إلى المجتمع العربي بين الحين والآخر، انتشر
مصطلح &amp;ldquo;Political Correctness&amp;rdquo; (يُختصر PC) وكثُر استخدامه في صفحات وسائل التواصل الاجتماعي.
وهذا ليس بالأمر الغريب؛ فمن الطبيعي تقليد الأمم المتقدمة واستيراد &amp;ldquo;مظاهر الحضارة&amp;rdquo;
منها حتى لو أن مستخدِم هذا المصطلح لا يمكنه اختيار رئيس البلدية في منطقته.&lt;/p&gt;
&lt;p&gt;كلٌّ حرٌّ فيما يعتقد بالطبع ــ من دون فرضٍ أو وصايةٍ على الغير ــ لكنّ التقليد الفارغ
أو ما يسمى بال &amp;ldquo;Cargo Culting&amp;rdquo; ما هو سوى هروبٍ من مواجهة مشكلات الفرد والمجتمع
الحقيقية أو على أفضل تقدير، بحثٌ عن حلولٍ لمشكلاتٍ غير موجودة.&lt;/p&gt;
&lt;blockquote lang=&#34;ar&#34;&gt;
  &lt;p&gt;
    المغلوب مولع أبداً بالاقتداء بالغالب في شعاره وزيه و نحلته و سائر أحواله و عوائده.
  &lt;/p&gt;
  &lt;cite&gt;ابن خلدون&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;معنى أن تكون &amp;ldquo;Politically correct&amp;rdquo; أن تكون على صوابٍ على الدوام في تعبيراتك
وأفعالك التي يجب أن تتوافق مع ما يعتقده معتنقو الفكرة. من الغباء
الاعتقاد بمجانبة الإنسان الصواب على الدوام، فالإنسان يصيب ويخطئ ويعتذر ويسقط وينهض
وهذا جزء من التجربة البشرية.  ومن غير الممكن أن تُرضي جميع الناس وتتوقع أن يمشي
المجتمع على قشر بيض.&lt;/p&gt;
&lt;p&gt;أيضاً، ما يمارسه الداعون لل &amp;ldquo;Political Correctness&amp;rdquo; من التشهير بمعارضيهم وقمع
الآراء أو إقامة اللطميات واتخاذ دور الضحية ما هو سوى تعصب وإرهاب فكري.&lt;/p&gt;
&lt;h3 id=&#34;عودة-إلى-مجتمعنا&#34;&gt;عودة إلى مجتمعنا!&lt;/h3&gt;
&lt;p&gt;الأمر الذي لفت انتباهي هو الترجمة الغريبة المنتشرة ــ وأعتقد
الوحيدة المستخدمة ــ لهذا المصطلح ألا وهي &amp;ldquo;الصوابية السياسية&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;بدايةً، اتجهتُ للبحث عن كلمة &amp;ldquo;صوابية&amp;rdquo; في المعاجم العربية. فالكلمة &amp;ldquo;صوابية&amp;rdquo; تبدو
غريبةً على العربية وتشعر أنه تم تلفيقها بفعل الترجمة الحرفية لتوافق كلمة
&amp;ldquo;سياسية&amp;rdquo;. بالطبع، لم أجد ذكراً للكلمة في المعاجم كما توقعت. كما لم أجد استخداماً
للكلمة في غير موضع &amp;ldquo;صوابية سياسية&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;يجدر بي أن أذكر أن &lt;a href=&#39;https://ar.wikipedia.org/wiki/%D8%B5%D9%88%D8%A7%D8%A8%D9%8A%D8%A9_%D8%B3%D9%8A%D8%A7%D8%B3%D9%8A%D8%A9&#39; target=&#39;_blank&#39;&gt;مقال ويكيبيديا العربية عن مصطلح &amp;ldquo;Political Correctness&amp;rdquo;&lt;/a&gt;
يجدُ ترجماتٍ مغايرة أعتقد أن أفضلها وصفاً للمعنى: &amp;ldquo;اللباقة الاجتماعية&amp;rdquo; على الرغم من الأصل السياسي للمصطلح.&lt;/p&gt;
&lt;p&gt;في الواقع ليست لدي خبرة في الترجمة إلى العربية ــ للأسف ــ ولا أعلم كيف تتم
عمليات ترجمة المصطلحات واعتمادها وانتشارها بين الناس، لكنّي كناطقٍ للعربية لا أرى
وصفاً لتلك الترجمة سوى بأنها ترجمةٌ رديئة لمصطلحٍ أردأ!&lt;/p&gt;
&lt;p&gt;اقرأ: &lt;a href=&#34;https://www.ida2at.com/what-is-political-correctness-why-it-causes-outrage/&#34;&gt;معركة قل ولا تقل: ما «الصوابية السياسية»؟&lt;/a&gt;&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>My Desktop System Tools</title>
        <link>https://aonemd.me/posts/my-desktop-system-tools/</link>
        <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/my-desktop-system-tools/</guid>
        <description>&lt;p&gt;In this post, I will go over how I setup my desktop system for programming and
general media usage. Please note that this setup is heavily keyboard driven
since I rarely use the touchpad or the mouse except maybe for web browsing or
graphics software.&lt;/p&gt;
&lt;h3 id=&#34;machine&#34;&gt;Machine&lt;/h3&gt;
&lt;p&gt;My main machine is a 2017 Thinkpad X1 Carbon. I like it for it&amp;rsquo;s small size,
light weight, and Linux support. It is mainly a programming machine for me. It
doesn&amp;rsquo;t contain a dedicated graphics card so it has low power consumption and
zero issues with Linux in that regard (no fan noises). Although, I may have
some issues with the quality control of the machine.&lt;/p&gt;
&lt;h3 id=&#34;operating-system&#34;&gt;Operating System&lt;/h3&gt;
&lt;p&gt;My operating system for years has been exclusively GNU/Linux (to the point that
now I get confused if I tried to use a Windows 10 machine). I have used and
tried many many distributions of Linux be it Debian based, SUSE based, Red Hat
based, and finally Arch Linux based systems. I have had my fair share of distro
hopping along the years. However, Arch Linux has been on my machine for the
longest time without a reinstall compared to other systems. Although known as a
rolling release system, Arch Linux has been very stable on my machine with
almost zero issues even though I don&amp;rsquo;t do system updates on a regular basis (I
update the system whenever I remember or when I can afford to restart my
machine). The benefit of using Arch Linux is that it is bare bones so I can
customize it however I want. Also, the benefit of always having the most
updated software is a great feature.&lt;/p&gt;
&lt;p&gt;I wrote a comprehensive guide for installing Arch Linux on
&lt;a href=&#34;https://gist.github.com/aonemd/96fd9bf2e42df4869a099f433c074907&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;desktop-environment&#34;&gt;Desktop Environment&lt;/h3&gt;
&lt;p&gt;The Linux world and the free software world in general have a great variety in
the available tools and software. This includes the desktop environments.  I
have tried many desktop environments as well and finally got to the point that
no desktop environment is the best desktop environment. Well, that&amp;rsquo;s not
totally correct. A desktop environment is a nothing but a bunch of tools
bundled and installed together. These tools include things like the graphical
use interface with a tool bar and a system tray, an app finder, a window
manager, a file manager, notification daemon, a login session manager, and so
many other tools for various tasks. The issue here is that each desktop
environment installs so many packages that are probably not at all needed by
everyone. For me, I like to use certain tools that may render desktop
environment default installed tools redundant.&lt;/p&gt;
&lt;p&gt;This is the reason I turned into using minimal tools to manage my desktop and
thus, creating my own desktop environment (sort of).&lt;/p&gt;
&lt;p&gt;For starters, my graphical user interface is rendered and managed by the X11
windowing system. Although,
&lt;a href=&#39;https://wayland.freedesktop.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;Wayland&lt;/em&gt;&lt;/a&gt;
popularity is rising, most of the current Linux GUI software is compatible with
the X protocol.&lt;/p&gt;
&lt;p&gt;To manage my windows, I use a tiling window manager; one that tiles the windows
next to each other by default instead of stacking them on top of each other.
There are many window managers that operate differently. The most popular
window managers are
&lt;a href=&#39;https://i3wm.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;i3wm&lt;/em&gt;&lt;/a&gt;,
&lt;a href=&#39;https://awesomewm.org/index.html&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;Awesome&lt;/em&gt;&lt;/a&gt;, and
&lt;a href=&#39;https://xmonad.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;XMonad&lt;/em&gt;&lt;/a&gt;. I suggest starting
out with &lt;em&gt;i3wm&lt;/em&gt; and experimenting from there.  My window manager of choice is
&lt;a href=&#39;https://dwm.suckless.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;dwm&lt;/em&gt;&lt;/a&gt;.
I chose &lt;em&gt;dwm&lt;/em&gt; mainly because it&amp;rsquo;s so minimal and its config file is written in
C instead of a special DSL. &lt;em&gt;dwm&lt;/em&gt; is a part of a group of tools known as the
&lt;a href=&#39;https://suckless.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;suckless&lt;/em&gt;&lt;/a&gt; tools.&lt;/p&gt;
&lt;p&gt;Since &lt;em&gt;dwm&lt;/em&gt; is minimal, it doesn&amp;rsquo;t come with a tool bar by default. The user
needs to write their own bar. I see most users write an infinite loop in bash
and output the data they need into the bar. However, I don&amp;rsquo;t think this is an
efficient approach. &lt;a href=&#34;http://github.com/aonemd/onpar&#34;&gt;I wrote my own bar in Go&lt;/a&gt;
that schedules each section of the bar to run concurrently. It&amp;rsquo;s been running
on my system for years and I barely feel it running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wPGoFWA.png&#34; alt=&#34;My Desktop&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-emulator&#34;&gt;Terminal Emulator&lt;/h3&gt;
&lt;p&gt;Again and again, the Linux world enjoys a great variety of available software.
For terminal emulators, my choice has been the
&lt;a href=&#39;https://st.suckless.org/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;st&lt;/em&gt;&lt;/a&gt;
terminal. The &lt;em&gt;st&lt;/em&gt; terminal emulator is also a
part of the suckless tools and is very minimal and light.  It&amp;rsquo;s configured in C
as well. A more extremely fast, full-featured terminal emulator I&amp;rsquo;d recommend
is &lt;a href=&#39;https://sw.kovidgoyal.net/kitty/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;kitty&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;text-editor&#34;&gt;Text Editor&lt;/h3&gt;
&lt;p&gt;For text editing, I use Vim exclusively. Although, I have been fascinated by
the capabilities of Visual Studio Code recently, I always go for Vim for its
minimal text editing workflow and the ability to run it inside a terminal
emulator session so it&amp;rsquo;s usable everywhere, be it the desktop or the server.  I
have written &lt;a href=&#34;https://aonemd.me/categories#vim&#34;&gt;a small series of posts&lt;/a&gt; about configuring Vim.&lt;/p&gt;
&lt;h3 id=&#34;file-manager&#34;&gt;File manager&lt;/h3&gt;
&lt;p&gt;Since I started with a keyboard driven setup, my file manager should be
keyboard driven as well.  There are many good CLI file managers. I have been
using
&lt;a href=&#39;https://github.com/ranger/ranger&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;ranger&lt;/em&gt;&lt;/a&gt; for a long time.
However, I recently discovered &lt;a href=&#39;https://github.com/jarun/nnn&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;nnn&lt;/em&gt;&lt;/a&gt;
which is faster (written in C), minimal, and more modular. I have to say that I
cheat sometimes and use &lt;em&gt;Thunar&lt;/em&gt; (mainly to manage external devices such as USB
sticks and mobile devices).&lt;/p&gt;
&lt;h3 id=&#34;media-software&#34;&gt;Media Software&lt;/h3&gt;
&lt;p&gt;My media software usage is very light. I only have
&lt;a href=&#39;https://www.videolan.org/vlc/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;VLC&lt;/em&gt;&lt;/a&gt; for video and
&lt;a href=&#39;https://cmus.github.io/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;cmus&lt;/em&gt;&lt;/a&gt; for music. Some people use
&lt;a href=&#39;https://mpv.io/&#39; target=&#39;_blank&#39;&gt;&lt;em&gt;MPV&lt;/em&gt;&lt;/a&gt; which, to me, looks like a
great option but I have yet to invest some time using it to make the final
decision (I will probably update this post with my findings).&lt;/p&gt;
&lt;p&gt;UPDATE: I used &lt;em&gt;mpv&lt;/em&gt; for a couple of days, tried to configure it but gave up,
mainly, because I have enough config files already and I don&amp;rsquo;t need to worry
about different decoders and shaders in order to play media (which is so
minimal compared to my day-to-day computer needs).&lt;/p&gt;
&lt;h3 id=&#34;final-note&#34;&gt;Final Note&lt;/h3&gt;
&lt;p&gt;I advise you to experiment and evaluate different tools and try to customize
your system to your liking. I understand that the great variety of available
tools can lead to some kind of choice overload bias (more options, more
difficult time to choose), however; just starting somewhere (even starting out
with popular tools) can lead to better evaluation and better decision making.&lt;/p&gt;
&lt;p&gt;Finally, if you want some inspiration, you can take a look at &lt;a href=&#34;https://github.com/aonemd/aaku&#34;&gt;my configuration
files on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Love and Fear</title>
        <link>https://aonemd.me/posts/love-and-fear/</link>
        <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/love-and-fear/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;I remember once, in crossing the Atlantic, to have gone upon the deck of the
ship at midnight, when a dense black cloud enveloped the sky, and the great
deep was roaring madly under the lashes of demoniac winds. My feeling was not
of danger or fear (which is a base surrender of the immortal soul), but of
utter desolation and loneliness; a little speck of life shut in by a tremendous
darkness.  When I was young, I believed the same nonsense that a lot of people
believe about happiness - that it comes from the flashy veneer of the American
dream: money, status, and power. But then I grew up (unlike too many other
people, who only grow older) and I began to see that these things often
destroyed happiness. I learned that happiness only comes from inner qualities,
such as courage, altruism, and optimism. Happiness comes from the self. But
where is the self? Who is the self? Who are you? If you don&amp;rsquo;t know, you&amp;rsquo;ll
never be happy, because you&amp;rsquo;ll never be able to connect with the inner core
qualities that make happiness possible. You&amp;rsquo;ll just travel through life in
circles, always going, always intent - never arriving, never content. You
should, in fact, be able to describe exactly who you are, right now, in the
proverbial 25 words or less.  And yet, there is a solitude, which each and
every one of us has always carried with him, more inaccessible than the
ice-cold mountains, more profound than the midnight sea; the solitude of self.
Our inner being, which we call ourself, no eye nor touch of man or angel has
ever pierced. Such is individual life. Who, I ask you, can take, dare take, on
himself the rights, the duties, the responsibilities of another human soul?&amp;hellip;
&amp;hellip;if we&amp;rsquo;re ever going to be truly happy&amp;hellip;we need to be willing to charge
headlong into the inferno of our most horrific fears - eyes open, intellect and
spirit at the ready - even as our survival instincts are screaming, &amp;lsquo;Run! Run!
Get out!&amp;rsquo; That takes courage, and that&amp;rsquo;s why courage is one of the
prerequisites for happiness. Courage, they say, is not the lack of fear, but
the ability to take action in spite of it. But where does that ability come
from? What power grants the strength to overcome the sick, shaky feeling of
fear? Only one power is that strong: love. In the ultimate analysis, human
beings have only two essential primal feelings: fear and love. Fear impels us
to survive, and love enables us to thrive. This complementary pair of feelings
has been the driving force of human history. Fear is the product of the
reptilian brain, hardwired into every fiber of our being, and love is the
product of the neocortical higher brain, where spirit and intellect reside.
Thus, the dance of the spirit and reptile - the shifting balance between the
neocortex and the reptilian brain - is the dance of love and fear. For you to
be happy, love must lead this dance.  Nature loves courage. You make the
commitment and nature will respond to that commitment by removing impossible
obstacles. Dream the impossible dream and the world will not grind you under,
it will lift you up. This is the trick. This is what all these teachers and
philosophers who really counted, who really touched the alchemical gold, this
is what they understood. This is the shamanic dance in the waterfall. This is
how magic is done. By hurling yourself into the abyss and discovering it&amp;rsquo;s a
feather bed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This quote is not mine. I have read it a while ago in a YouTube comment and I
knew I had to keep it in my notes for difficult times. Now I want to share with
you. I couldn&amp;rsquo;t trace the origin of the quote so all credits are due to the
original writer/author.&lt;/p&gt;
&lt;p&gt;In search for a purpose, we often direct our efforts into materialistic goals.
However, materialistic objects do and will get old and dull. What doesn&amp;rsquo;t get
old though, is responsibility. This responsibility, however; is never easy to
take on. Thus, in order to face the truth of oneself and to take on
responsibility, one needs courage; the courage to say what they mean, to do
what they believe in, to ask for and get what they want, and to live up to
their potential and up to their values.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t have much to say after this so I will just end the post with this
quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Truth and responsibility is the secret to a meaningful life, and without the
meaningful life, then all you have is suffering and nihilism and despair and
self-contempt.
&lt;cite&gt;Dr Jordan Peterson&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      </item>
      
      <item>
        <title>Another Brick in the Wall</title>
        <link>https://aonemd.me/posts/another-brick-in-the-wall/</link>
        <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/another-brick-in-the-wall/</guid>
        <description>&lt;p&gt;This post has been in my drafts since the beginning of 2016. I wanted to
postpone releasing it until I have the full view. And now that I have just
received the results of my last course at university, I think it&amp;rsquo;s time to
finally publish this post. Since this comes from my own experience, I cannot
remain objective in this post. Also, the first two drafts of this post has
nothing to do with its current form.&lt;/p&gt;
&lt;p&gt;Okay, here&amp;rsquo;s the short story: I got into university for a computer engineering
degree in 2012, hated every living second of it, decided to focus on
self-learning instead, got myself a few positions as a software engineer,
neglected my studies, decided to finish university anyway, and finally I
graduated!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://aonemd.me/images/another_brick_in_the_wall-plan.png&#34; alt=&#34;My 5-year plan&#34;&gt;&lt;/p&gt;
&lt;p&gt;You and I might as well ask why I would go back and finish university after I
got an actual paying job. I went as far as leaving my job at the time in order
to focus on my studies. Well, I believe I had two reasons. First of all, I
wanted to finish what I started.  The second reason is, specially coming from a
third-world nation, I wanted to have that official piece of paper that denotes
I know stuff although, realistically, I might know nothing, but hey, it&amp;rsquo;s the
state of the world we live in!&lt;/p&gt;
&lt;p&gt;Now enough about me, let&amp;rsquo;s talk about computer science education. It&amp;rsquo;s widely
debated over the internet whether to go to university for computer science or
to go to a 6-month boot camp that teaches web development basics. Well, in my
opinion, neither of them alone teaches you enough to get a software
engineering job nowadays.&lt;/p&gt;
&lt;p&gt;One might say that a computer science degree will teach you the theoretical
fundamentals and the required time management skills, or will give you the
credibility and the opportunity for networking with peers. This all may be
true, but there are caveats.&lt;/p&gt;
&lt;p&gt;My biggest issue with formal computer science education is having to follow a
predefined set of courses blindly. The issue here is that the student does not
get to see the full picture of the scientific material and only gets to see a
very narrow scope through the teacher&amp;rsquo;s vision because, of course, it&amp;rsquo;s all
part of a course that should be concluded in 3 months maximum. Now, take that
one course and multiply it by 5 or 6 courses a semester in different topics and
you get yourself scrapes of knowledge from here and there without understanding
why you&amp;rsquo;re learning any of that.&lt;/p&gt;
&lt;p&gt;The formal computer science education system does not take into consideration
that people may have different interests. Specially, in the field of computer
science, there are many fields that have their practical applications and their
demanding job markets. Another important aspect that is often neglected in
formal education in general, is that people learn differently. The formal
education system aims at producing graduates with similar educational
backgrounds but with the same mentality which, in my humble opinion, is not
right.&lt;/p&gt;
&lt;p&gt;The last issue I&amp;rsquo;m going to discuss in this post is the scientific material.
Well, to put it simply, the scientific material often felt dry or flat and out
of touch with reality. Being fed up during my recent courses, I started asking
questions. A funny incident took place in one of my compiler lectures. I asked
my professor (whom I respect greatly. Seriously, The professor is one of the
greatest teachers I&amp;rsquo;ve ever had) about a method/algorithm that we were being
taught in the course. I asked about if I looked into the code of a real
compiler, could I find the implementation of such algorithm. The professor
clearly said: &amp;ldquo;No&amp;rdquo;. I then asked why. The professor said: &amp;ldquo;because I invented
it!&amp;rdquo; I can say with almost certainty that most of the courses I took followed
that same pattern.&lt;/p&gt;
&lt;p&gt;In my opinion, those &amp;ldquo;caveats&amp;rdquo;, are reflected on the job market of software
engineering which is notorious for the need of constant self-learnings.&lt;/p&gt;
&lt;p&gt;I would like to conclude this post with saying that I do not encourage nor
discourage a certain path towards software engineering. I believe every
individual has their different case. For me, the important part in any path you
choose is having the patience and persistence to continue learning and going
forward.&lt;/p&gt;
&lt;h3 id=&#34;articles-i-enjoyed-reading&#34;&gt;Articles I enjoyed reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tobi.lutke.com/blogs/news/11280301-the-apprentice-programmer&#34;&gt;The Apprentice Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joequery.me/code/the-self-hating-web-developer/&#34;&gt;The self-hating Web Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codewithoutrules.com/2017/04/06/you-dont-need-a-cs-degree/&#34;&gt;You don’t need a Computer Science degree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
      
      <item>
        <title>Handy Keymaps in Vim</title>
        <link>https://aonemd.me/posts/handy-keymaps-in-vim/</link>
        <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/handy-keymaps-in-vim/</guid>
        <description>&lt;p&gt;In my first two posts in this Vim series, I talked about &lt;a href=&#34;https://aonemd.me/blog/finding-things-in-vim&#34;&gt;finding files in
Vim&lt;/a&gt; and &lt;a href=&#34;https://aonemd.me/blog/minimal-vim&#34;&gt;having a minimal Vim
setup&lt;/a&gt;.  In this post I&amp;rsquo;m going to go over some useful
keymaps and functions you can use in Vim to boost your text editing abilities
and to master the Vim wizardry. I will only cover keymaps that don&amp;rsquo;t include
external plugins except for section #2 which will be about generating tags (I
couldn&amp;rsquo;t leave this part without covering it).&lt;/p&gt;
&lt;h3 id=&#34;essentials&#34;&gt;Essentials&lt;/h3&gt;
&lt;p&gt;First and foremost, the leader key is a special key in Vim that with other
combinations of keys can be mapped to perform certain functions. By default,
Vim maps the leader to the backslash key. I see many Vimmers (yes, this is a
word now) set it to the comma key. I, however, like to set it to the space bar;
it&amp;rsquo;s a big key in the middle of the keyboard so it&amp;rsquo;s really easy to find it and
use it with other key combinations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;The Leader&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapleader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;lt;Space&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we&amp;rsquo;ve mapped the leader key, we can start mapping other keys to
functions.&lt;/p&gt;
&lt;p&gt;The first function in our list will be the save or the write buffer function.
Instead of using the shift and the semi-colon keys to generate a colon, typing
w, and then hitting Enter to save the current buffer, I found out that hitting
the space bar with the letter w is faster and easier to use specially for a
function that is used many times in the course of writing. This is just two key
presses instead of four:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;save current buffer&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second function is for replacing the current-under-cursor word with another
pattern/word. Simply, it copies the word under cursor and inserts it into a
substitution command call. You only need to type the replacement pattern and
press the Enter key to actually replace the text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;replace the word under cursor&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;* :%&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/\&amp;lt;&amp;lt;c-r&amp;gt;&amp;lt;c-w&amp;gt;\&amp;gt;/&lt;/span&gt;/&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next is a function that is found in many modern text editors, that is, auto
closing tags. Although sometimes it can get annoying when you don&amp;rsquo;t need it,
it&amp;rsquo;s handy most of the time when writing function definitions, if statements,
and other control structures in most popular languages. Each of the following
keymaps simply inserts a closing tag and puts the cursor in between the opening
and the closing tags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;autoclose tags&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inoremap&lt;/span&gt; { {}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inoremap&lt;/span&gt; [ []&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inoremap&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&amp;#34;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I feel like this section got really long so here&amp;rsquo;s one last function. To move a
line up or down in Vim, normally you&amp;rsquo;d delete it and paste it into the desired
target line. These keymaps make it possible to move lines up or down using the
leader key + k or j (for up and down):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;move lines around&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;==&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;==&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gv&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&amp;#39;&lt;span class=&#34;p&#34;&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gv&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;generating-tags&#34;&gt;Generating Tags&lt;/h3&gt;
&lt;p&gt;As I mentioned before, this is the only section that includes an external
dependency. &lt;a target=&#34;_blank&#34; href=&#34;https://ctags.io/&#34;&gt;&lt;em&gt;Universal Ctags&lt;/em&gt;&lt;/a&gt; is a tool
that analyzes the codebase and generates an index file of tags. This index of
tags can be used to jump between the definitions of functions, classes, and
other identifiers while navigating the code. You can jump to a tag definition
using the &lt;code&gt;:tag IDENTIFIER&lt;/code&gt; command in Vim.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;m trying not to switch context and leave the text editor as much as
possible, I made a keymap that generates the list of tags for me without
leaving Vim. The next block of code tells Vim where to look for tag definitions
by setting the &lt;code&gt;set tags&lt;/code&gt; entry and maps &lt;code&gt;leader + ct&lt;/code&gt; to generate the tag
list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt;.&lt;span class=&#34;nx&#34;&gt;git&lt;/span&gt;/&lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctags&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rf&lt;/span&gt; .&lt;span class=&#34;nx&#34;&gt;git&lt;/span&gt;/&lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;relative&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;.&lt;span class=&#34;nx&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pkg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also simplify the command above by moving the flags to a &lt;code&gt;~/.ctags&lt;/code&gt;
file (each flag alone on a single line) and only having this in your .vimrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ct&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ctags&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Rf&lt;/span&gt; .&lt;span class=&#34;nx&#34;&gt;git&lt;/span&gt;/&lt;span class=&#34;nx&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;manipulating-buffers&#34;&gt;Manipulating Buffers&lt;/h3&gt;
&lt;p&gt;Vim has this notion of buffers. Simply put, &lt;a target=&#34;_blank&#34; href=&#34;https://sanctum.geek.nz/arabesque/buffers-windows-tabs/&#34;&gt;a buffer is an open file&lt;/a&gt;.
A window in Vim is a way to view an open buffer.  A tab, on the other hand, is
a collection of windows. To save you (and myself) the pain, use buffers and
treat them the way you treat tabs in other text editors. You can read more
about buffers versus tabs and the best way to use them
&lt;a target=&#34;_blank&#34; href=&#34;https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, I have a few keymaps that make it easier to manipulate and deal with
buffers. For example, to open and close buffers, I have in my .vimrc this block
of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;create a new buffer (save it with :w ./path/to/FILENAME)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;enew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;close current buffer&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bq&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;bp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; #&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;close all open buffers&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ba&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;bufdo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following is for switching between open buffers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Tab to switch to next open buffer&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;bnext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;Shift + Tab to switch to previous open buffer&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;bprevious&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;leader key twice to cycle between last two open buffers&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;^&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can install
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ap/vim-buftabline&#34;&gt;vim-buftabline&lt;/a&gt; to
visualize your open buffers and see how they are being switched by the keymaps
above.&lt;/p&gt;
&lt;h3 id=&#34;splits-splits-splits&#34;&gt;Splits, Splits, Splits!&lt;/h3&gt;
&lt;p&gt;Window splits are such an important element of my text editing since sometimes
I need to keep track on multiple files at the same time. Vim provides some
shortcuts for creating and moving around splits, however; they can be a little
unintuitive for quick navigation between splits.&lt;/p&gt;
&lt;p&gt;To fix this, I have had a small function in my Vim configuration for a long
time that makes my life a lot easier. The function is mapped to a set of
intuitive combination of keys, namely, the control key + any of the navigation
keys (h, j, k, l).&lt;/p&gt;
&lt;p&gt;What the function does is that it checks first if a split already exists in the
direction you want to move to. If it does, the function simply moves the focus
to that split. If there isn&amp;rsquo;t a split already, the function creates a new split
and moves the focus to that split. This function I took from someone some long
time ago. I can&amp;rsquo;t recall where I got it from, but all the credit is due to the
original author.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;move to the split in the direction shown, or create a new split&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;curwin&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;winnr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wincmd &amp;#34;&lt;/span&gt;.&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;curwin&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;winnr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[jk]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;wincmd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;wincmd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wincmd &amp;#34;&lt;/span&gt;.&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vim is a powerful text editor with great capabilities. You can map multiple
keys to perform different functionalities in Vim that makes your text editing
easier.&lt;/p&gt;
&lt;p&gt;All the code in this post is taken from my .vimrc file in my dotfiles
repository on GitHub. You can check it out
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/aonemd/aaku-dev&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Action Cable: Rails 5 Most Anticipated Feature</title>
        <link>https://aonemd.me/posts/intro-to-actioncable/</link>
        <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/intro-to-actioncable/</guid>
        <description>&lt;p&gt;Action Cable is a simple framework that introduces WebSocket support to
Rails apps. It provides a server-side as well as a client-side integration
with WebSocket&amp;hellip;&lt;/p&gt;
&lt;p&gt;This post was originally posted on &lt;a target=&#34;_blank&#34; href=&#34;https://robustastudio.com&#34;&gt;Robusta Studio&lt;/a&gt;&amp;rsquo;s
blog on 6 Septemper, 2016. To read the full article, please visit
&lt;a href=&#34;https://blog.robustastudio.com/development-utilities/action-cable-rails-5-anticipated-feature/&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Minimal Vim</title>
        <link>https://aonemd.me/posts/minimal-vim/</link>
        <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/minimal-vim/</guid>
        <description>&lt;p&gt;In my previous &lt;a href=&#34;https://aonemd.me/blog/finding-things-in-vim&#34;&gt;blog post&lt;/a&gt;, I wrote about
searching files in Vim. In the next five sections, I will go over creating a
minimal Vim setup with a few dependencies. Although minimal does not
necessarily mean faster, I&amp;rsquo;ll keep in mind making Vim perform and open as fast
as possible.&lt;/p&gt;
&lt;h3 id=&#34;general-settings&#34;&gt;General Settings&lt;/h3&gt;
&lt;p&gt;There are a few must-have settings that are necessary for modern text editing.
Actually, while writing this blog post, I revisited my .vimrc file and removed
some of the unneeded settings. I&amp;rsquo;m currently experimenting Vim without all the
options I think I don&amp;rsquo;t need right now.  I&amp;rsquo;m also trying to comment my settings
as much as possible.&lt;/p&gt;
&lt;p&gt;There are many settings frameworks or distributions such as
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/tpope/vim-sensible&#34;&gt;vim-sensible&lt;/a&gt; or
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/SpaceVim/SpaceVim&#34;&gt;SpaceVim&lt;/a&gt; (although
they are completely different kinds of frameworks). Personally, I don&amp;rsquo;t like to
use these frameworks as a matter of fact since the need and the use case may
differ from one person to another and I prefer to tweak my configuration to my
own use case. Anyway, As a general rule I like to abide by, I tend to not put
any settings that I don&amp;rsquo;t understand in my .vimrc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Try not to put settings you don&amp;rsquo;t understand in your .vimrc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the next block of code, there are some [somewhat opinionated] commented
settings that you may need to have in your configuration file (I recommend
reading Vim&amp;rsquo;s manual for each entry before using it):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-viml&#34; data-lang=&#34;viml&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;more characters will be sent to the screen for redrawing&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ttyfast&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;time waited for key press(es) to complete. It makes for a faster key response&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ttimeout&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ttimeoutlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;make backspace behave properly in insert mode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;backspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;eol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;display incomplete commands&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;showcmd&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;a better menu in command mode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wildmenu&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wildmode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;longest&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;full&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;full&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;hide buffers instead of closing them even if they contain unwritten changes&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hidden&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;disable soft wrap for lines&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nowrap&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;always display the status line&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;laststatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;display line numbers on the left side&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;highlight current line&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cursorline&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;display text width column&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;colorcolumn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;new splits will be at the bottom or to the right side of the screen&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;splitbelow&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;splitright&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;always set autoindenting on&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;autoindent&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;incremental search&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;incsearch&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;highlight search&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hlsearch&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;searches are case insensitive unless they contain at least one capital letter&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ignorecase&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smartcase&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p&gt;Even though Vim is a powerful text editor, it cannot survive the competition
with other modern text editors and IDEs without plugins. Luckily, Vim is
powerful enough to be
&lt;a target=&#34;_blank&#34; href=&#34;https://www.youtube.com/watch?v=ES1L2SPgIDI&#34;&gt;extensible&lt;/a&gt; in
many ways. This enabled the Vim plugin ecosystem to thrive and grow. To manage
plugins, I use
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; which is
easier to maintain (since it&amp;rsquo;s only a single file), runs plugin updates
asynchronously, and it&amp;rsquo;s faster to load compared to other plugin managers.&lt;/p&gt;
&lt;p&gt;Regardless of the plugin manager, I always try to avoid using plugins as much
as possible. This is mainly because more plugins means more startup time for
Vim. More plugins also means more dependencies to manage.&lt;/p&gt;
&lt;p&gt;Using
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/hyiltiz/vim-plugins-profile&#34;&gt;vim-plugins-profile&lt;/a&gt;,
the next screenshot shows the top 10 plugins that are taking most of Vim&amp;rsquo;s
startup time for me:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/minimal_vim-profile.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/minimal_vim-profile.png&#34; alt=&#34;Vim plugins profiled&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After profiling Vim&amp;rsquo;s startup time, I replaced
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/tomtom/tcomment_vim&#34;&gt;tcomment_vim&lt;/a&gt; with
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/tpope/vim-commentary&#34;&gt;vim-commentary&lt;/a&gt; and
it actually made a noticeable difference on the startup time of Vim.&lt;/p&gt;
&lt;p&gt;By the way, Vim actually can profile its startup time and dump it to a file
with &lt;code&gt;vim --startuptime vim.log&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;
&lt;p&gt;Functions are also an integral part of any .vimrc file to complement the work
of plugins. However, functions like any other pіece of code, can slow you down
sometimes. Currently, I only have two functions in my Vim configuration file.
One function for creating and moving between split windows and another function
for &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/junegunn/goyo.vim&#34;&gt;Goyo&lt;/a&gt;&amp;rsquo;s leave
event.&lt;/p&gt;
&lt;p&gt;You can profile your functions and check which part of each function that may
slow Vim down while executing it. As I mentioned above, I only have a few
functions in my ~/.vimrc file. So, I profiled them and got the result using
Vim&amp;rsquo;s profile command. Here&amp;rsquo;s an example on how to profile the function
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/aonemd/aaku-dev/blob/master/vim/vimrc#L143&#34;&gt;&lt;em&gt;WinMove(key)&lt;/em&gt;&lt;/a&gt;
using Vim&amp;rsquo;s profile command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;vim&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;profile start vimrc.profile&amp;#39;&lt;/span&gt; \&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;profile! file ~/.vimrc&amp;#39;&lt;/span&gt; \&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;call WinMove(&amp;#39;j&amp;#39;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s an excerpt of the profiling result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;FUNCTION&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;WinMove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;Defined&lt;/span&gt;: &lt;span class=&#34;p&#34;&gt;~&lt;/span&gt;/.&lt;span class=&#34;nx&#34;&gt;vimrc&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;181&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Called&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Total&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;:   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;000384&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Self&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;:   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.&lt;span class=&#34;m&#34;&gt;000081&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;status-line&#34;&gt;Status Line&lt;/h3&gt;
&lt;p&gt;IMHO, the Vim community has invested a lot of time and effort to make colorful
status lines with lots of weird symbols and many functionalities. Don&amp;rsquo;t get me
wrong, I love the aesthetics of a beautiful, colorful status line; however, I
kind of feel like it can be a bit distracting while writing. What I really
think is that the status line should not get in the way of the developer; it
should be a complementary tool not an essential one.&lt;/p&gt;
&lt;p&gt;For me, I&amp;rsquo;ve updated my status line to have only a few functions that I really
need while writing. It even differs from the stock status line that comes with
Vim. Here&amp;rsquo;s how I currently configure my status line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;you need this to always display the status line&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;laststatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;modifiedflag, charcount, filepercent, filepath&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;statusline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;%&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;%&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;\ %&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;\ %&lt;span class=&#34;nx&#34;&gt;P&lt;/span&gt;\ %&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how it looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/minimal_vim-statusline.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/minimal_vim-statusline.png&#34; alt=&#34;Minimal statuline&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;file-explorer&#34;&gt;File Explorer&lt;/h3&gt;
&lt;p&gt;I see a lot of Vim users put the plugin
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/scrooloose/nerdtree&#34;&gt;&lt;em&gt;NERDTree&lt;/em&gt;&lt;/a&gt; in their
Vim configuration and many online tutorials and articles advice to install it.
In fact, when I was starting with Vim, I used to have it in my .vimrc as well.
However, after a while, I found out that Vim actually comes with a file
explorer called &lt;em&gt;netrw&lt;/em&gt; out of the box.&lt;/p&gt;
&lt;p&gt;To open netrw on the side (a vertical split) like NERDTree, you can run the
command &lt;code&gt;:Vexplore&lt;/code&gt;, or &lt;code&gt;:Sexplore&lt;/code&gt; to open it in a horizontal split window. As
with using Vim in general, the more you use it, the more you realize that you
know nothing about it. As of writing this post, I&amp;rsquo;ve learned more features that
I didn&amp;rsquo;t know existed in netrw. You can always learn about the commands and key
maps of netrw using &lt;code&gt;:h netrw&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/minimal_vim-netrw.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/minimal_vim-netrw.png&#34; alt=&#34;netrw preview&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just like NERDTree, You can manipulate files and directories (browse, execute,
rename, delete, &amp;hellip;) from inside netrw.  Moreover, you can configure it to
behave exactly like NERDTree. Here are the relevant settings in my .vimrc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-viml&#34; data-lang=&#34;viml&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;netrw_banner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;netrw_winsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;netrw_liststyle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;netrw_localrmdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;rm -r&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;toggle netrw on the left side of the editor&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Lexplore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My .vimrc file is now exactly 149 lines after I removed unused plugins and
redundant settings. You can find my full .vimrc file in my
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/aonemd/aaku-dev&#34;&gt;dotfiles repository on GitHub&lt;/a&gt;.
Thanks for reading!&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Finding Things in Vim</title>
        <link>https://aonemd.me/posts/finding-things-in-vim/</link>
        <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/finding-things-in-vim/</guid>
        <description>&lt;p&gt;Vim is a very competent text editor and although it comes with tools to find
files, these tools feel a little primitive for modern text editing and a bit
slow sometimes. In this post, I will go over different search tools and
demonstrate how I replaced two different plugins with only a single plugin that
rules them all.&lt;/p&gt;
&lt;h3 id=&#34;finding-files-by-content&#34;&gt;Finding Files by Content&lt;/h3&gt;
&lt;p&gt;To search files, Vim has a &lt;code&gt;:vimgrep&lt;/code&gt; command that finds files that contain a
certain pattern. It populates a quickfix list with all the matches. You can
cycle between the matches using &lt;code&gt;:cnext&lt;/code&gt; and &lt;code&gt;:cprev&lt;/code&gt;, or open the quickfix
list in a split window using &lt;code&gt;:copen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how you can find files and have the search result open in a quickfix
list so you can scroll up and down the result using the keyboard:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vimgrep&lt;/span&gt; {&lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;} {&lt;span class=&#34;nx&#34;&gt;files&lt;/span&gt;} &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;copen&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vim also has a &lt;code&gt;:grep&lt;/code&gt; command that works similarly to &lt;code&gt;:vimgrep&lt;/code&gt; but,
according to the documentation (try &lt;code&gt;:h grep&lt;/code&gt;), it relies on the external
&lt;code&gt;grep&lt;/code&gt; command on your system. &lt;code&gt;:vimgrep&lt;/code&gt; loads the files in memory so it might
be slower than &lt;code&gt;:grep&lt;/code&gt;. Just like &lt;code&gt;:vimgrep&lt;/code&gt;, &lt;code&gt;:grep&lt;/code&gt; will populate a quickfix
list and will not open a quickfix list with the results by default. Here&amp;rsquo;s how
to use it in the command mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;grep&lt;/span&gt; {&lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;} {&lt;span class=&#34;nx&#34;&gt;files&lt;/span&gt;}&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more convenience, and much faster search, I have been using a tool as a
replacement for grep called &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;&lt;em&gt;Ag&lt;/em&gt;, the silver searcher&lt;/a&gt; and a
Vim interface for it through
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/rking/ag.vim&#34;&gt;&lt;em&gt;ag.vim&lt;/em&gt;&lt;/a&gt; (which has been
unmaintained for a while now). &lt;em&gt;ag.vim&lt;/em&gt; opens the results in a quickfix list by
default and you can navigate and choose which file to open using the keyboard
just like with &lt;code&gt;:vimgrep&lt;/code&gt;. &lt;em&gt;ag.vim&lt;/em&gt;, however, adds some &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/rking/ag.vim#keyboard-shortcuts&#34;&gt;nice key maps&lt;/a&gt; for
better navigation of the results. This is my configuration for &lt;em&gt;ag.vim&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search from the project root instead of cwd&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;ag_working_path_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;start a search query by pressing \&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; \  :&lt;span class=&#34;nx&#34;&gt;Ag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search for word under cursor by pressing |&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; \&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Ag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\b&amp;lt;C-R&amp;gt;&amp;lt;C-W&amp;gt;\b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s worth noting that it&amp;rsquo;s possible to make &lt;code&gt;:grep&lt;/code&gt; use &lt;em&gt;Ag&lt;/em&gt; by default instead
of relying on the default &lt;em&gt;grep&lt;/em&gt; program, and thus, having much faster search
results while keeping the same interface/command that Vim provides out of the
box:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ag&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;grepprg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ag&lt;/span&gt;\ &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nogroup&lt;/span&gt;\ &lt;span class=&#34;p&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nocolor&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;call :grep normally&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;finding-files-by-name&#34;&gt;Finding Files by Name&lt;/h3&gt;
&lt;p&gt;For finding files by searching for their names, I&amp;rsquo;ve been using a great plugin
called &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ctrlpvim/ctrlp.vim&#34;&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt;&lt;/a&gt;.
It is a fuzzy file searcher written in pure vim. You only need to type
some parts of the name of the file you&amp;rsquo;re searching for, and you&amp;rsquo;ll get back a
list of the best matches. It can search files by file name, by current open
buffers, by generated tags, or by line content. My setup for &lt;em&gt;ctrlp.vim&lt;/em&gt; looks
like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;executable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ag&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;ctrlp_user_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ag %s -l --nocolor --hidden -g &amp;#34;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;ctrlp_use_caching&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;clear ctrlp.vim key maps&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;ctrlp_map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;CtrlP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files by lines of code&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;CtrlPLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files by tags (requirs ctags to be installed)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;CtrlPTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search all open files/buffers&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;CtrlPBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt; has served me very well for the past couple of years. However, it
can get really slow while indexing files under large directories. For example,
searching files in my home directory, &lt;code&gt;~/&lt;/code&gt;, renders &lt;em&gt;ctrlp.vim&lt;/em&gt; almost useless
as it takes some time to index each file.&lt;/p&gt;
&lt;h3 id=&#34;enter-fzf&#34;&gt;Enter fzf&lt;/h3&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;em&gt;fzf&lt;/em&gt;&lt;/a&gt; is a very fast
command-line fuzzy finder written in Go. Despite its increasing popularity, I
have tried to avoid using it for as long as possible since I like keeping my
dependencies minimal and prefer to use pure vim plugins to having to
install any external dependencies. However, I had to install it since it&amp;rsquo;s a
dependency for this really cool command-line file manager,
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/mananapr/cfiles&#34;&gt;&lt;em&gt;cfiles&lt;/em&gt;&lt;/a&gt;. So I decided I&amp;rsquo;d
give it a try anyway. I was mind blown!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://aonemd.me/images/finding_files_in_vim-commit.png&#34; alt=&#34;aaku git commit&#34;&gt;&lt;/p&gt;
&lt;p&gt;Not only can you fuzzy search for your files in the terminal, &lt;em&gt;fzf&lt;/em&gt; also has a
counterpart Vim plugin called
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;&lt;em&gt;fzf.vim&lt;/em&gt;&lt;/a&gt; which is a
complementary interface to &lt;em&gt;fzf&lt;/em&gt; in Vim with so many awesome features.  One of
the great features it provides is that it comes with an interface for popular
search tools such as Ag and
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;em&gt;ripgrep&lt;/em&gt;&lt;/a&gt; and you can
fuzzy search the search results! So now I could remove the &lt;em&gt;ag.vim&lt;/em&gt; plugin and
replace &lt;em&gt;ctrlp.vim&lt;/em&gt; with only &lt;em&gt;fzf&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my current setup for finding files in Vim:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;FZF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files by lines of code&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search project files by tags (requirs ctags to be installed)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search all open files/buffers&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;leader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;start a search query by pressing \&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; \  :&lt;span class=&#34;nx&#34;&gt;Ag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;space&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&amp;#34;search for word under cursor by pressing |&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nnoremap&lt;/span&gt; \&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; :&lt;span class=&#34;nx&#34;&gt;Ag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;nx&#34;&gt;cw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You need to setup fzf&amp;rsquo;s default find command by setting an env variable in your
shell config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ag -l --nogroup  --nocolor --hidden -g &amp;#34;&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The four key maps above are all on one row in the keyboard so it&amp;rsquo;s much easier
to reach out to each of them. Besides, I set my leader to the space bar, so
it&amp;rsquo;s even better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;fzf.vim&lt;/em&gt; also provides more useful commands such as &lt;code&gt;:GFiles?&lt;/code&gt; and &lt;code&gt;:Commits&lt;/code&gt;
for Git users. You can learn more about its commands
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/junegunn/fzf.vim#commands&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find my vimrc in my &lt;a href=&#34;https://aonemd.me/blog/the-dotfiles&#34;&gt;dotfiles&lt;/a&gt; repository
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/aonemd/aaku-dev&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Extracting Text From Images Using Ruby</title>
        <link>https://aonemd.me/posts/extracting-text-from-images-using-ruby/</link>
        <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/extracting-text-from-images-using-ruby/</guid>
        <description>&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; &lt;a href=&#34;#the-script&#34;&gt;show me the code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a great hoarder of memes. Seriously, I have a huge folder full of memes and
GIFs. I collect my memes usually whenever I&amp;rsquo;m watching a movie or a series by
taking a screenshot of the scene with subtitles enabled. The issue is, the
program I use to take screenshots, names each new file by the date and time the
screenshot was taken. I have a 1200 screenshot folder each named by date and
time. So finding a certain screenshot/meme is too much a hassle.&lt;/p&gt;
&lt;p&gt;I thus wanted a better way to go through my collection of memes. My goal was to
rename each screenshot file to the subtitles it contains. I have, in fact, been
procrastinating this task for a long time now and the mid-year recess was the
perfect time to start a small project.&lt;/p&gt;
&lt;p&gt;To read the subtitles out of my images, Google search led me to
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;Tesseract&lt;/a&gt;.
Tesseract is a tool that recognizes the text in images using Optical Character
Recognition (OCR). I started first experimenting with Tesseract and its
wrapper, &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/madmaze/pytesseract&#34;&gt;pytesseract&lt;/a&gt;
in Python and used OpenCV for image processing and it worked perfectly right
from the start!&lt;/p&gt;
&lt;p&gt;I started with a small Ruby script to read my images, process, and recognize
the text in each one of them. However, unfortunately, Ruby lacks in good
tooling for computer vision or image processing. I couldn&amp;rsquo;t find a good OpenCV
wrapper in Ruby except for
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ruby-opencv/ruby-opencv&#34;&gt;ruby-opencv&lt;/a&gt;
which is quite outdated and only supports OpenCV v2 (&lt;a target=&#34;_blank&#34; href=&#34;https://opencv.org/releases.html&#34;&gt;Version 4 of OpenCV&lt;/a&gt; is now released by
the way).&lt;/p&gt;
&lt;p&gt;After some tinkering with ImageMagick and its Ruby wrapper,
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/minimagick/minimagick&#34;&gt;MiniMagick&lt;/a&gt;, I
could finally achieve the same results I got in Python. So, in the few next
sections, I&amp;rsquo;ll demonstrate the steps the script goes through to recognize the
subtitles in each screenshot.&lt;/p&gt;
&lt;h2 id=&#34;the-script&#34;&gt;The Script&lt;/h2&gt;
&lt;p&gt;Next is a simpler version of the script I actually used. The full script
including the part where I process the output text and rename each file to the
new name is a gist on
&lt;a target=&#34;_blank&#34; href=&#34;https://gist.github.com/aonemd/7bb3c4760d9e47a9ce8e270198cb40a0#file-subtitle_extractor-rb&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first part of the script just loops through each file (a 1920x1080 PNG
image file) in my source directory and reads it as a grayscale image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pathname&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;open3&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mini_magick&amp;#39;&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;SRC_DIR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/path/to/src/dir&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freeze&lt;/span&gt;
&lt;span class=&#34;no&#34;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/path/to/tmp/dir&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;freeze&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;Dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unless&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists?&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;Pathname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;src_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;realpath&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;tmp_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;basename&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;MiniMagick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colorspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Gray&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s take the following screenshot as an example and feed it to the script.
First, we load it normally:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/extracting_text_example.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/extracting_text_example.png&#34; alt=&#34;Example screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;then we convert it to grayscale. This is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/extracting_text_example_grayscale.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/extracting_text_example_grayscale.png&#34; alt=&#34;Example screenshot grayscale&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;cleaning-the-image&#34;&gt;Cleaning The Image&lt;/h3&gt;
&lt;p&gt;The second part is where all the image processing happens. Basically, the
script negates the image to black and white to remove all the noise. This
improves the ability of Tesseract to read the text in the image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;Pathname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;
  &lt;span class=&#34;no&#34;&gt;MiniMagick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Tool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Magick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp_path&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;negate&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;007%&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# I couldn&amp;#39;t prevent myself&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;negate&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;magick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tmp_path&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what image looks like after processing. You can see how almost all the
details in the image are removed except for the vivid subtitles. This file is
stored under the &lt;code&gt;TMP_DIR&lt;/code&gt; we defined earlier in the script. You can of course
delete the &lt;code&gt;TMP_DIR&lt;/code&gt; safely or instrument the script to do it for you.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aonemd.me/images/extracting_text_example_negative.png&#34;&gt;&lt;img src=&#34;https://aonemd.me/images/extracting_text_example_negative.png&#34; alt=&#34;Example screenshot negative&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;recognizing-the-text&#34;&gt;Recognizing The Text&lt;/h3&gt;
&lt;p&gt;In this part, we call Tesseract command on our image and get back our
recognized text. We could have used a Ruby wrapper around Tesseract, and
&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/dannnylo/rtesseract&#34;&gt;rtesseract&lt;/a&gt; is a
great wrapper, however; we only need to call a simple command here so we don&amp;rsquo;t
need all the features the wrapper provides.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;Pathname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;each&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# ...&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;no&#34;&gt;Open3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;capture3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tesseract &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp_path&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; stdout -l eng --oem 0 --psm 3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and this is the final output of our script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Oh, man. In my next life
I&#39;m coming back as a toilet brush.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;h3 id=&#34;speed&#34;&gt;Speed&lt;/h3&gt;
&lt;p&gt;As I mentioned earlier, I first started with a &lt;a target=&#34;_blank&#34; href=&#34;https://gist.github.com/aonemd/a4895dbdbdf9b7a0bc47bcb051aae5b8&#34;&gt;Python script&lt;/a&gt;
to test Tesseract.  I did a small time comparison between the Ruby version and
the Python version after some &lt;a target=&#34;_blank&#34; href=&#34;https://www.reddit.com/r/ruby/comments/afbq1z/extracting_text_from_images_using_ruby/edxnxzh/&#34;&gt;great discussions&lt;/a&gt;
on &lt;a target=&#34;_blank&#34; href=&#34;https://reddit.com/r/ruby&#34;&gt;/r/ruby&lt;/a&gt;. Unfortunately, the
Python version is much faster. I believe that most of the overhead in the Ruby
version comes from using ImageMagick for image processing. Here&amp;rsquo;s the
comparison of running both scripts on a sample of 525 1920x1080 PNG files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby ocr.rb  864.69s user 62.12s system 136% cpu 11:19.01 total
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 ocr.py  277.92s user 31.38s system 141% cpu 3:37.85 total
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://www.reddit.com/r/ruby/comments/afbq1z/extracting_text_from_images_using_ruby/edzdwmu/&#34;&gt;/u/janko-m on Reddit&lt;/a&gt;
pointed me to &lt;a href=&#34;https://github.com/libvips/libvips&#34;&gt;libvips&lt;/a&gt; and I actually
replaced ImageMagick with libvips. The script is also &lt;a target=&#34;_blank&#34; href=&#34;https://gist.github.com/aonemd/7bb3c4760d9e47a9ce8e270198cb40a0#file-subtitle_extractor_optimized-rb&#34;&gt;on GitHub&lt;/a&gt;.
The runtime became 3 times faster than what it used to be and, in fact,
outperformed the Python version. Here&amp;rsquo;s the output of the time command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby ocr.rb  234.74s user 35.64s system 120% cpu 3:45.17 total
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;accuracy&#34;&gt;Accuracy&lt;/h3&gt;
&lt;p&gt;In the end, the text in 93% of my screenshots was recognized almost correctly
(with some gibberish noise in some files).  I filtered out the screenshots that
don&amp;rsquo;t contain any subtitles before running the script. This means that only 7%
of my screenshots were not recognized correctly or were recognized as empty
text.  &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/tesseract-ocr/tesseract/wiki/ImproveQuality&#34;&gt;Tesseract wiki&lt;/a&gt;
provides some tips to improve text recognition accuracy mainly, they are all
about processing the source image before feeding it to Tesseract.&lt;/p&gt;
&lt;h3 id=&#34;different-colors&#34;&gt;Different Colors&lt;/h3&gt;
&lt;p&gt;This issue occurred with screenshots that contained subtitles in colors
other than white. I have for example a screenshot with yellow subtitles that
wasn&amp;rsquo;t recognized by the original script. I had to use a lower threshold while
converting the image to a black-and-white binary image so that the subtitles
wouldn&amp;rsquo;t be filtered out as noise.&lt;/p&gt;
&lt;h3 id=&#34;duplicates&#34;&gt;Duplicates&lt;/h3&gt;
&lt;p&gt;This is not related to Tesseract itself or text recognition per se, but it&amp;rsquo;s
more about the script.  If there are more than one screenshot with the same
subtitles, one image file will overwrite the other. I don&amp;rsquo;t handle this case in
my script as of yet; I want to get rid of duplicates anyway.&lt;/p&gt;
</description>
      </item>
      
      <item>
        <title>Making System Calls From Ruby</title>
        <link>https://aonemd.me/posts/making-system-calls-from-ruby/</link>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>https://aonemd.me/posts/making-system-calls-from-ruby/</guid>
        <description>&lt;p&gt;While I was reading about Linux system calls, I was curious about how to
perform them in Ruby specially that Ruby isn&amp;rsquo;t considered a &amp;ldquo;system&amp;rdquo;
programming language. However, It&amp;rsquo;s very possible to perform system calls using
Ruby. In this post, I&amp;rsquo;m going to demonstrate the different ways to make system
calls using Ruby. But first, let us define what system calls are. Simply put, a
system call is a way to enter the system kernel, execute an operation, and then
return from the kernel.&lt;/p&gt;
&lt;p&gt;In the following sections, I&amp;rsquo;ll demonstrate three [almost] different ways to
perform system calls from Ruby. All the code is tested on a 64-bit GNU/Linux
system. Although there are some notes about differences in other operating
systems, if you tested something on your operating system and want me to add it
here, please add a comment or send me a message.&lt;/p&gt;
&lt;h3 id=&#34;1-kernelsyscall&#34;&gt;1. Kernel.syscall&lt;/h3&gt;
&lt;p&gt;This first, and most straightforward way to perform a system call is by using
&lt;code&gt;Kernel.syscall&lt;/code&gt;. In fact, internally, Kernel.syscall calls the C function
&lt;code&gt;syscall&lt;/code&gt; directly. This is how it&amp;rsquo;s done:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;syscall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;syscall_number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;syscall_arguments&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;syscall_number&lt;/code&gt; is a unique number for each system operation and can be
obtained for 64-bit Linux systems from &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl&#34;&gt;this table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, for example, to perform an exit system call with exit status 1, call the
following Ruby program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;syscall&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and check the exit code in your shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: I&amp;rsquo;m using Ruby 2.6.0 without the &lt;code&gt;--jit&lt;/code&gt; option to run this example.
For Ruby versions prior to 2.6.0 on Linux, you might want to use the
&lt;code&gt;exit_group&lt;/code&gt; system call (with syscall_number 231) instead of &lt;code&gt;exit&lt;/code&gt; to
terminate all the threads the Ruby process is using otherwise, the Ruby
process will freeze waiting to terminate the remaining thread(s).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, there&amp;rsquo;s a caveat here. &lt;a target=&#34;_blank&#34; href=&#34;https://www.rubydoc.info/stdlib/core/Kernel#syscall-instance_method&#34;&gt;The Ruby documentation&lt;/a&gt;
says that &lt;code&gt;Kernel.syscall&lt;/code&gt; isn&amp;rsquo;t safe nor it is portable. If you ran the last
program using the Ruby &lt;code&gt;-v&lt;/code&gt; command line option (for verbose), you&amp;rsquo;ll see the
following message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;warning: We plan to remove a syscall function at future release. DL(Fiddle) provides safer alternative.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ruby/fiddle&#34;&gt;&lt;em&gt;Fiddle&lt;/em&gt;&lt;/a&gt; will be our
next alternative for making system calls in Ruby.&lt;/p&gt;
&lt;h3 id=&#34;2-fiddle&#34;&gt;2. Fiddle&lt;/h3&gt;
&lt;p&gt;Fiddle is a &lt;a target=&#34;_blank&#34; href=&#34;https://sourceware.org/libffi/&#34;&gt;libffi&lt;/a&gt; wrapper
written for Ruby.  Luckily, it is already a part of Ruby&amp;rsquo;s standard library.
&lt;em&gt;libffi&lt;/em&gt; is a &lt;strong&gt;foreign function interface (FFI)&lt;/strong&gt; implementation that provides
a C interface for calling compiled code (functions, really) from your program
at runtime.&lt;/p&gt;
&lt;p&gt;The following program demonstrates how to use Fiddle to call a C function from
Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;fiddle&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;libc&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Fiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dlopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/lib/libc.so.6&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Fiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;syscall&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Fiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                                                 &lt;span class=&#34;no&#34;&gt;Fiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Fiddle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code calls the C function &lt;code&gt;syscall&lt;/code&gt; to perform the exit system call.  In
addition to the name of the function, you have to pass in an array that
contains the types of each argument the syscall/function takes, and another
argument for the function return type, which is an integer number in this case.
For example, the exit syscall function takes two parameters; one for the exit
syscall itself, the number 60, and another for the exit status, which is 1
here.  Thus, we have an array of two integers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the path to &lt;code&gt;libc&lt;/code&gt; specified in the code will differ for other
operating systems. For MacOS for example, it should be set to
&lt;code&gt;/usr/lib/libc.dylib&lt;/code&gt;. Please also note that I didn&amp;rsquo;t test it myself so it
might be a different value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check the exit code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-ffi&#34;&gt;3. FFI&lt;/h3&gt;
&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/ffi/ffi&#34;&gt;&lt;em&gt;Ruby-ffi&lt;/em&gt;&lt;/a&gt; is an FFI
implementation in Ruby.  Other than making system calls, FFI makes it possible
to fully write C extensions without the need to write pure C code. By far, this
is the safest, most convenient method as it automatically locates the path to
the libc library without the need to specify it manually as in the case with
Fiddle above.&lt;/p&gt;
&lt;p&gt;The code that makes a system call looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ffi&amp;#39;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;SyscallRunner&lt;/span&gt;
  &lt;span class=&#34;kp&#34;&gt;extend&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;FFI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Library&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;ffi_lib&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;FFI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Library&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;LIBC&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;attach_function&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:syscall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:int&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;no&#34;&gt;SyscallRunner&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;syscall&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you need to pass in an array that contains the types of each argument
the function takes, and another argument for the function return type.&lt;/p&gt;
&lt;p&gt;And again, check the exit status:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Although Ruby might not be considered a system programming language, Ruby is
capable of going low level and performing system calls in more than one way.
All the methods delegate the system call  to C syscall function in a way or
another.  The most secure, most scalable method is using Ruby-ffi to invoke C
syscall function.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
