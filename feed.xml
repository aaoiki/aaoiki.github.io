<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aonemd</title>
    <description>Code and Language
</description>
    <link>https://aonemd.github.io/</link>
    <atom:link href="https://aonemd.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 May 2018 13:30:17 +0200</pubDate>
    <lastBuildDate>Tue, 15 May 2018 13:30:17 +0200</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>Introudcing Jack and The Dark Theme</title>
        <description>&lt;p&gt;This website is generated by Jekyll, the static site generator. For compiling
assets (mainly Javascript and stylsheet files), I’ve been using
&lt;a href=&quot;https://github.com/rails/sprockets&quot; target=&quot;\_blank&quot;&gt;Sprockets&lt;/a&gt; through 
&lt;a href=&quot;https://github.com/envygeeks/jekyll-assets/&quot; target=&quot;\_blank&quot;&gt;Jekyll Assets&lt;/a&gt;
gem.  Although recently, and after I had updated the gems in Jekyll’s Gemfile,
a new update for Jekyll asset was pushed. It appears they decided to change
their entire interface. This rendered my whole project unusable and I needed to
change every call to Jekyll Assets interface in order to fix it.&lt;/p&gt;

&lt;p&gt;At this point, I wanted to fix the blog so I can add new posts (fingers
crossed) and I was learning some new technologies in the Javascript world. I’ve
been using Webpack in my Rails apps, Rails 5 in particular. I decided I will
use Webpack in my Jekyll project to compile and build all the frontend assets.
At first, I looked for some existing Jekyll projects that use Webpack but
almost all of them are outdated since the Javascript mantra, it seems, is to
move fast and update even faster.&lt;/p&gt;

&lt;p&gt;I ended up starting a new Jekyll project and set it up with Webpack. In
addition to Babel to transpile ES6 code to ES6, I used PostCSS for the
stylesheets. And this is how Jack came out. Jack is a dark Jekyll theme already
setup with Webpack, of course. It’s so simple in design that it could be used
as a template for new Jekyll projects and tweaked as needed. However simple it
is (and how bad I may be in design), its theme is mobile first and responsive,
and dark!&lt;/p&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_screenshot.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_screenshot.png&quot; alt=&quot;Jack demo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/aonemd/jack&quot;&gt;source code on GitHub&lt;/a&gt;.
You can also see a demo &lt;a href=&quot;https://aonemd.github.io/jack/&quot;&gt;through this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I finished setting up Jack, I migrated all the new changes to my original
blog. The migration was seamless with only a few small issues. Out of love for
dark screens and because I always wanted to have a dark website, I also
migrated the dark theme and made it toggleable. You can toggle the dark theme
on and off using the button in the top navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot; alt=&quot;Dark theme toggle button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is how it looks when it’s toggled on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot; alt=&quot;Dark theme toggle btn on&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/introudcing-jack-and-dark-theme</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/introudcing-jack-and-dark-theme</guid>
        
        <category>blog,</category>
        
        <category>jekyll,</category>
        
        <category>dark_theme</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>التدريب في مصر</title>
        <description>&lt;p&gt;إذا كنت أحد طلاب كليات الحاسبات في مصر ، فأنت - على الأغلب - على علم بحال الشركات
المصرية اللي تقدم تدريباً - غالباً ما يكون في الإجازة الصيفية - لطلاب تلك الكليات.&lt;/p&gt;

&lt;p&gt;تُلزم كليات الحاسبات الطلاب قضاء مدة ثلاثة أشهر في إحدى الشركات قبل التخرج.  ومن
ذلك تقوم شركات البرمجيات المصرية بعملية أشبه بالمتاجرة بالطلاب. يتقدم الطالب
لشركةٍ ما كمتدرب، ليتفاجئ أنه وباقي الموظفين في الشركة متدربون ولا يوجد موظفون
أكثر خبرة اللهم إلا القليل. ربما يرجع ذلك لنقص ذوي الخبرة من المبرمجين، لكن ذلك
لا يعطي الحق لتلك الشركات لنهب الطلاب الراغبين في التدريب. مفهوم التدريب في
الشركات المصرية يختلف عن مفهومها لدى باقي شركات العالم؛ المتدرب كأي موظف آخر في
الشركة، عليه نفس المسئوليات لكنه بلا أية حقوق. إذا بحثت في reddit عن “unpaid cs
internship” فستجد من أغلب الردود أن الفكرة مستهجنة وغريبة على مجال هندسة
البرمجيات. قد يكون مجال البرمجيات أحسن حالاً من المجالات الأخرى، فقد أخبرني صديق
مرة أن بعض الشركات (في مجال هندسي آخر) تتقاضى مبلغاً من المال مقابل تدريب الطلاب
لديهم.&lt;/p&gt;

&lt;p&gt;دعنا من الماديات. فكرة أن يقوم فريق من المتدربين بالعمل على مشروع برمجي لعميل
ما دون إشراف مبرمجين أكثر خبرة كارثية. بالإضافة إلى ذلك، حجم المشاكل والأخطاء
(technical debt) في تلك المشاريع ضخم تصعب معه صيانة المشروع أو التعديل فيه وقد
ينتهي الأمر إلى كتابة المشروع من جديد. تكلفة كتابة المشروع من جديد تتعدى تكلفة
تكوين فريق مناسب من المبرمجين منذ البداية (إلا إذا كونت فريقاً من المتدربين الذين
يعملون بلا مقابل بالطبع).  هناك ما يعرف بـ senior to junior ratio أو نسبة
المبرمجين ذوي الخبرة إلى المبرمجين المبتدئين في فريق العمل. يجب أن تتحقق نسبة
ملائمة من المبرمجين ذوي الخبرة في أي فريق برمجي، فلا يمكن أن يكون الفريق كله من
المبتدئين وتتوقع أن المشروع سيخرج بجودة عالية. بالطبع هذه النسبة تختلف حسب
طبيعة المشروع والشركة نفسها، المشكلة هي أن تقوم بتوظيف متدربين للعمل على مشروع
ما دون إشراف مباشر.&lt;/p&gt;

&lt;p&gt;في النهاية، المقال لا يقصد شركة أو جهة بعينها، لكن الهدف منه وصف الحالة العامة
المنتشرة في سوق البرمجيات المصري.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/interning-in-egypt</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/interning-in-egypt</guid>
        
        <category>CS,</category>
        
        <category>Work,</category>
        
        <category>Interships</category>
        
        
        <category>Work</category>
        
      </item>
    
      <item>
        <title>Go for Competitive Programming</title>
        <description>&lt;p&gt;I first started writing Go during my time at UserTalk and have been using it
occasionaly since then because of its minimal syntax and standard library that
makes it a great language for writing almost any kind of software.&lt;/p&gt;

&lt;p&gt;Whenever I’m solving a competitive programming problem, I usually use C or C++
(whichever works best) to write the solution mainly because they are both
supported by almost all online judges and programming contests.&lt;/p&gt;

&lt;p&gt;Moreover, I was recently solving a problem on HackerRank and decided to write
the solution in C. The problem was quite easy but my solution always resulted
in a Segmentation Fault. Here’s a
&lt;a href=&quot;https://www.hackerrank.com/challenges/dynamic-array&quot;&gt;link&lt;/a&gt; to the problem if
you’re asking.
Luckily, I found out that I could submit the solution in Go, besides other
languages. So after +30 failed submissions (and out of frustration), I decided
to translate the C code to Go and boom, it passed all the test cases
flawlessly.  Go being garbage collected here, unlike C, makes it really easy to
focus on the solution and leave the task of memory management to the compiler.
Also, by having a strong standard library, the number of lines in the Go solution
is about half the number of lines in the C code.  Here’s a screenshot comparing
the two:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/go_for_cp-go_vs_c.png&quot; alt=&quot;Go vs. C screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go is minimal, concise, has a huge standard library, performs fast, backed by a
company like Google, has a growing community, and many online judges already
support it on their platforms and even though writing Go might require some
mind shift, a programmer can easily adjust themselves to that. These all the
reasons why I think it’s time for the ACM organization to consider Go as an
official language in the coming ICPC contests.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/go-for-cp</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/go-for-cp</guid>
        
        <category>Go,</category>
        
        <category>CP</category>
        
        
        <category>CP</category>
        
      </item>
    
      <item>
        <title>I Took Some Time to Create a Time Tracker</title>
        <description>&lt;p&gt;Im my quest of finding the ultimate productivity framework, I came across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot; target=&quot;blank&quot;&gt;Pomodoro technique&lt;/a&gt;.
The basic idea behind it is to divide the work into equal chunks of time and
take a small break after each set. Usually it goes by working for 25 minutes in
complete concentration, taking a 5 minutes break and repeating the cycle until
the the task is completed.&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;It was the beginning of January this year when I decided to use the Pomodoro
technique to help me study for my finals. However, I could not find a web app
with a simple interface to use and thought it would be a good practice to build
it. I remeber it was right before the start of my odd semester final exams when
I started the project. As you know, finals is the time in which you can achieve
all what you wanted since the beginning of the semester, except studying of
course. Having built the app, it actually came of a great help. In fact I’m
using it right now as I’m writing this post (took me 5 sets to finish it).&lt;/p&gt;

&lt;p&gt;I kept in mind to keep the interface as simple as possible. The home page is
where you can start/stop the timer. There’s also a tracker page where you can
keep track of your sets.
I named it &lt;a href=&quot;http://panadoura.herokuapp.com/&quot; target=&quot;blank&quot;&gt;Panadoura&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/cherrytomato_screenshot.png&quot; alt=&quot;CherryTomato home&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;It started out with simple CoffeeScript file that runs and stops the timer and
served it in a Sinatra app. Then added some more stuff along the way. Besides
being a simple web app, the reason why I started with Sinatra was that I wanted
to get out from under Rails umbrella and try some other alternatives for the
web in Ruby. Of course, this comes with a lot of tradeoffs. Rails embraces the
convention over configuration philosophy which makes it super easy to setup new
applications and get to the work quickly. To try something different, I had to
have some kind of a shift in mind. I also needed to write some bootstrapping
scripts in order to glue the different components of my app together.&lt;/p&gt;

&lt;p&gt;The architecture is a bit different from the normal MVC Rails-y way. It
resembles the structure of a normal Ruby gem where the main logic in the app
lives under &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; directory whereas the application routes and views are in
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The application layer consists of a single file that defines all the routes to
the web app. It contains the logic that authorizes the users from Twitter and
routes them to the home page. It calls two helper classes; one to load the
assets, and another to configure user sessions.&lt;/p&gt;

&lt;p&gt;For the persistence layer, I used &lt;a href=&quot;http://rom-rb.org/&quot; target=&quot;blank&quot;&gt;rom-rb&lt;/a&gt;
which philosophy is to decouple different responsibilities and distribute them
over many components/layers. I had to write a wrapper to load the database
settings and connect ROM to PostgreSQL. I also wrote a simple method to run the
migrations.&lt;/p&gt;

&lt;p&gt;Currently, I’m using Heroku experimental tier to host the app. The source code
is on
&lt;a href=&quot;https://github.com/aonemd/panadoura&quot; target=&quot;blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/panadoura</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/panadoura</guid>
        
        <category>time,</category>
        
        <category>management,</category>
        
        <category>pomodoro_technique</category>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>The One Year Old Bug</title>
        <description>&lt;p&gt;I’ve been revisiting my old repositories on GitHub recently to make sure they
are still relevant and to clean up the code. One of the projects I looked into
was &lt;a href=&quot;https://github.com/aonemd/margopher/&quot;&gt;margopher&lt;/a&gt; which I started back in
August 2015. I only removed some unused code, and updated the README page after
which I decided to follow the usage instructions just to make sure everything
was okay. This was when I found out that when I created and used a margopher
object one time, I could not use it any more. This because it kept a map of
states of its input at the object/struct initialization phase but never
reinitialized the map to reuse it. The solution was to move the initialization
of the map into the generation phase. This will make a new map everytime the
generation method is called.&lt;/p&gt;

&lt;p&gt;Although how trivial the solution is, and how simple finding the bug seems, I
ofen catch myself falling into the same trap, that is, I tend to overlook some
very minute details or rather edge cases that affect the bigger context. This
occurs specially in larger business projects where there usually are a lot of
edge cases that must be taken care of. These edge-case bugs may or may not be
found. An edge-case bug can go unseen for sometime until one of the QA team
finds about it or, worst case, a client will.&lt;/p&gt;

&lt;p&gt;One might think that writing a thorough test suite will, by default, detect
edge cases and hidden bugs. Well, this is partially true. Writing a complete
test suite that covers all your system needs fully documented features.
Requirements should be gathered before starting the implementation phase. This
might seem obvious, however, sometimes this isn’t the case. A client might come
with unclear requirements and the picture can only get clearer after some
prototyping or after the actual implementation. It’s true that with almost
always changing requirements in the business world, it can be quite difficult
to update and keep track of the requirements while actually implementing them
in code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t assume it,  prove it
&lt;cite&gt;The pragmatic programmer&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In essence, even if it is the job of the QA team to discover difficult-to-find
bugs, our responsibility as developers is to be fully aware about the
boundaries of the module we are working on.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/the-one-year-bug</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/the-one-year-bug</guid>
        
        <category>software_engineering,</category>
        
        <category>bugs</category>
        
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>The Dotfiles</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://threevirtues.com/&quot; target=&quot;blank&quot;&gt;One of the three great virtues of a programmer is laziness&lt;/a&gt;
and it’s actually culturally acceptable that programmers are lazy by nature
(not judging). Programmers write software to replace mundane and repetitive
tasks and let their computers work for them instead, and that’s why, programmers have ever
since created so many frameworks [aframeworkeveryday.js], libraries,
and even &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot; target=&quot;blank&quot;&gt;practices&lt;/a&gt;
only to avoid repeating work (or doing it altogether).&lt;/p&gt;

&lt;p&gt;And &lt;a href=&quot;https://vimeo.com/158129287&quot; target=&quot;blank&quot;&gt;in this realm of eternal laziness&lt;/a&gt;,
programmers make backups of their system settings and coding environment, and
write scripts to bootstrap and link their configuration files so they can
easily setup and share them on other machines. These packages are known among
programmers as dotfiles!&lt;/p&gt;

&lt;h3 id=&quot;what-are-they&quot;&gt;What are they?&lt;/h3&gt;
&lt;p&gt;First of all, what is a dotfile you may ask? A dotfile, in Unix-like systems,
is a file that starts with a dot/period and hence the name. They resemble
hidden files in Windows systems. If you are coming from a Unix-like system, you
will find some dotfiles in your home directory by performing an &lt;code class=&quot;highlighter-rouge&quot;&gt;$ ls -a ~&lt;/code&gt; in
a terminal. These are mostly configuration files. You can view them in Gnome
file manager (might have a different keymap for other file managers) by
pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+H&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;up-to-the-point&quot;&gt;Up to the Point&lt;/h3&gt;
&lt;p&gt;I’ve had &lt;a href=&quot;https://github.com/aonemd/aaku&quot; target=&quot;blank&quot;&gt;my dotfiles&lt;/a&gt; for
quite some time. Every once in a while, I refactor them, change them
consistently to suit my uses, or sometimes, I completely change the way they
are bootstrapped.&lt;/p&gt;

&lt;p&gt;More recently, I noticed that my shell was pretty slow on startup. I was using
&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;blank&quot;&gt;Oh-My-Zsh&lt;/a&gt; back
then and it was great but, as I mentioned, slow. I wanted to give
&lt;a href=&quot;https://github.com/sorin-ionescu/prezto&quot; target=&quot;blank&quot;&gt;Prezto&lt;/a&gt; a try around
that time. And I did! Prezto was more convenient for me, a little smaller than
Oh-My-Zsh, and a little faster but still, it shipped with a lot of plugins and
configurations that I never used (or never knew about as far as I’m concerned).
Eventually, I ended up writing my ZSH configuration from scratch.&lt;/p&gt;

&lt;p&gt;There’s a kind of a division here between whether you should
&lt;a href=&quot;https://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/&quot; target=&quot;blank&quot;&gt;fork someone else’s dotfiles and build up from there&lt;/a&gt;
or start from scratch. In the end, it’s all about personal taste and needs.&lt;/p&gt;

&lt;h3 id=&quot;good-tools-do-not-make-a-good-carpenter&quot;&gt;Good Tools Do Not Make a Good Carpenter&lt;/h3&gt;
&lt;p&gt;I have spent (and still spend) a lot of time changing and tweaking my
environment to my taste and it may look like an obsessions (it probably is),
let’s not forget one important thing here: using these tools to practice and
write software is actually more important than the tools themselves.  Although
I take a great pride in my configurations and tools, I believe it is a slippery
slope to let a subtask take over your time and replace the actual work.&lt;/p&gt;

&lt;blockquote lang=&quot;ar&quot;&gt;
  &lt;p&gt;
    كَيْفَ يَطلُبُ العِلْمَ مَن لَهُ حِمَار؟
  &lt;/p&gt;
  &lt;cite&gt;الشافعي&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s a story told about
&lt;a href=&quot;https://en.wikipedia.org/wiki/Al-Shafi%E2%80%98i&quot; target=&quot;blank&quot;&gt;Al-Shafi‘i&lt;/a&gt;,
a Muslim scholar, jurist, and poet who lived in the 8th century, that he had to
take long walks in order to get to his lectures and classes. He said: “How could
I pay attention to my classes if I didn’t have a donkey?!” and bought himself a
donkey. The story goes that after sometime, Al-Shafi‘i became very occupied
taking care of his donkey cleaning and feeding it that he said: “How could I
pay attention to my classes if I had a donkey?!”.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Apr 2016 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/the-dotfiles</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/the-dotfiles</guid>
        
        <category>dotfiles,</category>
        
        <category>programmer_tools</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>And a Whale Said Let There Be Docker</title>
        <description>&lt;p&gt;Every time I had to work on a new machine or I wanted to try a new technology,
I used to install a lot of packages and libraries to prepare my development
environment. I always struggled to manage dependencies and different versions of
packages. That mostly worked for me but I had to go over this hustle everytime.
Besides, after some time the machine I was working on used to get a bit slower.&lt;/p&gt;

&lt;h3 id=&quot;and-then-there-was-docker&quot;&gt;And then there was Docker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/docker_cover.png&quot; alt=&quot;Docker cover&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have been recently hearing about virtualization, Linux Containers, Docker, Vagrant, etc.,
but Docker became sort of the hype these days.
I wanted to give it a try anyway specially after
&lt;a href=&quot;https://twitter.com/cousine&quot;&gt;@cousine&lt;/a&gt; had recommended using Docker for me.&lt;/p&gt;

&lt;p&gt;So I started this weekend by installing a new version of &lt;a href=&quot;https://elementary.io/&quot;&gt;Elementary
OS&lt;/a&gt; and &lt;a href=&quot;docker.io&quot;&gt;Docker&lt;/a&gt;, and set up my
&lt;a href=&quot;/blog/the-dotfiles&quot;&gt;dotfiles&lt;/a&gt; on my main development
laptop.&lt;/p&gt;

&lt;p&gt;You can install and use any of the available packages on your machine using
Docker images from database servers to frameworks or tools like Nodejs or
Jekyll. It’s also possible to create your own dockerized images.  I installed
different kinds of images for my local development&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/docker_images_screenshot.png&quot; alt=&quot;Docker images&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As Docker is often used for deployment and packaging dependencies, it could
also be used for local development.  This is about satisfying the perfectionist
in me.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to generate this blog.
Before Docker, I had to install a Ruby version manager such as rbenv, Ruby, RubyGems, and Jekyll
just to start blogging. But now all I do is just this:&lt;/p&gt;

&lt;h4 id=&quot;1-install-docker&quot;&gt;1. Install Docker&lt;/h4&gt;

&lt;p&gt;It’s in the &lt;a href=&quot;https://docs.docker.com/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;2-pull-download-a-jekyll-image-from-dockerhub&quot;&gt;2. Pull (Download) a Jekyll image from &lt;a href=&quot;https://hub.docker.com/&quot;&gt;DockerHub&lt;/a&gt;:&lt;/h4&gt;

&lt;p&gt;I use &lt;a href=&quot;https://hub.docker.com/r/grahamc/jekyll/&quot;&gt;this image&lt;/a&gt;. It does the job very well&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grahamc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;3-create-a-new-blog&quot;&gt;3. Create a new blog:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$PWD:/src&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grahamc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_blog&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You may need to change your folder permissions if you didn’t add your user
  account to docker group&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_blog&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;4-start-the-app&quot;&gt;4. Start the app:&lt;/h4&gt;

&lt;p&gt;Open a terminal in your blog directory and run Jekyll server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$PWD:/src&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grahamc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;H&lt;/span&gt;
  &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now if you open &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0:4000&lt;/code&gt; in a browser, you’ll find your blog
  working just fine.&lt;/p&gt;

&lt;h3 id=&quot;more-practical-example&quot;&gt;More Practical Example&lt;/h3&gt;
&lt;p&gt;I had a PHP web project for first time so I searched for PHP and Apache Docker
images and luckily I found a Docker file that installs all the necessary
packages and dependencies. I cannot exactly remember where I got it from
besides I changed some lines in the original (anyway, here’s another one that
&lt;a href=&quot;https://github.com/dockerimages/docker-xampp&quot; target=&quot;_blank&quot;&gt;installs XAMPP&lt;/a&gt;).
I combined it with
&lt;a href=&quot;https://docs.docker.com/compose/&quot; target=&quot;_blank&quot;&gt;docker-compose&lt;/a&gt; to link
the app to MySQL databse image. I run the app with a very simple command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and everything is working fine&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/docker_bshop_screenshot.png&quot; alt=&quot;Bshop 1&quot; /&gt;
&lt;img src=&quot;/public/images/docker_bshop_screenshot1.png&quot; alt=&quot;Bshop 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the full project along with Docker and docker-compose files
&lt;a href=&quot;https://bitbucket.org/aonemd/bshop&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/and-a-whale-said-let-there-be-docker</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/and-a-whale-said-let-there-be-docker</guid>
        
        <category>docker,</category>
        
        <category>linux,</category>
        
        <category>containers</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>Inserting Bulk Data into Postgres Using Ruby</title>
        <description>&lt;p&gt;I had this task where it was required to generate a lot of data into a
postgreSQL database and perform some queries on the generated data. So this is
going to be some kind of a crash course on Ruby and postgreSQL (and some
optimization).&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;The database contained only two tables. The first one was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;cup_matches(mid, round, year, num_ratings, rating)&lt;/li&gt;
    &lt;li&gt;mid is the primary key for matches&lt;/li&gt;
    &lt;li&gt;round is the cup round/level (e.g. 32nd, 16th, quarter_final,SemiFinal, Final)&lt;/li&gt;
    &lt;li&gt;year is the year of the cup.&lt;/li&gt;
    &lt;li&gt;num_ratings is how many people viewed and rated that match&lt;/li&gt;
    &lt;li&gt;rating is the average rating of all viewers&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;the second one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;played_in(mid, name, year, position)
this is a table that stores which player played where:&lt;/li&gt;
    &lt;li&gt;mid is the match id (from cup_matches table)&lt;/li&gt;
    &lt;li&gt;name is the player name&lt;/li&gt;
    &lt;li&gt;mid+name is the primary key&lt;/li&gt;
    &lt;li&gt;year is the year of the match&lt;/li&gt;
    &lt;li&gt;position is the position number of the player in the match (e.g. 1 for goal keeper, etc…)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the actual task:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Write a script that populates the database with 2,680 matches and 58,960 players&lt;/li&gt;
    &lt;li&gt;You must insert players with name that contain the word “pele” 118 times&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;I created a Ruby script and used &lt;code class=&quot;highlighter-rouge&quot;&gt;pg&lt;/code&gt; gem to connect to the database:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pg'&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;dbname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mydb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;ss&quot;&gt;user: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'testuser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Now I create the two tables:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# create the first table (cup_matches)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CREATE TABLE cup_matches (
              mid serial PRIMARY KEY,
              round varchar(20),
              year integer,
              num_ratings integer,
              rating real);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# create the second table (played_in)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;create table played_in(
            mid integer references cup_matches(mid),
            name varchar(80),
            year integer,
            position integer,
            PRIMARY KEY(mid,name));&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;generating-data&quot;&gt;Generating Data&lt;/h3&gt;
&lt;p&gt;Here I generate data into the first table. This is pretty straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# generate data for cup_matches&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;round_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'32th'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'16th'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'8th'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'quarter_final'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s1&quot;&gt;'semi_final'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'final'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;round_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_ratings_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rating_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# insert this row&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ins&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO cup_matches(round, year, num_ratings, rating)
                  VALUES ($1, $2, $3, $4)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_prepared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ins&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;num_ratings_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rating_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Up until this point everything works fine but when I wanted to insert
data into the second table, things started to get really slow.
My original script contained this part:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# generate data for played_in&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# array of random names&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;name_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Shinichi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nitrogen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Itachi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kurosan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Tamashii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ben'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Owen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ror'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yama'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kaminari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Kintama'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sasuke'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ali'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Leila'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Xou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Xubuntu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Gnomy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Lolly'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Gintoki'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kogami'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kurotora'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Matz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Yuki'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yumi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kakashi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Naruto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'K.O.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Gohan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Kagura'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kuroon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ran'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Aurora'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Conan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Kudo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Lol'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yami'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sabasa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Namik'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Goku'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tintin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;'Gara'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Aiomi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# this array holds hashes of {:name =&amp;gt; mid} that have already been inserted&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58960&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generate random data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;position_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# create a hash&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# check if hash is not in the current_date array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inse&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO played_in(mid, name, year, position)
                  VALUES ($1, $2, $3, $4)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_prepared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inse&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# append the unqiue (:name =&amp;gt; mid) hash into the current_data array&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;the-issue&quot;&gt;The Issue&lt;/h4&gt;
&lt;p&gt;The second table has a pair of columns as its the primary
key &lt;code class=&quot;highlighter-rouge&quot;&gt;(played_in_pk)&lt;/code&gt;; one is the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; column and the other is &lt;code class=&quot;highlighter-rouge&quot;&gt;mid&lt;/code&gt; as a
foreign key. Thus, every row must have a unique (mid, name) pair.&lt;/p&gt;

&lt;p&gt;My approach was to save all the unique pairs in an array,
generate a random pair, then loop until we find a unique pair that was not used before.
This took a lot of time when current_data array got bigger as it had to
traverse the whole array especially that I used some fancy methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#detect&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#include?&lt;/code&gt; which are both O(n).&lt;/p&gt;

&lt;p&gt;It took about 40 minutes to generate 21440 rows and for some reason it
got stuck there.&lt;/p&gt;

&lt;h4 id=&quot;solution&quot;&gt;Solution&lt;/h4&gt;
&lt;p&gt;In my second attempt, I used a postgreSQL &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; query to search the table instead. So this was my second solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58960&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;position_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# SELECT query that searches for the pair (mid_value, name_array[name_i])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM played_in WHERE mid=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                          AND name='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# loop until we have result array empty&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# i.e., (mid_value, name_array[name_i]) is not used&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inse&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO
                  played_in(mid, name, year, position)
                  VALUES ($1, $2, $3, $4)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_prepared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;inse&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;year_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This made the script much faster. It generated 58960 rows in about 20 minutes
which was a great success besides it is much simpler now.&lt;/p&gt;

&lt;p&gt;This is the last part where I changed exactly 118 rows to have the name &lt;code class=&quot;highlighter-rouge&quot;&gt;pele&lt;/code&gt;
as required in the task:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# this is where we make 118 rows have the name 'pele'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2680&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# make sure that we don't have a (mid_value, 'pele') pair in the database&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM played_in WHERE mid='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'
                          AND name='pele' &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# break if mid_value is valid to use&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# retrieve all rows that have mid_value&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT * FROM played_in WHERE mid='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# result is an array of rows&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# retrieve the name (row[1]) from the first row of the result (result[0])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;target_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# update this row to have name='pele'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UPDATE played_in SET name = $1 WHERE mid=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid_value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                      AND name='&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pele'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;https://gist.github.com/aonemd/95c8888b36b02a63323c&quot; target=&quot;_blank&quot;&gt;full script on Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;other-solutions&quot;&gt;Other Solutions?&lt;/h3&gt;
&lt;p&gt;There might be other good solutions. One solution is to generate data into a
CSV file then copy it to the real tables. If you have any good solutions, please
let me know.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tutorialspoint.com/postgresql/index.htm&quot; target=&quot;_blank&quot;&gt;PostgreSQL tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://deveiate.org/code/pg/index.html&quot; target=&quot;_blank&quot;&gt;PG gem documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://deveiate.org/code/pg/PG/Result.html&quot; target=&quot;_blank&quot;&gt;PGresult class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2987433/how-to-import-csv-file-data-into-a-postgres-table&quot; target=&quot;_blank&quot;&gt;Import CSV file into PostgreSQL table&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/inserting-bulk-data-into-pg</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/inserting-bulk-data-into-pg</guid>
        
        <category>ruby,</category>
        
        <category>postgresql</category>
        
        
        <category>Performance</category>
        
      </item>
    
  </channel>
</rss>
