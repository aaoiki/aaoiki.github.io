<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aonemd</title>
    <description>Code and Language
</description>
    <link>https://aonemd.github.io/</link>
    <atom:link href="https://aonemd.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Jan 2019 11:26:45 +0200</pubDate>
    <lastBuildDate>Sun, 13 Jan 2019 11:26:45 +0200</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>Extracting Text From Images Using Ruby</title>
        <description>&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; &lt;a href=&quot;#the-script&quot;&gt;show me the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m a great hoarder of memes. Seriously, I have a huge folder full of memes and
GIFs. I collect my memes usually whenever I’m watching a movie or a series by
taking a screenshot of the scene with subtitles enabled. The issue is, the
program I use to take screenshots, names each new file by the date and time the
screenshot was taken. I have a 1200 screenshot folder each named by date and
time. So finding a certain screenshot/meme is too much a hassle.&lt;/p&gt;

&lt;p&gt;I thus wanted a better way to go through my collection of memes. My goal was to
rename each screenshot file to the subtitles it contains. I have, in fact, been
procrastinating this task for a long time now and the mid-year recess was the
perfect time to start a small project.&lt;/p&gt;

&lt;p&gt;To read the subtitles out of my images, Google search led me to
&lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot; target=&quot;blank&quot;&gt;Tesseract&lt;/a&gt;.
Tesseract is a tool that recognizes the text in images using Optical Character
Recognition (OCR). I started first experimenting with Tesseract and its
wrapper, &lt;a href=&quot;https://github.com/madmaze/pytesseract&quot; target=&quot;blank&quot;&gt;pytesseract&lt;/a&gt;
in Python and used OpenCV for image processing and it worked perfectly right
from the start!&lt;/p&gt;

&lt;p&gt;I started with a small Ruby script to read my images, process, and recognize
the text in each one of them. However, unfortunately, Ruby lacks in good
tooling for computer vision or image processing. I couldn’t find a good OpenCV
wrapper in Ruby except for
&lt;a href=&quot;https://github.com/ruby-opencv/ruby-opencv&quot; target=&quot;blank&quot;&gt;ruby-opencv&lt;/a&gt;
which is quite outdated and only supports OpenCV v2 (&lt;a href=&quot;https://opencv.org/releases.html&quot; target=&quot;blank&quot;&gt;Version 4 of
OpenCV&lt;/a&gt; is now released by
the way).&lt;/p&gt;

&lt;p&gt;After some tinkering with ImageMagick and its Ruby wrapper,
&lt;a href=&quot;https://github.com/minimagick/minimagick&quot; target=&quot;blank&quot;&gt;MiniMagick&lt;/a&gt;, I
could finally achieve the same results I got in Python. So, in the few next
sections, I’ll demonstrate the steps the script goes through to recognize the
subtitles in each screenshot.&lt;/p&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The Script&lt;/h2&gt;

&lt;p&gt;Next is a simpler version of the script I actually used. The full script
including the part where I process the output text and rename each file to the
new name is a gist on
&lt;a href=&quot;https://gist.github.com/aonemd/7bb3c4760d9e47a9ce8e270198cb40a0&quot; target=&quot;blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first part of the script just loops through each file (which is a PNG
image) in my source directory and reads it as a grayscale image.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pathname'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'open3'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mini_magick'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/src/dir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/tmp/dir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;realpath&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiniMagick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colorspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take the following screenshot as an example and feed it to the script.
First, we load it normally:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example.png&quot; alt=&quot;Example
screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then we convert it to grayscale. This is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example_grayscale.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example_grayscale.png&quot; alt=&quot;Example screenshot
grayscale&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cleaning-the-image&quot;&gt;Cleaning The Image&lt;/h3&gt;

&lt;p&gt;The second part is where all the image processing happens. Basically, the
script negates the image to black and white to remove all the noise. This
improves the ability of Tesseract to read the text in the image.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MiniMagick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;007%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# I couldn't prevent myself&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what image looks like after processing. You can see how almost all the
details in the image are removed except for the vivid subtitles. This file is
stored under the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP_DIR&lt;/code&gt; we defined earlier in the script. You can of course
delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP_DIR&lt;/code&gt; safely or instrument the script to do it for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example_negative.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example_negative.png&quot; alt=&quot;Example screenshot
negative&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;recognizing-the-text&quot;&gt;Recognizing The Text&lt;/h3&gt;

&lt;p&gt;In this part, we call Tesseract command on our image and get back our
recognized text. We could have used a Ruby wrapper around Tesseract, and
&lt;a href=&quot;https://github.com/dannnylo/rtesseract&quot; target=&quot;blank&quot;&gt;rtesseract&lt;/a&gt; is a
great wrapper, however; we only need to call a simple command here so we don’t
need all the features the wrapper provides.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Open3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tesseract &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stdout -l eng --oem 0 --psm 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this is the final output of our script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Oh, man. In my next life
I'm coming back as a toilet brush.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h3&gt;

&lt;p&gt;In the end, the text in 93% of my screenshots was recognized almost correctly.
I filtered out the screenshots that don’t contain any subtitles before running
the script. This means that only 7% of my screenshots were not recognized
correctly or were recognized as empty text. &lt;a href=&quot;https://github.com/tesseract-ocr/tesseract/wiki/ImproveQuality&quot; target=&quot;blank&quot;&gt;Tesseract
wiki&lt;/a&gt;
provides some tips to improve text recognization accuracy mainly, they are all
about processing the source image before feeding it to Tesseract.&lt;/p&gt;

&lt;h3 id=&quot;duplicates&quot;&gt;Duplicates&lt;/h3&gt;

&lt;p&gt;This is not related to Tesseract itself or text recognization per se, but it’s
more about the script.  If there are more than one screenshot with the same
subtitles, one image file will overwrite the other. I don’t handle this case in
my script as of yet; I want to get rid of duplicates anyway.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/extracting-text-from-images-using-ruby</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/extracting-text-from-images-using-ruby</guid>
        
        <category>Ruby,</category>
        
        <category>Computer_Vision,</category>
        
        <category>OCR,</category>
        
        <category>Image_Magick,</category>
        
        <category>Tesseract</category>
        
        
        <category>Computer Vision</category>
        
      </item>
    
      <item>
        <title>Making System Calls From Ruby</title>
        <description>&lt;p&gt;While I was reading about Linux system calls, I was curious about how to
perform them in Ruby specially that Ruby isn’t considered a “system”
programming language. However, It’s very possible to perform system calls using
Ruby. In this post, I’m going to demonstrate the different ways to make system
calls using Ruby. But first, let us define what system calls are. Simply put, a
system call is a way to enter the system kernel, execute an operation, and then
return from the kernel.&lt;/p&gt;

&lt;p&gt;In the following sections, I’ll demonstrate three [almost] different ways to
perform system calls from Ruby. All the code is tested on a 64-bit GNU/Linux
system. Although there are some notes about differences in other operating
systems, if you tested something on your operating system and want me to add it
here, please add a comment or send me a message.&lt;/p&gt;

&lt;h3 id=&quot;1-kernelsyscall&quot;&gt;1. Kernel.syscall&lt;/h3&gt;

&lt;p&gt;This first, and most straightforward way to perform a system call is by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Kernel.syscall&lt;/code&gt;. In fact, internally, Kernel.syscall calls the C function
&lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; directly. This is how it’s done:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall_arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_number&lt;/code&gt; is a unique number for each system operation and can be
obtained for 64-bit Linux systems from &lt;a href=&quot;https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl&quot; target=&quot;blank&quot;&gt;this
table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for example, to perform an exit system call with exit status 1, call the
following Ruby program:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and check the exit code in your shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I’m using Ruby 2.6.0 without the &lt;code class=&quot;highlighter-rouge&quot;&gt;--jit&lt;/code&gt; option to run this example.
For Ruby versions prior to 2.6.0 on Linux, you might want to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_group&lt;/code&gt; system call (with syscall_number 231) instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; to
terminate all the threads the Ruby process is using otherwise, the Ruby
process will freeze waiting to terminate the remaining thread(s).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there’s a caveat here. &lt;a href=&quot;https://www.rubydoc.info/stdlib/core/Kernel#syscall-instance_method&quot; target=&quot;blank&quot;&gt;The Ruby
documentation&lt;/a&gt;
says that &lt;code class=&quot;highlighter-rouge&quot;&gt;Kernel.syscall&lt;/code&gt; isn’t safe nor it is portable. If you ran the last
program using the Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; command line option (for verbose), you’ll see the
following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;warning: We plan to remove a syscall function at future release. DL(Fiddle)
provides safer alternative.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, &lt;a href=&quot;https://github.com/ruby/fiddle&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Fiddle&lt;/em&gt;&lt;/a&gt; will be our
next alternative for making system calls in Ruby.&lt;/p&gt;

&lt;h3 id=&quot;2-fiddle&quot;&gt;2. Fiddle&lt;/h3&gt;

&lt;p&gt;Fiddle is a &lt;a href=&quot;https://sourceware.org/libffi/&quot; target=&quot;blank&quot;&gt;libffi&lt;/a&gt; wrapper
written for Ruby.  Luckily, it is already a part of Ruby’s standard library.
&lt;em&gt;libffi&lt;/em&gt; is a &lt;strong&gt;foreign function interface (FFI)&lt;/strong&gt; implementation that provides
a C interface for calling compiled code (functions, really) from your program
at runtime.&lt;/p&gt;

&lt;p&gt;The following program demonstrates how to use Fiddle to call a C function from
Ruby:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fiddle'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/lib/libc.so.6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'syscall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                 &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code calls the C function &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; to perform the exit system call.  In
addition to the name of the function, you have to pass in an array that
contains the types of each argument the syscall/function takes, and another
argument for the function return type, which is an integer number in this case.
For example, the exit syscall function takes two parameters; one for the exit
syscall itself, the number 60, and another for the exit status, which is 1
here.  Thus, we have an array of two integers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; specified in the code will differ for other
operating systems. For MacOS for example, it should be set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/libc.dylib&lt;/code&gt;. Please also note that I didn’t test it myself so it
might be a different value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check the exit code:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-ffi&quot;&gt;3. FFI&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ffi/ffi&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Ruby-ffi&lt;/em&gt;&lt;/a&gt; is an FFI
implementation in Ruby.  Other than making system calls, FFI makes it possible
to fully write C extensions without the need to write pure C code. By far, this
is the safest, most convenient method as it automatically locates the path to
the libc library without the need to specify it manually as in the case with
Fiddle above.&lt;/p&gt;

&lt;p&gt;The code that makes a system call looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ffi'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SyscallRunner&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ffi_lib&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LIBC&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attach_function&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SyscallRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again, you need to pass in an array that contains the types of each argument
the function takes, and another argument for the function return type.&lt;/p&gt;

&lt;p&gt;And again, check the exit status:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although Ruby might not be considered a system programming language, Ruby is
capable of going low level and performing system calls in more than one way.
All the methods delegate the system call  to C syscall function in a way or
another.  The most secure, most scalable method is using Ruby-ffi to invoke C
syscall function.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/making-system-calls-from-ruby</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/making-system-calls-from-ruby</guid>
        
        <category>Ruby,</category>
        
        <category>Linux,</category>
        
        <category>syscalls,</category>
        
        <category>ffi</category>
        
        
        <category>Ruby</category>
        
      </item>
    
      <item>
        <title>When YAML Bit Me</title>
        <description>&lt;p&gt;This is the story of a bug I encountered about 3 years ago.  Basically, I had a
model &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; that contained a serialized object attribute called &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;BooksController&lt;/code&gt; initially contained this search query:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'info LIKE ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%ref: '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bug that surfaced at the time was that some books were not fetched when the
search query contained alpha-numeric reference numbers (those that contains
both digits and letters) as some reference numbers were pure digits and some
were a mix of digits and alphabetical characters.&lt;/p&gt;

&lt;p&gt;The main issue with the previous search query is that it assumes that the value
of &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; is always stored wrapped in single quotes, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;ref: '123'&lt;/code&gt; as in the
case with integer reference numbers, however; alpha-numeric reference numbers
were stored in the database without the single quotes!&lt;/p&gt;

&lt;p&gt;My initial solution was to provide two search queries for each type of
reference numbers because, at the time, I thought the issue was with the way
the object was stored in PostgreSQL. However, and after further investigation,
the problem turned out to be with YAML.&lt;/p&gt;

&lt;p&gt;As it turns out, the main issue was with how YAML (or Psych in Ruby) dumps
integers and strings differently. Checkout the following code snippet and see
for yourself:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'psych'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Psych&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;--- '123'\n&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## vs.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Psych&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;--- hello\n&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not a bug in Psych. In fact, the same behavior is found in Python
implementation, PyYAML:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'123'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# =&amp;gt; &quot;'123'\n&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## vs.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 'hello\n...\n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s weird to me why YAML doesn’t treat all strings equally and keep or remove
the quotes all together. This just adds up to the list of &lt;a href=&quot;https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html&quot; target=&quot;blank&quot;&gt;weird behavior of
YAML&lt;/a&gt;.
Although to be fair, it might be a way to differentiate between integers and
integers wrapped in quotes when they are dumped and reloaded (I’m not waging a
war on YAML, I swear).&lt;/p&gt;

&lt;p&gt;Eventually, to work around this issue, I had to explicitly convert
&lt;code class=&quot;highlighter-rouge&quot;&gt;params[:ref]&lt;/code&gt; to an integer iff it could be cast into an integer. This way, we
can write a single search query and remove the wrapping single quotes for all
types of reference numbers:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'info LIKE ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%ref: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it for now. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/when-yaml-bit-me</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/when-yaml-bit-me</guid>
        
        <category>YAML,</category>
        
        <category>Rails,</category>
        
        <category>PostgreSQL,</category>
        
        <category>bugs</category>
        
        
        <category>Debugging</category>
        
      </item>
    
      <item>
        <title>Computer Science Is Not About Programming</title>
        <description>&lt;p&gt;This is not yet another war post about the difference between this and that. In
fact, what’s motivated me to write this post is a TA at my university who was
shaming students who graduate university without learning how to program
properly. This idea was intriguing to me as I thought to myself that computer
science is not about programming!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/hamada_helal_hamada_helal.jpg&quot; alt=&quot;Hamada Helal, the king of obvious&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, what I believe is that computer science is about computing. According
to Merriam-Webster, the definition of computer science is “a branch of science
that deals with the theory of computation or the design of computers”.  On the
other hand, programming is merely one way to do computation, supposedly, in a
short period of time using a big calculator that is a computer (I know, cell
phones exist!). Having computers do calculations for us is just an extra
privilege.&lt;/p&gt;

&lt;p&gt;More so, computations don’t have to be done on a computer. An A4 sheet of paper
and a pencil could be used as a computer, although this is much slower and many
times harder to follow and keep track of compared to a regular computer.  There
are indeed many ways to do computations without a programming language. A
theoretical model of computation is a model which describes how a set of
outputs are computed given a set of inputs. One of the most famous models of
computation is the &lt;a href=&quot;https://www.wikiwand.com/en/Turing_machine&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Turing
machine&lt;/em&gt;&lt;/a&gt;. A
Turing machine is an abstract computer that has an infinite memory and can
sequentially traverse this memory as needed. It resembles a program which takes
an input and computes an output (in terms of accepting or rejecting the input)
but has access to an infinite memory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Computer science is about computing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have seen many students who were excellent students but were poor programmers
and that’s totally fine. Those students, if they want to, can pick up academia
and research for example, become computer scientists and excel at that.  In
contrast, I consider myself a fairly good programmer, however; I also consider
myself a not-so-good student. It doesn’t have to be a choice between either of
this or that; of course, this is not a general rule. One can be a good academic
and a good programmer at the same time.&lt;/p&gt;

&lt;p&gt;The thing about degrees is that computer science students expect that their
major should include more “programming” courses and they blame their degrees
for the lack of computer programming classes (I used to think that way when I
started my degree). However, what they are missing here is what computer
science is actually concerned with —namely, the theory behind computation.&lt;/p&gt;

&lt;p&gt;In conclusion, computer programming is only one form of doing computation.
Understanding the theory behind computation is different from writing programs
to do the computation.&lt;/p&gt;

&lt;h3 id=&quot;things-i-read-on-the-topic&quot;&gt;Things I read on the topic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/is-it-computer-science-or-programming-c01383dacc9c&quot; target=&quot;blank&quot;&gt;Is It “Computer Science” or “Programming”?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/137103/whats-the-difference-between-computer-science-and-programming&quot; target=&quot;blank&quot;&gt;What’s the difference between computer science and programming?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/computer-science-is-not-about-programming</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/computer-science-is-not-about-programming</guid>
        
        <category>computer_science,</category>
        
        <category>programming,</category>
        
        <category>education</category>
        
        
        <category>Education</category>
        
      </item>
    
      <item>
        <title>How I Improved the Loading Speed of My Blog</title>
        <description>&lt;p&gt;In this post I’m going to demonstrate the steps I took in order to improve the
loading speed of my blog. First of all, this blog is generated by
&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;blank&quot;&gt;Jekyll&lt;/a&gt;, the static site generator.  I
only build my static files and deploy them to GitHub pages. I use Webpack to
compile my assets and then I use Jekyll to build the whole blog.&lt;/p&gt;

&lt;p&gt;Around a year ago, I started on a mission to optimize the loading speed of my
blog after feeling that it was slow and had some rendering issues. The next two
screenshots demonstrate the difference in terms of loading time before and
after the optimization:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_old.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_old.png&quot; alt=&quot;Old Blog
Loading&quot; /&gt;&lt;/a&gt;
« old blog loading in 3.56s in Chrome developer tools »&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_new.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_new.png&quot; alt=&quot;New Blog
Loading&quot; /&gt;&lt;/a&gt;
« new blog loading in 600ms in chrome developer tools »&lt;/p&gt;

&lt;p&gt;In the next few points, I will list the steps I took to make my blog load
faster than it used to:&lt;/p&gt;

&lt;h3 id=&quot;1-zurb-foundation&quot;&gt;1. Zurb Foundation&lt;/h3&gt;
&lt;p&gt;The first thing I started with was completely removing Zurb Foundation, the
  CSS framework. I was using Foundation mainly for its grid system but I never
  really used most of its other components. In spite of that, I was,
  unknowingly, importing all its components into my main SCSS file (which, of
  course, was atrocious). I totally removed Foundation and replaced it with
  vanilla CSS (compiled PostCSS, actually). My main &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file was 242KB
  in size. Now, it’s a 6.3KB file.&lt;/p&gt;

&lt;h3 id=&quot;2-font-awesome--font-icons&quot;&gt;2. Font Awesome &amp;amp; Font Icons&lt;/h3&gt;
&lt;p&gt;This was based on an advice from the great frontend guru &lt;a href=&quot;https://twitter.com/ahmadalfy&quot;&gt;Ahmad
  Alfy&lt;/a&gt;: replacing Font Awesome with SVGs. There
  are already many
  &lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot; target=&quot;blank&quot;&gt;articles&lt;/a&gt; that
  discuss the case for using SVGs instead of font icons. For me, having a
  smaller file size to download by specifically adding only the icons I need to
  the sprite file, and not seeing empty squares when the file is yet to be
  downloaded are two great advantages of using SVGs.&lt;/p&gt;

&lt;h3 id=&quot;3-google-analytics&quot;&gt;3. Google Analytics&lt;/h3&gt;
&lt;p&gt;Although it might be useful to some, I didn’t really use analytics that much.
  For me, the added download time did not justify using Google Analytics
  specially that the uncached &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.js&lt;/code&gt; file alone loads from Google
  servers in about 200ms.&lt;/p&gt;

&lt;h3 id=&quot;4-disqus-comments&quot;&gt;4. Disqus Comments&lt;/h3&gt;
&lt;p&gt;I believe enabling comments in my blog is essential for opening a two-way
  channel of feedback. However, &lt;a href=&quot;http://donw.io/post/github-comments/#whats-wrong-with-disqus&quot; target=&quot;blank&quot;&gt;the biggest issue with
  disqus&lt;/a&gt;
  is that it loads too many files and makes API calls to different servers for
  tracking and analytics. I have recently worked on an implementation of blog
  comments backed by GitHub issues but I haven’t deployed it yet.&lt;/p&gt;

&lt;h3 id=&quot;5-javascript&quot;&gt;5. Javascript&lt;/h3&gt;
&lt;p&gt;When I started working on this optimization, I wanted a Javascript-free
  experience in my blog. That is, I wanted to have every functionality working
  normally with or without Javascript. Removing Foundation was a big step in
  this direction because, with removing it, its Javascript depdencies were
  removed as well. I currently, use Javascript for exactly two functions; one
  for loading fonts using &lt;em&gt;Web Font Loader&lt;/em&gt;, and the other is for toggling
  between the light and the dark theme (Yes, there’s a &lt;a href=&quot;/blog/introducing-jack-and-dark-theme&quot;&gt;dark
  theme&lt;/a&gt; in this blog). Previously, two
  JS files were downloaded with a total size of 222KB and loaded in about 77ms.
  Now, it’s just a single 20KB file that loads in ~20ms. Having Javascript
  files load asynchronously using &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; to load the main index.js file also
  helped a lot in the total loading time of the blog.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Having fewer files for the browser to download, and fewer resources that
  access the network help greatly in speeding the page load specially for
  static websites such as blogs.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</guid>
        
        <category>frontend,</category>
        
        <category>css,</category>
        
        <category>javascript,</category>
        
        <category>performance</category>
        
        
        <category>Performance</category>
        
      </item>
    
      <item>
        <title>On Writing</title>
        <description>&lt;h3 id=&quot;why-i-write&quot;&gt;Why I write&lt;/h3&gt;

&lt;p&gt;There maybe a lot of reasons for this. For starters, I think writing is a fun
activity. I write mainly to improve my communication skills, written
communication skills apparently. Another reason I write for is to give back to
the communities I’m involved in and maybe benefit someone someday with
something I wrote. Teaching is such a precious experience. Teaching and
teaching through writing here does not only benefit the reader but also the
writer cause when I write, I get to deepen and widen my knowledge base.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teach and you shall learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;writing-is-hard&quot;&gt;Writing is hard&lt;/h3&gt;

&lt;p&gt;Seriously, this is the first thing that came to my mind when I thought of
writing this article. Although it might be fun to write, it’s very difficult to
put a good article together. The biggest issue for me is when I have a fairly
good idea and I can barely write about it at length. Although I believe in
quality not quantity, some articles can be understood from only the title and a
title alone cannot make an article. Some other articles feel superficial to me
after writing them thus I keep writing articles and deleting (or sometimes,
constantly editing) them.&lt;/p&gt;

&lt;h3 id=&quot;marketing-is-also-hard&quot;&gt;Marketing is also hard&lt;/h3&gt;

&lt;p&gt;Between the downvotes and the harsh comments on Reddit and Hacker News,
marketing an article is as hard as writing it. Currently, I use Twitter and
Reddit to share my articles. The downvotes and the harsh comments with no
constructive feedback are a bit frustrating sometimes even though I believe I
don’t write for everyone. What I mean by I don’t write for everyone is that the
targeted audience for each article might differ thus building an audience for the blog is difficult.&lt;/p&gt;

&lt;h3 id=&quot;how-i-write&quot;&gt;How I write&lt;/h3&gt;

&lt;p&gt;Currently the way I write is as follows:&lt;/p&gt;

&lt;p&gt;First, I come up with an idea and/or a title, generate a page for the article,
and fire up a text editor. I start by writing the main headlines in the
article. I then start filling the main points as fast as possible without
editing them. Afterwards, I edit the article, and fix the typos.&lt;/p&gt;

&lt;p&gt;How I want to write though is writing consistently. No matter how many new
year’s resolutions I may make, I never keep writing consistently as I want to.
However recently, I’ve been writing every other week or so. I also want to
write fearlessly. The fear of writing a bad article is what always stops me
from writing or publishing an article.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/on-writing</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/on-writing</guid>
        
        <category>writing,</category>
        
        <category>blogging</category>
        
        
        <category>Blogging</category>
        
      </item>
    
      <item>
        <title>How I Take Notes</title>
        <description>&lt;p&gt;I always advice every programmer to take notes of their work all the time.
Taking notes has throughout the years become so indispensable for me.  Instead
of searching for something every time I forget it, I go back to my notes. It
has also become helpful when I need to study for interviews. I also use those
notes as a journal to keep and organize my thoughts when I’m working on a new
feature or fixing a bug.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s nothing better than a beautiful day at the beach, filled with sun,
surf and diligent note-taking
&lt;cite&gt;Pam Beesly, The Office&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;digital-notes&quot;&gt;Digital notes&lt;/h3&gt;

&lt;p&gt;I started taking notes on small yellow sticky notes however, it wasn’t that
efficient when I needed to access my notes when I’m not home or when I’m using
my phone. Thus, I started taking digital notes on my computer and cellphone.&lt;/p&gt;

&lt;p&gt;As I mentioned, I started with sticky notes and a pencil then I moved to
digital notes. First, I tried multiple note taking apps but I couldn’t find
something better than using my favorite text editor to take notes. Besides,
each app has its own format to store notes. I was looking for something simple
and with much control over my notes as possible.&lt;/p&gt;

&lt;p&gt;Currently, I use a text editor, Markdown, and a small shell script to list and
open notes. My text editor of choice is Vim. I use Vim in combination with
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrlp&lt;/code&gt; for fuzzy file finding and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ag&lt;/code&gt;, the silver searcher, to search across
files. Of course, you can use your own text editor as most modern text editors
implement these features out of the box. For tags and organizing the notes, I
simply use folders to group them. Here’s the script I started with initially:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .bashrc or .zshrc&lt;/span&gt;

note &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notes_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/path/to/notes&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;c&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    l&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    p&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Regenerated at &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+%Y-%m-%d %H:%M:%S'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; UTC&quot;&lt;/span&gt;
      git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
      git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      git push origin master
      &lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you can call the function directly in your shell using:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;note l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;note todo.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;syncing&quot;&gt;Syncing&lt;/h3&gt;

&lt;p&gt;From the previous script, you can see that I used to use Git to keep and sync
the notes between my machine and a Git repository. The issue with using Git is
that I cannot sync and read the notes on my cellphone (as far as I know; I
didn’t search how to use Git on my phone). To solve this issue, I moved my
notes to Dropbox (you can use any other method for synchronization). Now it’s
possible to sync them between my computer and my phone. Here’s the very simple
script I currently use:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .bashrc or .zshrc&lt;/span&gt;

note &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notes_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Dropbox/notes&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;c&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    l&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;.md
      &lt;span class=&quot;k&quot;&gt;fi
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;popd
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;For editing notes on the phone, there are multiple apps that I didn’t
investigate. However, I’m currently using the default text editor that comes
with the Dropbox app.&lt;/p&gt;

&lt;p&gt;Also, until this point, I write and read my notes in Markdown. Although it’s
possible to do more work and convert the notes into a more readable format such
as PDF or HTML using something like &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/how-i-take-notes</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/how-i-take-notes</guid>
        
        <category>vim,</category>
        
        <category>notes,</category>
        
        <category>bash</category>
        
        
        <category>How I</category>
        
      </item>
    
      <item>
        <title>Programming on Rails</title>
        <description>&lt;p&gt;Ruby on Rails is a great web framework. It has changed the way web development
is done and influenced other frameworks in other programming languages. Even
admittedly, much of the major success of Ruby is due to the wide spread of
Rails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/Ruby_On_Rails_Logo.png&quot; alt=&quot;Rails Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Being the opinionated framework it is, Rails is built on top of a set of
conventions and philosophies. It’s said to be
&lt;a href=&quot;http://david.heinemeierhansson.com/2012/rails-is-omakase.html&quot; target=&quot;blank&quot;&gt;Omakase (お任せ)&lt;/a&gt;
or chef’s menu of choice (also, watch
&lt;a href=&quot;https://www.youtube.com/watch?v=E99FnoYqoII&quot; target=&quot;blank&quot;&gt;Rails is Omakase: A Dramatic Reading&lt;/a&gt;).
Unlike Node’s ExpressJS for example, Rails comes preconfigured with all the
stack you need to build your app. Its convenience over configuration led it to
be one of the easiest and fastest ways to start building apps for the web
today.&lt;/p&gt;

&lt;p&gt;Of course, this convenience comes at a cost. Apart from the added difficulty to
maintain when the app grows in complexity (which I won’t talk about in this
post), the Rails way sets a fixated mindset about programming, namely, web
programming. Your entire world view to programming is through Rails and the
Rails way. For instance, the places where you can create your classes, the way
you connect the backend with the view and the frontend, and the way you write
helper functions or helper modules are all set by the framework, Rails. I’m not
discussing here the architectural decisions made by Rails however, I’m
pointing to the effect of those decisions on the programmer’s mindset.&lt;/p&gt;

&lt;p&gt;I’ve been doing Rails for around 4 years now. During this period, whenever I’m
working on a task (be it Rails or non-Rails related), I often caught myself
looking to identify a pattern; looking for the framework in it. It’s like my
mind wants to see all programming as it sees tedious CRUD applications (which
are totally fine as long as they are solving a problem). The issue here is
restricting my thought process to only one way of thinking however,
programming, or rather the creative thinking it requires, needs more
imagination and less restriction.&lt;/p&gt;

&lt;p&gt;Something I also noticed while working with interns is that more fresh minds
tend to be more flexible than experienced developers. Their minds are not yet
bloated with way of the framework and they tend be less following to the rules.&lt;/p&gt;

&lt;p&gt;So you might ask what to do in order to free your mind from the Rails way. What
I suggest is to rebel against Rails. Yes, try different Ruby web frameworks,
different languages, new stacks, or even developing for platforms other than
the web altogether. Also, try breaking, bending, and tweaking large, complex
Rails apps to see how far you can get with Rails. Try a new architecture for
your Rails app by dividing your business logic and classes into multiple
layers. The world outside the Rails menu is so vast and diverse but you need to
see that for yourself.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/programming-on-rails</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/programming-on-rails</guid>
        
        <category>Ruby,</category>
        
        <category>Rails</category>
        
        
        <category>Ruby on Rails</category>
        
      </item>
    
      <item>
        <title>Bear Programming</title>
        <description>&lt;p&gt;According to Wikipedia, &lt;em&gt;Pair Programming&lt;/em&gt; is an agile software development
technique in which two programmers work together at one workstation.&lt;/p&gt;

&lt;p&gt;There’s also a term I call &lt;em&gt;Bear programming&lt;/em&gt; that is not the opposite of
pair programming. &lt;em&gt;Bear programming&lt;/em&gt; is when a team of programmers that
work together on a single project starts mauling the code and ripping its
different parts apart like a group of bears.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/bear_programming.png&quot; alt=&quot;Bear Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me clear this. The mauling here refers to writing code that is
distinguishable to the code written by other team members. You can take a
look at the codebase in the end and know that it was written by more than
one person. This rather dysfunctional behavior often occurs because of the
lack of communication between team members.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Organizations which design systems are constrained to produce designs
which are copies of the communication structures of these organizations.
&lt;cite&gt;Melvin Conway&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This previous quote is by Melvin Conway and it’s named after him, &lt;em&gt;Conway’s
Law&lt;/em&gt;. It depicts how communication between teams affect the way their systems
are structured. The lack of communication within a team will be mirrored in the
codebase and will affect the overall system architecture. Thus, Bear
programming is a red flag in any team. Here’s what I think can be done to
mitigate the problem (without turning the post into a BuzzFeed-like post):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Having a style guide and running the code through some sort of a linter keeps
the codebase organized and unified in terms of style&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Pair programming&lt;/em&gt; helps training the team to work together and
understand each other. The element of importance in pair programming is
the actual interaction between the team members&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having a strong code review culture. Code reviews do not only help the team
learn from one another, they also help finding the differences among the team
members and narrowing them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writing better Git commit messages (if you use Git and you probably should)
by focusing on providing the context or the why of the commit. This is also
essential to the previous point about code reviews. Git commits are a means
to relay messages to other developers in the team&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, lack of communication is a sign of a dysfunctional team, and
thus; training the team to work together is a must in order for the team to
successfully build and maintain their codebase.&lt;/p&gt;

&lt;p&gt;That’s it. End of Line.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.melconway.com/Home/Conways_Law.html&quot;&gt;Conway’s Law&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/demystifying-conways-law&quot;&gt;Demystifying Conway’s Law&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PJjmw9TRB7s&quot;&gt;Implementing a Strong Code-Review Culture&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/bear-programming</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/bear-programming</guid>
        
        <category>bear_programming,</category>
        
        <category>development,</category>
        
        <category>product_management</category>
        
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>Introducing Jack and The Dark Theme</title>
        <description>&lt;p&gt;This website is generated by Jekyll, the static site generator. For compiling
assets (mainly Javascript and stylsheet files), I’ve been using
&lt;a href=&quot;https://github.com/rails/sprockets&quot; target=&quot;\_blank&quot;&gt;Sprockets&lt;/a&gt; through 
&lt;a href=&quot;https://github.com/envygeeks/jekyll-assets/&quot; target=&quot;\_blank&quot;&gt;Jekyll Assets&lt;/a&gt;
gem.  Although recently, and after I had updated the gems in Jekyll’s Gemfile,
a new update for Jekyll asset was pushed. It appears they decided to change
their entire interface. This rendered my whole project unusable and I needed to
change every call to Jekyll Assets new interface in order to fix it.&lt;/p&gt;

&lt;p&gt;At this point, I wanted to fix the blog so I can add new posts (fingers
crossed) and I was learning some new technologies in the Javascript world. I’ve
been using Webpack in my Rails apps, Rails 5 in particular. I decided I will
use Webpack in my Jekyll project to compile and build all the frontend assets.
At first, I looked for some existing Jekyll projects that use Webpack but
almost all of them are outdated since the Javascript mantra, it seems, is to
move fast and update even faster.&lt;/p&gt;

&lt;p&gt;I ended up starting a new Jekyll project and set it up with Webpack. In
addition to Babel to transpile ES6 code to ES5, I used PostCSS for the
stylesheets. And this is how Jack came out. Jack is a dark Jekyll theme already
setup with Webpack, of course. It’s so simple in design that it could be used
as a template for new Jekyll projects and tweaked as needed. However simple it
is (and how bad I may be in design), its theme is mobile first and responsive,
and dark!&lt;/p&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_screenshot.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_screenshot.png&quot; alt=&quot;Jack demo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/aonemd/jack&quot;&gt;source code on GitHub&lt;/a&gt;.
You can also see a demo &lt;a href=&quot;https://aonemd.github.io/jack/&quot;&gt;through this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I finished setting up Jack, I migrated all the new changes to my original
blog. The migration was seamless with only a few small issues. Out of love for
dark screens and because I always wanted to have a dark website, I also
migrated the dark theme and made it toggleable. You can toggle the dark theme
on and off using the button in the top navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot; alt=&quot;Dark theme toggle button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is how it looks when it’s toggled on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot; alt=&quot;Dark theme toggle btn on&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/introducing-jack-and-dark-theme</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/introducing-jack-and-dark-theme</guid>
        
        <category>blog,</category>
        
        <category>jekyll,</category>
        
        <category>dark_theme</category>
        
        
        <category>Blogging</category>
        
      </item>
    
  </channel>
</rss>
