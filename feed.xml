<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aonemd</title>
    <description>Code and Language
</description>
    <link>https://aonemd.github.io/</link>
    <atom:link href="https://aonemd.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Nov 2018 20:33:35 +0200</pubDate>
    <lastBuildDate>Tue, 06 Nov 2018 20:33:35 +0200</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>How I Improved the Loading Speed of My Blog</title>
        <description>&lt;p&gt;In this post I’m going to demonstrate the steps I took in order to improve the
loading speed of my blog. First of all, this blog is generated by
&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;blank&quot;&gt;Jekyll&lt;/a&gt;, the static site generator.  I
only build my static files and deploy them to GitHub pages. I use Webpack to
compile my assets and then I use Jekyll to build the whole blog.&lt;/p&gt;

&lt;p&gt;Around a year ago, I started on a mission to optimize the loading speed of my
blog after feeling that it was slow and had some rendering issues. The next two
screenshots demonstrate the difference in terms of loading time before and
after the optimization:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_old.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_old.png&quot; alt=&quot;Old Blog
Loading&quot; /&gt;&lt;/a&gt;
« old blog loading in 3.56s in Chrome developer tools »&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_new.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_new.png&quot; alt=&quot;New Blog
Loading&quot; /&gt;&lt;/a&gt;
« new blog loading in 600ms in chrome developer tools »&lt;/p&gt;

&lt;p&gt;In the next few points, I will list the steps I took to make my blog load
faster than it used to:&lt;/p&gt;

&lt;h3 id=&quot;1-zurb-foundation&quot;&gt;1. Zurb Foundation&lt;/h3&gt;
&lt;p&gt;The first thing I started with was completely removing Zurb Foundation, the
  CSS framework. I was using Foundation mainly for its grid system but I never
  really used most of its other components. In spite of that, I was,
  unknowingly, importing all its components into my main SCSS file (which, of
  course, was atrocious). I totally removed Foundation and replaced it with
  vanilla CSS (compiled PostCSS, actually). My main &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file was 242KB
  in size. Now, it’s a 6.3KB file.&lt;/p&gt;

&lt;h3 id=&quot;2-font-awesome--font-icons&quot;&gt;2. Font Awesome &amp;amp; Font Icons&lt;/h3&gt;
&lt;p&gt;This was based on an advice from the great frontend guru &lt;a href=&quot;https://twitter.com/ahmadalfy&quot;&gt;Ahmad
  Alfy&lt;/a&gt;: replacing Font Awesome with SVGs. There
  are already many
  &lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot; target=&quot;blank&quot;&gt;articles&lt;/a&gt; that
  discuss the case for using SVGs instead of font icons. For me, having a
  smaller file size to download by specifically adding only the icons I need to
  the sprite file, and not seeing empty squares when the file is yet to be
  downloaded are two great advantages of using SVGs.&lt;/p&gt;

&lt;h3 id=&quot;3-google-analytics&quot;&gt;3. Google Analytics&lt;/h3&gt;
&lt;p&gt;Although it might be useful to some, I didn’t really use analytics that much.
  For me, the added download time did not justify using Google Analytics
  specially that the uncached &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.js&lt;/code&gt; file alone loads from Google
  servers in about 200ms.&lt;/p&gt;

&lt;h3 id=&quot;4-disqus-comments&quot;&gt;4. Disqus Comments&lt;/h3&gt;
&lt;p&gt;I believe enabling comments in my blog is essential for opening a two-way
  channel of feedback. However, &lt;a href=&quot;http://donw.io/post/github-comments/#whats-wrong-with-disqus&quot; target=&quot;blank&quot;&gt;the biggest issue with
  disqus&lt;/a&gt;
  is that it loads too many files and makes API calls to different servers for
  tracking and analytics. I have recently worked on an implementation of blog
  comments backed by GitHub issues but I haven’t deployed it yet.&lt;/p&gt;

&lt;h3 id=&quot;5-javascript&quot;&gt;5. Javascript&lt;/h3&gt;
&lt;p&gt;When I started working on this optimization, I wanted a Javascript-free
  experience in my blog. That is, I wanted to have every functionality working
  normally with or without Javascript. Removing Foundation was a big step in
  this direction because, with removing it, its Javascript depdencies were
  removed as well. I currently, use Javascript for exactly two functions; one
  for loading fonts using &lt;em&gt;Web Font Loader&lt;/em&gt;, and the other is for toggling
  between the light and the dark theme (Yes, there’s a &lt;a href=&quot;/blog/introducing-jack-and-dark-theme&quot;&gt;dark
  theme&lt;/a&gt; in this blog). Previously, two
  JS files were downloaded with a total size of 222KB and loaded in about 77ms.
  Now, it’s just a single 20KB file that loads in ~20ms. Having Javascript
  files load asynchronously using &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; to load the main index.js file also
  helped a lot in the total loading time of the blog.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In conclusion, having fewer files for the browser to download, and fewer
  resources that access the network help greatly in speeding the page load
  specially for static websites such as blogs.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</guid>
        
        <category>frontend,</category>
        
        <category>css,</category>
        
        <category>javascript,</category>
        
        <category>performance</category>
        
        
        <category>Performance</category>
        
      </item>
    
      <item>
        <title>On Writing</title>
        <description>&lt;h3 id=&quot;why-i-write&quot;&gt;Why I write&lt;/h3&gt;

&lt;p&gt;There maybe a lot of reasons for this. For starters, I think writing is a fun
activity. I write mainly to improve my communication skills, written
communication skills apparently. Another reason I write for is to give back to
the communities I’m involved in and maybe benefit someone someday with
something I wrote. Teaching is such a precious experience. Teaching and
teaching through writing here does not only benefit the reader but also the
writer cause when I write, I get to deepen and widen my knowledge base.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teach and you shall learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;writing-is-hard&quot;&gt;Writing is hard&lt;/h3&gt;

&lt;p&gt;Seriously, this is the first thing that came to my mind when I thought of
writing this article. Although it might be fun to write, it’s very difficult to
put a good article together. The biggest issue for me is when I have a fairly
good idea and I can barely write about it at length. Although I believe in
quality not quantity, some articles can be understood from only the title and a
title alone cannot make an article. Some other articles feel superficial to me
after writing them thus I keep writing articles and deleting (or sometimes,
constantly editing) them.&lt;/p&gt;

&lt;h3 id=&quot;marketing-is-also-hard&quot;&gt;Marketing is also hard&lt;/h3&gt;

&lt;p&gt;Between the downvotes and the harsh comments on Reddit and Hacker News,
marketing an article is as hard as writing it. Currently, I use Twitter and
Reddit to share my articles. The downvotes and the harsh comments with no
constructive feedback are a bit frustrating sometimes even though I believe I
don’t write for everyone. What I mean by I don’t write for everyone is that the
targeted audience for each article might differ thus building an audience for the blog is difficult.&lt;/p&gt;

&lt;h3 id=&quot;how-i-write&quot;&gt;How I write&lt;/h3&gt;

&lt;p&gt;Currently the way I write is as follows:&lt;/p&gt;

&lt;p&gt;First, I come up with an idea and/or a title, generate a page for the article,
and fire up a text editor. I start by writing the main headlines in the
article. I then start filling the main points as fast as possible without
editing them. Afterwards, I edit the article, and fix the typos.&lt;/p&gt;

&lt;p&gt;How I want to write though is writing consistently. No matter how many new
year’s resolutions I may make, I never keep writing consistently as I want to.
However recently, I’ve been writing every other week or so. I also want to
write fearlessly. The fear of writing a bad article is what always stops me
from writing or publishing an article.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/on-writing</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/on-writing</guid>
        
        <category>writing,</category>
        
        <category>blogging</category>
        
        
        <category>Blogging</category>
        
      </item>
    
      <item>
        <title>How I Take Notes</title>
        <description>&lt;p&gt;I always advice every programmer to take notes of their work all the time.
Taking notes has throughout the years become so indispensable for me.  Instead
of searching for something every time I forget it, I go back to my notes. It
has also become helpful when I need to study for interviews. I also use those
notes as a journal to keep and organize my thoughts when I’m working on a new
feature or fixing a bug.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s nothing better than a beautiful day at the beach, filled with sun,
surf and diligent note-taking
&lt;cite&gt;Pam Beesly, The Office&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;digital-notes&quot;&gt;Digital notes&lt;/h3&gt;

&lt;p&gt;I started taking notes on small yellow sticky notes however, it wasn’t that
efficient when I needed to access my notes when I’m not home or when I’m using
my phone. Thus, I started taking digital notes on my computer and cellphone.&lt;/p&gt;

&lt;p&gt;As I mentioned, I started with sticky notes and a pencil then I moved to
digital notes. First, I tried multiple note taking apps but I couldn’t find
something better than using my favorite text editor to take notes. Besides,
each app has its own format to store notes. I was looking for something simple
and with much control over my notes as possible.&lt;/p&gt;

&lt;p&gt;Currently, I use a text editor, Markdown, and a small shell script to list and
open notes. My text editor of choice is Vim. I use Vim in combination with
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrlp&lt;/code&gt; for fuzzy file finding and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ag&lt;/code&gt;, the silver searcher, to search across
files. Of course, you can use your own text editor as most modern text editors
implement these features out of the box. For tags and organizing the notes, I
simply use folders to group them. Here’s the script I started with initially:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .bashrc or .zshrc&lt;/span&gt;

note &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notes_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/path/to/notes&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;c&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    l&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    p&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Regenerated at &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+%Y-%m-%d %H:%M:%S'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; UTC&quot;&lt;/span&gt;
      git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
      git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      git push origin master
      &lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you can call the function directly in your shell using:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;note l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;note todo.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;syncing&quot;&gt;Syncing&lt;/h3&gt;

&lt;p&gt;From the previous script, you can see that I used to use Git to keep and sync
the notes between my machine and a Git repository. The issue with using Git is
that I cannot sync and read the notes on my cellphone (as far as I know; I
didn’t search how to use Git on my phone). To solve this issue, I moved my
notes to Dropbox (you can use any other method for synchronization). Now it’s
possible to sync them between my computer and my phone. Here’s the very simple
script I currently use:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .bashrc or .zshrc&lt;/span&gt;

note &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notes_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Dropbox/notes&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;c&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    l&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$notes_dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;vim &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;.md
      &lt;span class=&quot;k&quot;&gt;fi
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;popd
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;For editing notes on the phone, there are multiple apps that I didn’t
investigate. However, I’m currently using the default text editor that comes
with the Dropbox app.&lt;/p&gt;

&lt;p&gt;Also, until this point, I write and read my notes in Markdown. Although it’s
possible to do more work and convert the notes into a more readable format such
as PDF or HTML using something like &lt;code class=&quot;highlighter-rouge&quot;&gt;pandoc&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/how-i-take-notes</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/how-i-take-notes</guid>
        
        <category>vim,</category>
        
        <category>notes,</category>
        
        <category>bash</category>
        
        
        <category>How I</category>
        
      </item>
    
      <item>
        <title>Programming on Rails</title>
        <description>&lt;p&gt;Ruby on Rails is a great web framework. It has changed the way web development
is done and influenced other frameworks in other programming languages. Even
admittedly, much of the major success of Ruby is due to the wide spread of
Rails.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/Ruby_On_Rails_Logo.png&quot; alt=&quot;Rails Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Being the opinionated framework it is, Rails is built on top of a set of
conventions and philosophies. It’s said to be
&lt;a href=&quot;http://david.heinemeierhansson.com/2012/rails-is-omakase.html&quot; target=&quot;blank&quot;&gt;Omakase (お任せ)&lt;/a&gt;
or chef’s menu of choice (also, watch
&lt;a href=&quot;https://www.youtube.com/watch?v=E99FnoYqoII&quot; target=&quot;blank&quot;&gt;Rails is Omakase: A Dramatic Reading&lt;/a&gt;).
Unlike Node’s ExpressJS for example, Rails comes preconfigured with all the
stack you need to build your app. Its convenience over configuration led it to
be one of the easiest and fastest ways to start building apps for the web
today.&lt;/p&gt;

&lt;p&gt;Of course, this convenience comes at a cost. Apart from the added difficulty to
maintain when the app grows in complexity (which I won’t talk about in this
post), the Rails way sets a fixated mindset about programming, namely, web
programming. Your entire world view to programming is through Rails and the
Rails way. For instance, the places where you can create your classes, the way
you connect the backend with the view and the frontend, and the way you write
helper functions or helper modules are all set by the framework, Rails. I’m not
discussing here the architectural decisions made by Rails however, I’m
pointing to the effect of those decisions on the programmer’s mindset.&lt;/p&gt;

&lt;p&gt;I’ve been doing Rails for around 4 years now. During this period, whenever I’m
working on a task (be it Rails or non-Rails related), I often caught myself
looking to identify a pattern; looking for the framework in it. It’s like my
mind wants to see all programming as it sees tedious CRUD applications (which
are totally fine as long as they are solving a problem). The issue here is
restricting my thought process to only one way of thinking however,
programming, or rather the creative thinking it requires, needs more
imagination and less restriction.&lt;/p&gt;

&lt;p&gt;Something I also noticed while working with interns is that more fresh minds
tend to be more flexible than experienced developers. Their minds are not yet
bloated with way of the framework and they tend be less following to the rules.&lt;/p&gt;

&lt;p&gt;So you might ask what to do in order to free your mind from the Rails way. What
I suggest is to rebel against Rails. Yes, try different Ruby web frameworks,
different languages, new stacks, or even developing for platforms other than
the web altogether. Also, try breaking, bending, and tweaking large, complex
Rails apps to see how far you can get with Rails. Try a new architecture for
your Rails app by dividing your business logic and classes into multiple
layers. The world outside the Rails menu is so vast and diverse but you need to
see that for yourself.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/programming-on-rails</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/programming-on-rails</guid>
        
        <category>Ruby,</category>
        
        <category>Rails</category>
        
        
        <category>Ruby on Rails</category>
        
      </item>
    
      <item>
        <title>Bear Programming</title>
        <description>&lt;p&gt;According to Wikipedia, &lt;em&gt;Pair Programming&lt;/em&gt; is an agile software development
technique in which two programmers work together at one workstation.&lt;/p&gt;

&lt;p&gt;There’s also a term I call &lt;em&gt;Bear programming&lt;/em&gt; that is not the opposite of
pair programming. &lt;em&gt;Bear programming&lt;/em&gt; is when a team of programmers that
work together on a single project starts mauling the code and ripping its
different parts apart like a group of bears.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/bear_programming.png&quot; alt=&quot;Bear Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let me clear this. The mauling here refers to writing code that is
distinguishable to the code written by other team members. You can take a
look at the codebase in the end and know that it was written by more than
one person. This rather dysfunctional behavior often occurs because of the
lack of communication between team members.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Organizations which design systems are constrained to produce designs
which are copies of the communication structures of these organizations.
&lt;cite&gt;Melvin Conway&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This previous quote is by Melvin Conway and it’s named after him, &lt;em&gt;Conway’s
Law&lt;/em&gt;. It depicts how communication between teams affect the way their systems
are structured. The lack of communication within a team will be mirrored in the
codebase and will affect the overall system architecture. Thus, Bear
programming is a red flag in any team. Here’s what I think can be done to
mitigate the problem (without turning the post into a BuzzFeed-like post):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Having a style guide and running the code through some sort of a linter keeps
the codebase organized and unified in terms of style&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Pair programming&lt;/em&gt; helps training the team to work together and
understand each other. The element of importance in pair programming is
the actual interaction between the team members&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having a strong code review culture. Code reviews do not only help the team
learn from one another, they also help finding the differences among the team
members and narrowing them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writing better Git commit messages (if you use Git and you probably should)
by focusing on providing the context or the why of the commit. This is also
essential to the previous point about code reviews. Git commits are a means
to relay messages to other developers in the team&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, lack of communication is a sign of a dysfunctional team, and
thus; training the team to work together is a must in order for the team to
successfully build and maintain their codebase.&lt;/p&gt;

&lt;p&gt;That’s it. End of Line.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.melconway.com/Home/Conways_Law.html&quot;&gt;Conway’s Law&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/demystifying-conways-law&quot;&gt;Demystifying Conway’s Law&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PJjmw9TRB7s&quot;&gt;Implementing a Strong Code-Review Culture&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/bear-programming</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/bear-programming</guid>
        
        <category>bear_programming,</category>
        
        <category>development,</category>
        
        <category>product_management</category>
        
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>Introducing Jack and The Dark Theme</title>
        <description>&lt;p&gt;This website is generated by Jekyll, the static site generator. For compiling
assets (mainly Javascript and stylsheet files), I’ve been using
&lt;a href=&quot;https://github.com/rails/sprockets&quot; target=&quot;\_blank&quot;&gt;Sprockets&lt;/a&gt; through 
&lt;a href=&quot;https://github.com/envygeeks/jekyll-assets/&quot; target=&quot;\_blank&quot;&gt;Jekyll Assets&lt;/a&gt;
gem.  Although recently, and after I had updated the gems in Jekyll’s Gemfile,
a new update for Jekyll asset was pushed. It appears they decided to change
their entire interface. This rendered my whole project unusable and I needed to
change every call to Jekyll Assets new interface in order to fix it.&lt;/p&gt;

&lt;p&gt;At this point, I wanted to fix the blog so I can add new posts (fingers
crossed) and I was learning some new technologies in the Javascript world. I’ve
been using Webpack in my Rails apps, Rails 5 in particular. I decided I will
use Webpack in my Jekyll project to compile and build all the frontend assets.
At first, I looked for some existing Jekyll projects that use Webpack but
almost all of them are outdated since the Javascript mantra, it seems, is to
move fast and update even faster.&lt;/p&gt;

&lt;p&gt;I ended up starting a new Jekyll project and set it up with Webpack. In
addition to Babel to transpile ES6 code to ES5, I used PostCSS for the
stylesheets. And this is how Jack came out. Jack is a dark Jekyll theme already
setup with Webpack, of course. It’s so simple in design that it could be used
as a template for new Jekyll projects and tweaked as needed. However simple it
is (and how bad I may be in design), its theme is mobile first and responsive,
and dark!&lt;/p&gt;

&lt;p&gt;This is how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_screenshot.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_screenshot.png&quot; alt=&quot;Jack demo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/aonemd/jack&quot;&gt;source code on GitHub&lt;/a&gt;.
You can also see a demo &lt;a href=&quot;https://aonemd.github.io/jack/&quot;&gt;through this link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I finished setting up Jack, I migrated all the new changes to my original
blog. The migration was seamless with only a few small issues. Out of love for
dark screens and because I always wanted to have a dark website, I also
migrated the dark theme and made it toggleable. You can toggle the dark theme
on and off using the button in the top navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn.png&quot; alt=&quot;Dark theme toggle button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is how it looks when it’s toggled on:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot;&gt;&lt;img src=&quot;/public/images/jack_dark_theme_toggle_btn_2.png&quot; alt=&quot;Dark theme toggle btn on&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/introducing-jack-and-dark-theme</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/introducing-jack-and-dark-theme</guid>
        
        <category>blog,</category>
        
        <category>jekyll,</category>
        
        <category>dark_theme</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>التدريب في مصر</title>
        <description>&lt;p&gt;إذا كنت أحد طلاب كليات الحاسبات في مصر ، فأنت - على الأغلب - على علم بوضع
الشركات المصرية اللي تقدم تدريباً - غالباً ما يكون في الإجازة الصيفية - لطلاب تلك
الكليات.&lt;/p&gt;

&lt;p&gt;تُلزم كليات الحاسبات الطلاب قضاء مدة ثلاثة أشهر في إحدى الشركات قبل التخرج.  ومن
ذلك تقوم شركات البرمجيات المصرية بعملية أشبه بالمتاجرة بالطلاب حيث يتقدم الطالب
لشركةٍ ما كمتدرب، ليتفاجئ أنه وباقي الموظفين في الشركة متدربون ولا يوجد موظفون
أكثر خبرة اللهم إلا القليل. ربما قد يرجع ذلك إلى نقص ذوي الخبرة من المبرمجين،
لكن ذلك لا يعطي الحق لتلك الشركات “بنهب” الطلاب الراغبين في التدريب واستغلالهم.&lt;/p&gt;

&lt;p&gt;شكل الاستغلال الذي أتحدث عنه هنا هو الاستغلال المادي بالطبع.  فمفهوم التدريب في
الشركات المصرية يختلف عن مفهومها لدى باقي شركات العالم؛ المتدرب كأي موظف آخر في
الشركة، عليه نفس المسئوليات لكنه بلا أية حقوق. والأغرب أن بعض تلك الشركات تطلب من
المتدرب الحضور والانصراف في مواعيد محددة تماماً كباقي الموظفين.  إذا قمت ببحث
بسيط في موقع reddit عن “unpaid cs internship” فستجد من أغلب الردود أن الفكرة
مستهجنة وغريبة على مجال هندسة البرمجيات. وقد يكون مجال البرمجيات أحسن حالاً من
المجالات الأخرى، فقد أخبرني صديق مرة أن بعض الشركات (في مجال هندسي آخر) تتقاضى
مبلغاً من المال مقابل تدريب الطلاب لديهم.&lt;/p&gt;

&lt;p&gt;إذا أغفلنا الجانب المادي للحظة، فكرة أن يقوم فريق من المتدربين بالعمل على مشروع
لعميلٍ ما دون إشراف مبرمجين أكثر خبرة كارثية. فحجم المشاكل والأخطاء (technical
debt) في تلك المشاريع ضخم تصعب معه صيانة المشروع أو التعديل فيه وقد ينتهي الأمر
إلى كتابة المشروع من جديد. تكلفة كتابة المشروع من جديد تتعدى تكلفة تكوين فريق
مناسب من المبرمجين منذ البداية (إلا إذا كونت فريقاً من المتدربين الذين يعملون بلا
مقابل بالطبع).  هناك أيضاً  ما يعرف بـ Senior to Junior Ratio أو نسبة المبرمجين
ذوي الخبرة إلى المبرمجين المبتدئين في فريق العمل. يجب أن تتحقق نسبة ملائمة من
المبرمجين ذوي الخبرة في أي فريق برمجي، فلا يمكن أن يكون الفريق كله من المبتدئين
وتتوقع أن المشروع سيخرج بجودة عالية. بالطبع هذه النسبة تختلف حسب طبيعة المشروع
والشركة نفسها، المشكلة هي أن تقوم بتوظيف متدربين للعمل على مشروعٍ ما دون إشراف
مباشر.&lt;/p&gt;

&lt;p&gt;هذا المقال من واقع تجربتي العملية كمبرمج متدرب وكموظف. في الختام، المقال لا يقصد
شركة أو جهة بعينها، لكن الهدف منه وصف الحالة العامة المنتشرة في سوق البرمجيات
المصري.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/interning-in-egypt</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/interning-in-egypt</guid>
        
        <category>CS,</category>
        
        <category>Career,</category>
        
        <category>Internships</category>
        
        
        <category>Career</category>
        
      </item>
    
      <item>
        <title>Go for Competitive Programming</title>
        <description>&lt;p&gt;I first started writing Go during my time at UserTalk and have been using it
occasionaly since then because of its minimal syntax and standard library that
makes it a great language for writing almost any kind of software.&lt;/p&gt;

&lt;p&gt;Whenever I’m solving a competitive programming problem, I usually use C or C++
(whichever works best) to write the solution mainly because they are both
supported by almost all online judges and programming contests.&lt;/p&gt;

&lt;p&gt;Moreover, I was recently solving a problem on HackerRank and decided to write
the solution in C. The problem was quite easy but my solution always resulted
in a Segmentation Fault. Here’s a
&lt;a href=&quot;https://www.hackerrank.com/challenges/dynamic-array&quot;&gt;link&lt;/a&gt; to the problem if
you’re asking.
Luckily, I found out that I could submit the solution in Go, besides other
languages. So after +30 failed submissions (and out of frustration), I decided
to translate the C code to Go and boom, it passed all the test cases
flawlessly.  Go being garbage collected here, unlike C, makes it really easy to
focus on the solution and leave the task of memory management to the compiler.
Also, by having a strong standard library, the number of lines in the Go solution
is about half the number of lines in the C code.  Here’s a screenshot comparing
the two:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/go_for_cp-go_vs_c.png&quot; alt=&quot;Go vs. C screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go is minimal, concise, has a huge standard library, performs fast, backed by a
company like Google, has a growing community, and many online judges already
support it on their platforms and even though writing Go might require some
mind shift, a programmer can easily adjust themselves to that. These all the
reasons why I think it’s time for the ACM organization to consider Go as an
official language in the coming ICPC contests.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Sep 2017 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/go-for-cp</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/go-for-cp</guid>
        
        <category>Go,</category>
        
        <category>CP</category>
        
        
        <category>CP</category>
        
      </item>
    
      <item>
        <title>I Took Some Time to Create a Time Tracker</title>
        <description>&lt;p&gt;Im my quest of finding the ultimate productivity framework, I came across the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot; target=&quot;blank&quot;&gt;Pomodoro technique&lt;/a&gt;.
The basic idea behind it is to divide the work into equal chunks of time and
take a small break after each set. Usually it goes by working for 25 minutes in
complete concentration, taking a 5 minutes break and repeating the cycle until
the the task is completed.&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;It was the beginning of January this year when I decided to use the Pomodoro
technique to help me study for my finals. However, I could not find a web app
with a simple interface to use and thought it would be a good practice to build
it. I remeber it was right before the start of my odd semester final exams when
I started the project. As you know, finals is the time in which you can achieve
all what you wanted since the beginning of the semester, except studying of
course. Having built the app, it actually came of a great help. In fact I’m
using it right now as I’m writing this post (took me 5 sets to finish it).&lt;/p&gt;

&lt;p&gt;I kept in mind to keep the interface as simple as possible. The home page is
where you can start/stop the timer. There’s also a tracker page where you can
keep track of your sets.
I named it &lt;a href=&quot;http://panadoura.herokuapp.com/&quot; target=&quot;blank&quot;&gt;Panadoura&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/cherrytomato_screenshot.png&quot; alt=&quot;CherryTomato home&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;It started out with simple CoffeeScript file that runs and stops the timer and
served it in a Sinatra app. Then added some more stuff along the way. Besides
being a simple web app, the reason why I started with Sinatra was that I wanted
to get out from under Rails umbrella and try some other alternatives for the
web in Ruby. Of course, this comes with a lot of tradeoffs. Rails embraces the
convention over configuration philosophy which makes it super easy to setup new
applications and get to the work quickly. To try something different, I had to
have some kind of a shift in mind. I also needed to write some bootstrapping
scripts in order to glue the different components of my app together.&lt;/p&gt;

&lt;p&gt;The architecture is a bit different from the normal MVC Rails-y way. It
resembles the structure of a normal Ruby gem where the main logic in the app
lives under &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; directory whereas the application routes and views are in
&lt;code class=&quot;highlighter-rouge&quot;&gt;app/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The application layer consists of a single file that defines all the routes to
the web app. It contains the logic that authorizes the users from Twitter and
routes them to the home page. It calls two helper classes; one to load the
assets, and another to configure user sessions.&lt;/p&gt;

&lt;p&gt;For the persistence layer, I used &lt;a href=&quot;http://rom-rb.org/&quot; target=&quot;blank&quot;&gt;rom-rb&lt;/a&gt;
which philosophy is to decouple different responsibilities and distribute them
over many components/layers. I had to write a wrapper to load the database
settings and connect ROM to PostgreSQL. I also wrote a simple method to run the
migrations.&lt;/p&gt;

&lt;p&gt;Currently, I’m using Heroku experimental tier to host the app. The source code
is on
&lt;a href=&quot;https://github.com/aonemd/panadoura&quot; target=&quot;blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/panadoura</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/panadoura</guid>
        
        <category>time,</category>
        
        <category>management,</category>
        
        <category>pomodoro_technique</category>
        
        
        <category>Projects</category>
        
      </item>
    
      <item>
        <title>The One Year Old Bug</title>
        <description>&lt;p&gt;I’ve been revisiting my old repositories on GitHub recently to make sure they
are still relevant and to clean up the code. One of the projects I looked into
was &lt;a href=&quot;https://github.com/aonemd/margopher/&quot;&gt;margopher&lt;/a&gt; which I started back in
August 2015. I only removed some unused code, and updated the README page after
which I decided to follow the usage instructions just to make sure everything
was okay. This was when I found out that when I created and used a margopher
object one time, I could not use it any more. This because it kept a map of
states of its input at the object/struct initialization phase but never
reinitialized the map to reuse it. The solution was to move the initialization
of the map into the generation phase. This will make a new map everytime the
generation method is called.&lt;/p&gt;

&lt;p&gt;Although how trivial the solution is, and how simple finding the bug seems, I
ofen catch myself falling into the same trap, that is, I tend to overlook some
very minute details or rather edge cases that affect the bigger context. This
occurs specially in larger business projects where there usually are a lot of
edge cases that must be taken care of. These edge-case bugs may or may not be
found. An edge-case bug can go unseen for sometime until one of the QA team
finds about it or, worst case, a client will.&lt;/p&gt;

&lt;p&gt;One might think that writing a thorough test suite will, by default, detect
edge cases and hidden bugs. Well, this is partially true. Writing a complete
test suite that covers all your system needs fully documented features.
Requirements should be gathered before starting the implementation phase. This
might seem obvious, however, sometimes this isn’t the case. A client might come
with unclear requirements and the picture can only get clearer after some
prototyping or after the actual implementation. It’s true that with almost
always changing requirements in the business world, it can be quite difficult
to update and keep track of the requirements while actually implementing them
in code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t assume it,  prove it
&lt;cite&gt;The pragmatic programmer&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In essence, even if it is the job of the QA team to discover difficult-to-find
bugs, our responsibility as developers is to be fully aware about the
boundaries of the module we are working on.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Dec 2016 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/the-one-year-bug</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/the-one-year-bug</guid>
        
        <category>software_engineering,</category>
        
        <category>bugs</category>
        
        
        <category>Software Engineering</category>
        
      </item>
    
  </channel>
</rss>
