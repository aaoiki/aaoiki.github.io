<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aonemd</title>
    <description>Code and Language
</description>
    <link>https://aonemd.github.io/</link>
    <atom:link href="https://aonemd.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 27 May 2019 06:26:18 +0200</pubDate>
    <lastBuildDate>Mon, 27 May 2019 06:26:18 +0200</lastBuildDate>
    <generator>Jekyll v3.8.1</generator>
    
      <item>
        <title>Handy Keymaps in Vim</title>
        <description>&lt;p&gt;In my first two posts in this Vim series, I talked about &lt;a href=&quot;/blog/finding-things-in-vim&quot;&gt;finding files in
Vim&lt;/a&gt; and &lt;a href=&quot;/blog/minimal-vim&quot;&gt;having a minimal Vim
setup&lt;/a&gt;.  In this post I’m going to go over some useful
keymaps and functions you can use in Vim to boost your text editing abilities
and to master the Vim wizardry. I will only cover keymaps that don’t include
external plugins except for section #2 which will be about generating tags (I
couldn’t leave this part without covering it).&lt;/p&gt;

&lt;h3 id=&quot;essentials&quot;&gt;Essentials&lt;/h3&gt;

&lt;p&gt;First and foremost, the leader key is a special key in Vim that with other
combinations of keys can be mapped to perform certain functions. By default,
Vim maps the leader to the backslash key. I see many Vimmers (yes, this is a
word now) set it to the comma key. I, however, like to set it to the space bar;
it’s a big key in the middle of the keyboard so it’s really easy to find it and
use it with other key combinations:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;The Leader&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; mapleader&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;\&amp;lt;Space&amp;gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we’ve mapped the leader key, we can start mapping other keys to
functions.&lt;/p&gt;

&lt;p&gt;The first function in our list will be the save or the write buffer function.
Instead of using the shift and the semi-colon keys to generate a colon, typing
w, and then hitting Enter to save the current buffer, I found out that hitting
the space bar with the letter w is faster and easier to use specially for a
function that is used many times in the course of writing. This is just two key
presses instead of four:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;save current buffer&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second function is for replacing the current-under-cursor word with another
pattern/word. Simply, it copies the word under cursor and inserts it into a
substitution command call. You only need to type the replacement pattern and
press the Enter key to actually replace the text:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;replace the word under cursor&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;* &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;%s&lt;span class=&quot;sr&quot;&gt;/\&amp;lt;&amp;lt;c-r&amp;gt;&amp;lt;c-w&amp;gt;\&amp;gt;/&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next is a function that is found in many modern text editors, that is, auto
closing tags. Although sometimes it can get annoying when you don’t need it,
it’s handy most of the time when writing function definitions, if statements,
and other control structures in most popular languages. Each of the following
keymaps simply inserts a closing tag and puts the cursor in between the opening
and the closing tags:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;autoclose tags&lt;/span&gt;
inoremap &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
inoremap &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&amp;lt;&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
inoremap &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&amp;lt;&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
inoremap &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&quot;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Left&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I feel like this section got really long so here’s one last function. To move a
line up or down in Vim, normally you’d delete it and paste it into the desired
target line. These keymaps make it possible to move lines up or down using the
leader key + k or j (for up and down):&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;move lines around&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;==&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;==&lt;/span&gt;
xnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gv&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;gv
xnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;'&lt;span class=&quot;p&quot;&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;gv&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;gv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generating-tags&quot;&gt;Generating Tags&lt;/h3&gt;

&lt;p&gt;As I mentioned before, this is the only section that includes an external
dependency. &lt;a href=&quot;https://ctags.io/&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Universal Ctags&lt;/em&gt;&lt;/a&gt; is a tool
that analyzes the codebase and generates an index file of tags. This index of
tags can be used to jump between the definitions of functions, classes, and
other identifiers while navigating the code. You can jump to a tag definition
using the &lt;code class=&quot;highlighter-rouge&quot;&gt;:tag IDENTIFIER&lt;/code&gt; command in Vim.&lt;/p&gt;

&lt;p&gt;Since I’m trying not to switch context and leave the text editor as much as
possible, I made a keymap that generates the list of tags for me without
leaving Vim. The next block of code tells Vim where to look for tag definitions
by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;set tags&lt;/code&gt; entry and maps &lt;code class=&quot;highlighter-rouge&quot;&gt;leader + ct&lt;/code&gt; to generate the tag
list:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=.&lt;/span&gt;git/&lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ct &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;ctags &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Rf &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git/&lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;tag&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;relative &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;extra&lt;span class=&quot;p&quot;&gt;=+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;exclude&lt;span class=&quot;p&quot;&gt;=.&lt;/span&gt;git&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;pkg &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;languages&lt;span class=&quot;p&quot;&gt;=-&lt;/span&gt;sql&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also simplify the command above by moving the flags to a &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ctags&lt;/code&gt;
file (each flag alone on a single line) and only having this in your .vimrc:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ct &lt;span class=&quot;p&quot;&gt;:!&lt;/span&gt;ctags &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Rf &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;git/&lt;span class=&quot;k&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;manipulating-buffers&quot;&gt;Manipulating Buffers&lt;/h3&gt;

&lt;p&gt;Vim has this notion of buffers. Simply put, &lt;a href=&quot;https://sanctum.geek.nz/arabesque/buffers-windows-tabs/&quot; target=&quot;blank&quot;&gt;a buffer is an open
file&lt;/a&gt;.
A window in Vim is a way to view an open buffer.  A tab, on the other hand, is
a collection of windows. To save you (and myself) the pain, use buffers and
treat them the way you treat tabs in other text editors. You can read more
about buffers versus tabs and the best way to use them
&lt;a href=&quot;https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, I have a few keymaps that make it easier to manipulate and deal with
buffers. For example, to open and close buffers, I have in my .vimrc this block
of code:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;create a new buffer (save it with :w ./path/to/FILENAME)&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;B &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;close current buffer&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;bq &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;bar&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; #&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;close all open buffers&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ba&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bufdo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following is for switching between open buffers:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;Tab to switch to next open buffer&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Tab&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bnext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;Shift + Tab to switch to previous open buffer&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;S&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;Tab&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bprevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;leader key twice to cycle between last two open buffers&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;^&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can install
&lt;a href=&quot;https://github.com/ap/vim-buftabline&quot; target=&quot;blank&quot;&gt;vim-buftabline&lt;/a&gt; to
visualize your open buffers and see how they are being switched by the keymaps
above.&lt;/p&gt;

&lt;h3 id=&quot;splits-splits-splits&quot;&gt;Splits, Splits, Splits!&lt;/h3&gt;

&lt;p&gt;Window splits are such an important element of my text editing since sometimes
I need to keep track on multiple files at the same time. Vim provides some
shortcuts for creating and moving around splits, however; they can be a little
unintuitive for quick navigation between splits.&lt;/p&gt;

&lt;p&gt;To fix this, I have had a small function in my Vim configuration for a long
time that makes my life a lot easier. The function is mapped to a set of
intuitive combination of keys, namely, the control key + any of the navigation
keys (h, j, k, l).&lt;/p&gt;

&lt;p&gt;What the function does is that it checks first if a split already exists in the
direction you want to move to. If it does, the function simply moves the focus
to that split. If there isn’t a split already, the function creates a new split
and moves the focus to that split. This function I took from someone some long
time ago. I can’t recall where I got it from, but all the credit is due to the
original author.&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;move to the split in the direction shown, or create a new split&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; WinMove&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; WinMove&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; WinMove&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'k'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; WinMove&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; WinMove&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;curwin &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; winnr&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  exec &lt;span class=&quot;s2&quot;&gt;&quot;wincmd &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a:key&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;curwin &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; winnr&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a:key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[jk]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;wincmd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;wincmd&lt;/span&gt; s
    &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
    exec &lt;span class=&quot;s2&quot;&gt;&quot;wincmd &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a:key&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vim is a powerful text editor with great capabilities. You can map multiple
keys to perform different functionalities in Vim that makes your text editing
easier.&lt;/p&gt;

&lt;p&gt;All the code in this post is taken from my .vimrc file in my dotfiles
repository on GitHub. You can check it out
&lt;a href=&quot;https://github.com/aonemd/aaku&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 May 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/handy-keymaps-in-vim</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/handy-keymaps-in-vim</guid>
        
        <category>vim,</category>
        
        <category>keymaps,</category>
        
        <category>software,</category>
        
        <category>development,</category>
        
        <category>tools</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>Minimal Vim</title>
        <description>&lt;p&gt;In my previous &lt;a href=&quot;/blog/finding-things-in-vim&quot;&gt;blog post&lt;/a&gt;, I wrote about
searching files in Vim. In the next five sections, I will go over creating a
minimal Vim setup with a few dependencies. Although minimal does not
necessarily mean faster, I’ll keep in mind making Vim perform and open as fast
as possible.&lt;/p&gt;

&lt;h3 id=&quot;general-settings&quot;&gt;General Settings&lt;/h3&gt;

&lt;p&gt;There are a few must-have settings that are necessary for modern text editing.
Actually, while writing this blog post, I revisited my .vimrc file and removed
some of the unneeded settings. I’m currently experimenting Vim without all the
options I think I don’t need right now.  I’m also trying to comment my settings
as much as possible.&lt;/p&gt;

&lt;p&gt;There are many settings frameworks or distributions such as
&lt;a href=&quot;https://github.com/tpope/vim-sensible&quot; target=&quot;blank&quot;&gt;vim-sensible&lt;/a&gt; or
&lt;a href=&quot;https://github.com/SpaceVim/SpaceVim&quot; target=&quot;blank&quot;&gt;SpaceVim&lt;/a&gt; (although
they are completely different kinds of frameworks). Personally, I don’t like to
use these frameworks as a matter of fact since the need and the use case may
differ from one person to another and I prefer to tweak my configuration to my
own use case. Anyway, As a general rule I like to abide by, I tend to not put
any settings that I don’t understand in my .vimrc.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Try not to put settings you don’t understand in your .vimrc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the next block of code, there are some [somewhat opinionated] commented
settings that you may need to have in your configuration file (I recommend
reading Vim’s manual for each entry before using it):&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;more characters will be sent to the screen for redrawing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; ttyfast
&lt;span class=&quot;c&quot;&gt;&quot;time waited for key press(es) to complete. It makes for a faster key response&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; ttimeout
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; ttimeoutlen&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;make backspace behave properly in insert mode&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; backspace&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;indent&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;eol&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;start&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;display incomplete commands&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; showcmd
&lt;span class=&quot;c&quot;&gt;&quot;a better menu in command mode&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; wildmenu
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; wildmode&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;longest&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;full&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;full
&lt;span class=&quot;c&quot;&gt;&quot;hide buffers instead of closing them even if they contain unwritten changes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; hidden
&lt;span class=&quot;c&quot;&gt;&quot;disable soft wrap for lines&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; nowrap
&lt;span class=&quot;c&quot;&gt;&quot;always display the status line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; laststatus&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;display line numbers on the left side&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;number&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;highlight current line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; cursorline
&lt;span class=&quot;c&quot;&gt;&quot;display text width column&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; colorcolumn&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;81&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;new splits will be at the bottom or to the right side of the screen&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; splitbelow
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; splitright

&lt;span class=&quot;c&quot;&gt;&quot;always set autoindenting on&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; autoindent

&lt;span class=&quot;c&quot;&gt;&quot;incremental search&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; incsearch
&lt;span class=&quot;c&quot;&gt;&quot;highlight search&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; hlsearch
&lt;span class=&quot;c&quot;&gt;&quot;searches are case insensitive unless they contain at least one capital letter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; ignorecase
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; smartcase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;p&gt;Even though Vim is a powerful text editor, it cannot survive the competition
with other modern text editors and IDEs without plugins. Luckily, Vim is
powerful enough to be
&lt;a href=&quot;https://www.youtube.com/watch?v=ES1L2SPgIDI&quot; target=&quot;blank&quot;&gt;extensible&lt;/a&gt; in
many ways. This enabled the Vim plugin ecosystem to thrive and grow. To manage
plugins, I use
&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot; target=&quot;blank&quot;&gt;vim-plug&lt;/a&gt; which is
easier to maintain (since it’s only a single file), runs plugin updates
asynchronously, and it’s faster to load compared to other plugin managers.&lt;/p&gt;

&lt;p&gt;Regardless of the plugin manager, I always try to avoid using plugins as much
as possible. This is mainly because more plugins means more startup time for
Vim. More plugins also means more dependencies to manage.&lt;/p&gt;

&lt;p&gt;Using
&lt;a href=&quot;https://github.com/hyiltiz/vim-plugins-profile&quot; target=&quot;blank&quot;&gt;vim-plugins-profile&lt;/a&gt;,
the next screenshot shows the top 10 plugins that are taking most of Vim’s
startup time for me:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/minimal_vim-profile.png&quot;&gt;&lt;img src=&quot;/public/images/minimal_vim-profile.png&quot; alt=&quot;Vim plugins profiled&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After profiling Vim’s startup time, I replaced
&lt;a href=&quot;https://github.com/tomtom/tcomment_vim&quot; target=&quot;blank&quot;&gt;tcomment_vim&lt;/a&gt; with
&lt;a href=&quot;https://github.com/tpope/vim-commentary&quot; target=&quot;blank&quot;&gt;vim-commentary&lt;/a&gt; and
it actually made a noticeable difference on the startup time of Vim.&lt;/p&gt;

&lt;p&gt;By the way, Vim actually can profile its startup time and dump it to a file
with &lt;code class=&quot;highlighter-rouge&quot;&gt;vim --startuptime vim.log&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;

&lt;p&gt;Functions are also an integral part of any .vimrc file to complement the work
of plugins. However, functions like any other pіece of code, can slow you down
sometimes. Currently, I only have two functions in my Vim configuration file.
One function for creating and moving between split windows and another function
for &lt;a href=&quot;https://github.com/junegunn/goyo.vim&quot; target=&quot;blank&quot;&gt;Goyo&lt;/a&gt;’s leave
event.&lt;/p&gt;

&lt;p&gt;You can profile your functions and check which part of each function that may
slow Vim down while executing it. As I mentioned above, I only have a few
functions in my ~/.vimrc file. So, I profiled them and got the result using
Vim’s profile command. Here’s an example on how to profile the function
&lt;a href=&quot;https://github.com/aonemd/aaku/blob/master/vim/vimrc#L143&quot; target=&quot;blank&quot;&gt;&lt;em&gt;WinMove(key)&lt;/em&gt;&lt;/a&gt;
using Vim’s profile command:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;cmd &lt;span class=&quot;s1&quot;&gt;'profile start vimrc.profile'&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;cmd &lt;span class=&quot;s1&quot;&gt;'profile! file ~/.vimrc'&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;call WinMove('j')&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And here’s an excerpt of the profiling result:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FUNCTION  WinMove&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    Defined&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;vimrc line &lt;span class=&quot;m&quot;&gt;181&lt;/span&gt;
Called &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; time
Total time&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;000384&lt;/span&gt;
 Self time&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;000081&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;status-line&quot;&gt;Status Line&lt;/h3&gt;

&lt;p&gt;IMHO, the Vim community has invested a lot of time and effort to make colorful
status lines with lots of weird symbols and many functionalities. Don’t get me
wrong, I love the aesthetics of a beautiful, colorful status line; however, I
kind of feel like it can be a bit distracting while writing. What I really
think is that the status line should not get in the way of the developer; it
should be a complementary tool not an essential one.&lt;/p&gt;

&lt;p&gt;For me, I’ve updated my status line to have only a few functions that I really
need while writing. It even differs from the stock status line that comes with
Vim. Here’s how I currently configure my status line:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;you need this to always display the status line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; laststatus&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;modifiedflag, charcount, filepercent, filepath&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; statusline&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;k&quot;&gt;m&lt;/span&gt;\ %&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;\ %P\ %&lt;span class=&quot;k&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And this is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/minimal_vim-statusline.png&quot;&gt;&lt;img src=&quot;/public/images/minimal_vim-statusline.png&quot; alt=&quot;Minimal statuline&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-explorer&quot;&gt;File Explorer&lt;/h3&gt;

&lt;p&gt;I see a lot of Vim users put the plugin
&lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot; target=&quot;blank&quot;&gt;&lt;em&gt;NERDTree&lt;/em&gt;&lt;/a&gt; in their
Vim configuration and many online tutorials and articles advice to install it.
In fact, when I was starting with Vim, I used to have it in my .vimrc as well.
However, after a while, I found out that Vim actually comes with a file
explorer called &lt;em&gt;netrw&lt;/em&gt; out of the box.&lt;/p&gt;

&lt;p&gt;To open netrw on the side (a vertical split) like NERDTree, you can run the
command &lt;code class=&quot;highlighter-rouge&quot;&gt;:Vexplore&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;:Sexplore&lt;/code&gt; to open it in a horizontal split window. As
with using Vim in general, the more you use it, the more you realize that you
know nothing about it. As of writing this post, I’ve learned more features that
I didn’t know existed in netrw. You can always learn about the commands and key
maps of netrw using &lt;code class=&quot;highlighter-rouge&quot;&gt;:h netrw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/minimal_vim-netrw.png&quot;&gt;&lt;img src=&quot;/public/images/minimal_vim-netrw.png&quot; alt=&quot;netrw preview&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like NERDTree, You can manipulate files and directories (browse, execute,
rename, delete, …) from inside netrw.  Moreover, you can configure it to
behave exactly like NERDTree. Here are the relevant settings in my .vimrc:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:netrw_banner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:netrw_winsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:netrw_liststyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:netrw_localrmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rm -r'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;toggle netrw on the left side of the editor&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Lexplore&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My .vimrc file is now exactly 149 lines after I removed unused plugins and
redundant settings. You can find my full .vimrc file in my
&lt;a href=&quot;/blog/the-dotfiles&quot;&gt;dotfiles&lt;/a&gt; repository &lt;a href=&quot;https://github.com/aonemd/aaku&quot; target=&quot;blank&quot;&gt;on
GitHub&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/minimal-vim</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/minimal-vim</guid>
        
        <category>minimal,</category>
        
        <category>vim,</category>
        
        <category>software,</category>
        
        <category>development,</category>
        
        <category>tools</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>Action Cable: Rails 5 Most Anticipated Feature</title>
        <description>&lt;p&gt;Action Cable is a simple framework that introduces WebSocket support to
Rails apps. It provides a server-side as well as a client-side integration
with WebSocket…&lt;/p&gt;

&lt;p&gt;This post was originally posted on &lt;a href=&quot;https://robustastudio.com&quot; target=&quot;blank&quot;&gt;Robusta Studio&lt;/a&gt;’s
blog on 6 Septemper, 2016. To read the full article, please visit
&lt;a href=&quot;https://blog.robustastudio.com/development-utilities/action-cable-rails-5-anticipated-feature/&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/intro-to-actioncable</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/intro-to-actioncable</guid>
        
        <category>Ruby,</category>
        
        <category>Rails,</category>
        
        <category>ActionCable</category>
        
        
        <category>Ruby on Rails</category>
        
      </item>
    
      <item>
        <title>Finding Things in Vim</title>
        <description>&lt;p&gt;Vim is a very competent text editor and although it comes with tools to find
files, these tools feel a little primitive for modern text editing and a bit
slow sometimes. In this post, I will go over different search tools and
demonstrate how I replaced two different plugins with only a single plugin that
rules them all.&lt;/p&gt;

&lt;h3 id=&quot;finding-files-by-content&quot;&gt;Finding Files by Content&lt;/h3&gt;

&lt;p&gt;To search files, Vim has a &lt;code class=&quot;highlighter-rouge&quot;&gt;:vimgrep&lt;/code&gt; command that finds files that contain a
certain pattern. It populates a quickfix list with all the matches. You can
cycle between the matches using &lt;code class=&quot;highlighter-rouge&quot;&gt;:cnext&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:cprev&lt;/code&gt;, or open the quickfix
list in a split window using &lt;code class=&quot;highlighter-rouge&quot;&gt;:copen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how you can find files and have the search result open in a quickfix
list so you can scroll up and down the result using the keyboard:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vimgrep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;pattern&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vim also has a &lt;code class=&quot;highlighter-rouge&quot;&gt;:grep&lt;/code&gt; command that works similarly to &lt;code class=&quot;highlighter-rouge&quot;&gt;:vimgrep&lt;/code&gt; but,
according to the documentation (try &lt;code class=&quot;highlighter-rouge&quot;&gt;:h grep&lt;/code&gt;), it relies on the external
&lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command on your system. &lt;code class=&quot;highlighter-rouge&quot;&gt;:vimgrep&lt;/code&gt; loads the files in memory so it might
be slower than &lt;code class=&quot;highlighter-rouge&quot;&gt;:grep&lt;/code&gt;. Just like &lt;code class=&quot;highlighter-rouge&quot;&gt;:vimgrep&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:grep&lt;/code&gt; will populate a quickfix
list and will not open a quickfix list with the results by default. Here’s how
to use it in the command mode:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;pattern&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more convenience, and much faster search, I have been using a tool as a
replacement for grep called &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Ag&lt;/em&gt;, the silver
searcher&lt;/a&gt; and a
Vim interface for it through
&lt;a href=&quot;https://github.com/rking/ag.vim&quot; target=&quot;blank&quot;&gt;&lt;em&gt;ag.vim&lt;/em&gt;&lt;/a&gt; (which has been
unmaintained for a while now). &lt;em&gt;ag.vim&lt;/em&gt; opens the results in a quickfix list by
default and you can navigate and choose which file to open using the keyboard
just like with &lt;code class=&quot;highlighter-rouge&quot;&gt;:vimgrep&lt;/code&gt;. &lt;em&gt;ag.vim&lt;/em&gt;, however, adds some &lt;a href=&quot;https://github.com/rking/ag.vim#keyboard-shortcuts&quot; target=&quot;blank&quot;&gt;nice key
maps&lt;/a&gt; for
better navigation of the results. This is my configuration for &lt;em&gt;ag.vim&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;search from the project root instead of cwd&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ag_working_path_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;start a search query by pressing \&lt;/span&gt;
nnoremap \  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Ag&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;space&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search for word under cursor by pressing |&lt;/span&gt;
nnoremap \&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Ag&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\b&amp;lt;C-R&amp;gt;&amp;lt;C-W&amp;gt;\b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s worth noting that it’s possible to make &lt;code class=&quot;highlighter-rouge&quot;&gt;:grep&lt;/code&gt; use &lt;em&gt;Ag&lt;/em&gt; by default instead
of relying on the default &lt;em&gt;grep&lt;/em&gt; program, and thus, having much faster search
results while keeping the same interface/command that Vim provides out of the
box:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; executable&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; grepprg&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;ag\ &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;nogroup\ &lt;span class=&quot;p&quot;&gt;--&lt;/span&gt;nocolor
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;call :grep normally&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;finding-files-by-name&quot;&gt;Finding Files by Name&lt;/h3&gt;

&lt;p&gt;For finding files by searching for their names, I’ve been using a great plugin
called &lt;a href=&quot;https://github.com/ctrlpvim/ctrlp.vim&quot; target=&quot;blank&quot;&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt;&lt;/a&gt;.
It is a fuzzy file searcher written in pure Vimscript. You only need to type
some parts of the name of the file you’re searching for, and you’ll get back a
list of the best matches. It can search files by file name, by current open
buffers, by generated tags, or by line content. My setup for &lt;em&gt;ctrlp.vim&lt;/em&gt; looks
like this:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; executable&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ag'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ctrlp_user_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ag %s -l --nocolor --hidden -g &quot;&quot;'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ctrlp_use_caching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;clear ctrlp.vim key maps&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:ctrlp_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search project files&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;CtrlP&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search project files by lines of code&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;CtrlPLine&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search project files by tags (requirs ctags to be installed)&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;CtrlPTag&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search all open files/buffers&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;CtrlPBuffer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt; has served me very well for the past couple of years. However, it
can get really slow while indexing files under large directories. For example,
searching files in my home directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/&lt;/code&gt;, renders &lt;em&gt;ctrlp.vim&lt;/em&gt; almost useless
as it takes some time to index each file.&lt;/p&gt;

&lt;h3 id=&quot;enter-fzf&quot;&gt;Enter fzf&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/fzf&quot; target=&quot;blank&quot;&gt;&lt;em&gt;fzf&lt;/em&gt;&lt;/a&gt; is a very fast
command-line fuzzy finder written in Go. Despite its increasing popularity, I
have tried to avoid using it for as long as possible since I like keeping my
dependencies minimal and prefer to use pure Vimscript plugins to having to
install any external dependencies. However, I had to install it since it’s a
dependency for this really cool command-line file manager,
&lt;a href=&quot;https://github.com/mananapr/cfiles&quot; target=&quot;blank&quot;&gt;&lt;em&gt;cfiles&lt;/em&gt;&lt;/a&gt;. So I decided I’d
give it a try anyway. I was mind blown!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/finding_files_in_vim-commit.png&quot; alt=&quot;aaku git commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not only can you fuzzy search for your files in the terminal, &lt;em&gt;fzf&lt;/em&gt; also has a
counterpart Vim plugin called
&lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot; target=&quot;blank&quot;&gt;&lt;em&gt;fzf.vim&lt;/em&gt;&lt;/a&gt; which is a
complementary interface to &lt;em&gt;fzf&lt;/em&gt; in Vim with so many awesome features.  One of
the great features it provides is that it comes with an interface for popular
search tools such as Ag and
&lt;a href=&quot;https://github.com/BurntSushi/ripgrep&quot; target=&quot;blank&quot;&gt;&lt;em&gt;ripgrep&lt;/em&gt;&lt;/a&gt; and you can
fuzzy search the search results! So now I could remove the &lt;em&gt;ag.vim&lt;/em&gt; plugin and
replace &lt;em&gt;ctrlp.vim&lt;/em&gt; with only &lt;em&gt;fzf&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my current setup for finding files in Vim:&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&quot;search project files&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;FZF&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search project files by lines of code&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Lines&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search project files by tags (requirs ctags to be installed)&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Tags&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search all open files/buffers&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Buffers&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&quot;start a search query by pressing \&lt;/span&gt;
nnoremap \  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Ag&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;space&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&quot;search for word under cursor by pressing |&lt;/span&gt;
nnoremap \&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;Ag &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;W&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You need to setup fzf’s default find command by setting an env variable in your
shell config:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ag -l --nogroup  --nocolor --hidden -g &quot;&quot;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The four key maps above are all on one row in the keyboard so it’s much easier
to reach out to each of them. Besides, I set my leader to the space bar, so
it’s even better.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fzf.vim&lt;/em&gt; also provides more useful commands such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:GFiles?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:Commits&lt;/code&gt;
for Git users. You can learn more about its commands
&lt;a href=&quot;https://github.com/junegunn/fzf.vim#commands&quot; target=&quot;blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find my vimrc in my &lt;a href=&quot;/blog/the-dotfiles&quot;&gt;dotfiles&lt;/a&gt; repository &lt;a href=&quot;https://github.com/aonemd/aaku&quot; target=&quot;blank&quot;&gt;on
GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 May 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/finding-things-in-vim</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/finding-things-in-vim</guid>
        
        <category>vim,</category>
        
        <category>fzf,</category>
        
        <category>ctrlp,</category>
        
        <category>fuzzy,</category>
        
        <category>ag,</category>
        
        <category>search</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>Extracting Text From Images Using Ruby</title>
        <description>&lt;p&gt;&lt;strong&gt;tldr;&lt;/strong&gt; &lt;a href=&quot;#the-script&quot;&gt;show me the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’m a great hoarder of memes. Seriously, I have a huge folder full of memes and
GIFs. I collect my memes usually whenever I’m watching a movie or a series by
taking a screenshot of the scene with subtitles enabled. The issue is, the
program I use to take screenshots, names each new file by the date and time the
screenshot was taken. I have a 1200 screenshot folder each named by date and
time. So finding a certain screenshot/meme is too much a hassle.&lt;/p&gt;

&lt;p&gt;I thus wanted a better way to go through my collection of memes. My goal was to
rename each screenshot file to the subtitles it contains. I have, in fact, been
procrastinating this task for a long time now and the mid-year recess was the
perfect time to start a small project.&lt;/p&gt;

&lt;p&gt;To read the subtitles out of my images, Google search led me to
&lt;a href=&quot;https://github.com/tesseract-ocr/tesseract&quot; target=&quot;blank&quot;&gt;Tesseract&lt;/a&gt;.
Tesseract is a tool that recognizes the text in images using Optical Character
Recognition (OCR). I started first experimenting with Tesseract and its
wrapper, &lt;a href=&quot;https://github.com/madmaze/pytesseract&quot; target=&quot;blank&quot;&gt;pytesseract&lt;/a&gt;
in Python and used OpenCV for image processing and it worked perfectly right
from the start!&lt;/p&gt;

&lt;p&gt;I started with a small Ruby script to read my images, process, and recognize
the text in each one of them. However, unfortunately, Ruby lacks in good
tooling for computer vision or image processing. I couldn’t find a good OpenCV
wrapper in Ruby except for
&lt;a href=&quot;https://github.com/ruby-opencv/ruby-opencv&quot; target=&quot;blank&quot;&gt;ruby-opencv&lt;/a&gt;
which is quite outdated and only supports OpenCV v2 (&lt;a href=&quot;https://opencv.org/releases.html&quot; target=&quot;blank&quot;&gt;Version 4 of
OpenCV&lt;/a&gt; is now released by
the way).&lt;/p&gt;

&lt;p&gt;After some tinkering with ImageMagick and its Ruby wrapper,
&lt;a href=&quot;https://github.com/minimagick/minimagick&quot; target=&quot;blank&quot;&gt;MiniMagick&lt;/a&gt;, I
could finally achieve the same results I got in Python. So, in the few next
sections, I’ll demonstrate the steps the script goes through to recognize the
subtitles in each screenshot.&lt;/p&gt;

&lt;h2 id=&quot;the-script&quot;&gt;The Script&lt;/h2&gt;

&lt;p&gt;Next is a simpler version of the script I actually used. The full script
including the part where I process the output text and rename each file to the
new name is a gist on
&lt;a href=&quot;https://gist.github.com/aonemd/7bb3c4760d9e47a9ce8e270198cb40a0#file-subtitle_extractor-rb&quot; target=&quot;blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first part of the script just loops through each file (a 1920x1080 PNG
image file) in my source directory and reads it as a grayscale image.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pathname'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'open3'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mini_magick'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/src/dir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/tmp/dir'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;realpath&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TMP_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiniMagick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;colorspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Gray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take the following screenshot as an example and feed it to the script.
First, we load it normally:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example.png&quot; alt=&quot;Example
screenshot&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then we convert it to grayscale. This is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example_grayscale.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example_grayscale.png&quot; alt=&quot;Example screenshot
grayscale&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cleaning-the-image&quot;&gt;Cleaning The Image&lt;/h3&gt;

&lt;p&gt;The second part is where all the image processing happens. Basically, the
script negates the image to black and white to remove all the noise. This
improves the ability of Tesseract to read the text in the image.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MiniMagick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;007%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# I couldn't prevent myself&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;negate&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;magick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is what image looks like after processing. You can see how almost all the
details in the image are removed except for the vivid subtitles. This file is
stored under the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP_DIR&lt;/code&gt; we defined earlier in the script. You can of course
delete the &lt;code class=&quot;highlighter-rouge&quot;&gt;TMP_DIR&lt;/code&gt; safely or instrument the script to do it for you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/extracting_text_example_negative.png&quot;&gt;&lt;img src=&quot;/public/images/extracting_text_example_negative.png&quot; alt=&quot;Example screenshot negative&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;recognizing-the-text&quot;&gt;Recognizing The Text&lt;/h3&gt;

&lt;p&gt;In this part, we call Tesseract command on our image and get back our
recognized text. We could have used a Ruby wrapper around Tesseract, and
&lt;a href=&quot;https://github.com/dannnylo/rtesseract&quot; target=&quot;blank&quot;&gt;rtesseract&lt;/a&gt; is a
great wrapper, however; we only need to call a simple command here so we don’t
need all the features the wrapper provides.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Open3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capture3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tesseract &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; stdout -l eng --oem 0 --psm 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this is the final output of our script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Oh, man. In my next life
I'm coming back as a toilet brush.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, I first started with a &lt;a href=&quot;https://gist.github.com/aonemd/a4895dbdbdf9b7a0bc47bcb051aae5b8&quot; target=&quot;blank&quot;&gt;Python
script&lt;/a&gt;
to test Tesseract.  I did a small time comparison between the Ruby version and
the Python version after some &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/afbq1z/extracting_text_from_images_using_ruby/edxnxzh/&quot; target=&quot;blank&quot;&gt;great
discussions&lt;/a&gt;
on &lt;a href=&quot;https://reddit.com/r/ruby&quot; target=&quot;blank&quot;&gt;/r/ruby&lt;/a&gt;. Unfortunately, the
Python version is much faster. I believe that most of the overhead in the Ruby
version comes from using ImageMagick for image processing. Here’s the
comparison of running both scripts on a sample of 525 1920x1080 PNG files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby ocr.rb  864.69s user 62.12s system 136% cpu 11:19.01 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;vs.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 ocr.py  277.92s user 31.38s system 141% cpu 3:37.85 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a href=&quot;https://www.reddit.com/r/ruby/comments/afbq1z/extracting_text_from_images_using_ruby/edzdwmu/&quot; target=&quot;blank&quot;&gt;/u/janko-m on
Reddit&lt;/a&gt;
pointed me to &lt;a href=&quot;https://github.com/libvips/libvips&quot;&gt;libvips&lt;/a&gt; and I actually
replaced ImageMagick with libvips. The script is also &lt;a href=&quot;https://gist.github.com/aonemd/7bb3c4760d9e47a9ce8e270198cb40a0#file-subtitle_extractor_optimized-rb&quot; target=&quot;blank&quot;&gt;on
GitHub&lt;/a&gt;.
The runtime became 3 times faster than what it used to be and, in fact,
outperformed the Python version. Here’s the output of the time command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby ocr.rb  234.74s user 35.64s system 120% cpu 3:45.17 total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;accuracy&quot;&gt;Accuracy&lt;/h3&gt;

&lt;p&gt;In the end, the text in 93% of my screenshots was recognized almost correctly
(with some gibberish noise in some files).  I filtered out the screenshots that
don’t contain any subtitles before running the script. This means that only 7%
of my screenshots were not recognized correctly or were recognized as empty
text.  &lt;a href=&quot;https://github.com/tesseract-ocr/tesseract/wiki/ImproveQuality&quot; target=&quot;blank&quot;&gt;Tesseract
wiki&lt;/a&gt;
provides some tips to improve text recognition accuracy mainly, they are all
about processing the source image before feeding it to Tesseract.&lt;/p&gt;

&lt;h3 id=&quot;different-colors&quot;&gt;Different Colors&lt;/h3&gt;

&lt;p&gt;This issue occurred with screenshots that contained subtitles in colors
other than white. I have for example a screenshot with yellow subtitles that
wasn’t recognized by the original script. I had to use a lower threshold while
converting the image to a black-and-white binary image so that the subtitles
wouldn’t be filtered out as noise.&lt;/p&gt;

&lt;h3 id=&quot;duplicates&quot;&gt;Duplicates&lt;/h3&gt;

&lt;p&gt;This is not related to Tesseract itself or text recognition per se, but it’s
more about the script.  If there are more than one screenshot with the same
subtitles, one image file will overwrite the other. I don’t handle this case in
my script as of yet; I want to get rid of duplicates anyway.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jan 2019 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/extracting-text-from-images-using-ruby</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/extracting-text-from-images-using-ruby</guid>
        
        <category>Ruby,</category>
        
        <category>Computer_Vision,</category>
        
        <category>OCR,</category>
        
        <category>Image_Magick,</category>
        
        <category>Tesseract</category>
        
        
        <category>Computer Vision</category>
        
      </item>
    
      <item>
        <title>Making System Calls From Ruby</title>
        <description>&lt;p&gt;While I was reading about Linux system calls, I was curious about how to
perform them in Ruby specially that Ruby isn’t considered a “system”
programming language. However, It’s very possible to perform system calls using
Ruby. In this post, I’m going to demonstrate the different ways to make system
calls using Ruby. But first, let us define what system calls are. Simply put, a
system call is a way to enter the system kernel, execute an operation, and then
return from the kernel.&lt;/p&gt;

&lt;p&gt;In the following sections, I’ll demonstrate three [almost] different ways to
perform system calls from Ruby. All the code is tested on a 64-bit GNU/Linux
system. Although there are some notes about differences in other operating
systems, if you tested something on your operating system and want me to add it
here, please add a comment or send me a message.&lt;/p&gt;

&lt;h3 id=&quot;1-kernelsyscall&quot;&gt;1. Kernel.syscall&lt;/h3&gt;

&lt;p&gt;This first, and most straightforward way to perform a system call is by using
&lt;code class=&quot;highlighter-rouge&quot;&gt;Kernel.syscall&lt;/code&gt;. In fact, internally, Kernel.syscall calls the C function
&lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; directly. This is how it’s done:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syscall_arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_number&lt;/code&gt; is a unique number for each system operation and can be
obtained for 64-bit Linux systems from &lt;a href=&quot;https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl&quot; target=&quot;blank&quot;&gt;this
table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for example, to perform an exit system call with exit status 1, call the
following Ruby program:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and check the exit code in your shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: I’m using Ruby 2.6.0 without the &lt;code class=&quot;highlighter-rouge&quot;&gt;--jit&lt;/code&gt; option to run this example.
For Ruby versions prior to 2.6.0 on Linux, you might want to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_group&lt;/code&gt; system call (with syscall_number 231) instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; to
terminate all the threads the Ruby process is using otherwise, the Ruby
process will freeze waiting to terminate the remaining thread(s).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there’s a caveat here. &lt;a href=&quot;https://www.rubydoc.info/stdlib/core/Kernel#syscall-instance_method&quot; target=&quot;blank&quot;&gt;The Ruby
documentation&lt;/a&gt;
says that &lt;code class=&quot;highlighter-rouge&quot;&gt;Kernel.syscall&lt;/code&gt; isn’t safe nor it is portable. If you ran the last
program using the Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; command line option (for verbose), you’ll see the
following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;warning: We plan to remove a syscall function at future release. DL(Fiddle)
provides safer alternative.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, &lt;a href=&quot;https://github.com/ruby/fiddle&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Fiddle&lt;/em&gt;&lt;/a&gt; will be our
next alternative for making system calls in Ruby.&lt;/p&gt;

&lt;h3 id=&quot;2-fiddle&quot;&gt;2. Fiddle&lt;/h3&gt;

&lt;p&gt;Fiddle is a &lt;a href=&quot;https://sourceware.org/libffi/&quot; target=&quot;blank&quot;&gt;libffi&lt;/a&gt; wrapper
written for Ruby.  Luckily, it is already a part of Ruby’s standard library.
&lt;em&gt;libffi&lt;/em&gt; is a &lt;strong&gt;foreign function interface (FFI)&lt;/strong&gt; implementation that provides
a C interface for calling compiled code (functions, really) from your program
at runtime.&lt;/p&gt;

&lt;p&gt;The following program demonstrates how to use Fiddle to call a C function from
Ruby:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fiddle'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/lib/libc.so.6'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'syscall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                 &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fiddle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TYPE_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code calls the C function &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; to perform the exit system call.  In
addition to the name of the function, you have to pass in an array that
contains the types of each argument the syscall/function takes, and another
argument for the function return type, which is an integer number in this case.
For example, the exit syscall function takes two parameters; one for the exit
syscall itself, the number 60, and another for the exit status, which is 1
here.  Thus, we have an array of two integers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the path to &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; specified in the code will differ for other
operating systems. For MacOS for example, it should be set to
&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/libc.dylib&lt;/code&gt;. Please also note that I didn’t test it myself so it
might be a different value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check the exit code:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-ffi&quot;&gt;3. FFI&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ffi/ffi&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Ruby-ffi&lt;/em&gt;&lt;/a&gt; is an FFI
implementation in Ruby.  Other than making system calls, FFI makes it possible
to fully write C extensions without the need to write pure C code. By far, this
is the safest, most convenient method as it automatically locates the path to
the libc library without the need to specify it manually as in the case with
Fiddle above.&lt;/p&gt;

&lt;p&gt;The code that makes a system call looks like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ffi'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SyscallRunner&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ffi_lib&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FFI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LIBC&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attach_function&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;SyscallRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;syscall&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Again, you need to pass in an array that contains the types of each argument
the function takes, and another argument for the function return type.&lt;/p&gt;

&lt;p&gt;And again, check the exit status:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although Ruby might not be considered a system programming language, Ruby is
capable of going low level and performing system calls in more than one way.
All the methods delegate the system call  to C syscall function in a way or
another.  The most secure, most scalable method is using Ruby-ffi to invoke C
syscall function.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/making-system-calls-from-ruby</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/making-system-calls-from-ruby</guid>
        
        <category>Ruby,</category>
        
        <category>Linux,</category>
        
        <category>syscalls,</category>
        
        <category>ffi</category>
        
        
        <category>Systems</category>
        
      </item>
    
      <item>
        <title>When YAML Bit Me</title>
        <description>&lt;p&gt;This is the story of a bug I encountered about 3 years ago.  Basically, I had a
model &lt;code class=&quot;highlighter-rouge&quot;&gt;Book&lt;/code&gt; that contained a serialized object attribute called &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;BooksController&lt;/code&gt; initially contained this search query:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'info LIKE ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%ref: '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bug that surfaced at the time was that some books were not fetched when the
search query contained alpha-numeric reference numbers (those that contains
both digits and letters) as some reference numbers were pure digits and some
were a mix of digits and alphabetical characters.&lt;/p&gt;

&lt;p&gt;The main issue with the previous search query is that it assumes that the value
of &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; is always stored wrapped in single quotes, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;ref: '123'&lt;/code&gt; as in the
case with integer reference numbers, however; alpha-numeric reference numbers
were stored in the database without the single quotes!&lt;/p&gt;

&lt;p&gt;My initial solution was to provide two search queries for each type of
reference numbers because, at the time, I thought the issue was with the way
the object was stored in PostgreSQL. However, and after further investigation,
the problem turned out to be with YAML.&lt;/p&gt;

&lt;p&gt;As it turns out, the main issue was with how YAML (or Psych in Ruby) dumps
integers and strings differently. Checkout the following code snippet and see
for yourself:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'psych'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Psych&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'123'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;--- '123'\n&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## vs.&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Psych&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;--- hello\n&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not a bug in Psych. In fact, the same behavior is found in Python
implementation, PyYAML:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'123'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# =&amp;gt; &quot;'123'\n&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## vs.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# =&amp;gt; 'hello\n...\n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s weird to me why YAML doesn’t treat all strings equally and keep or remove
the quotes all together. This just adds up to the list of &lt;a href=&quot;https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html&quot; target=&quot;blank&quot;&gt;weird behavior of
YAML&lt;/a&gt;.
Although to be fair, it might be a way to differentiate between integers and
integers wrapped in quotes when they are dumped and reloaded (I’m not waging a
war on YAML, I swear).&lt;/p&gt;

&lt;p&gt;Eventually, to work around this issue, I had to explicitly convert
&lt;code class=&quot;highlighter-rouge&quot;&gt;params[:ref]&lt;/code&gt; to an integer iff it could be cast into an integer. This way, we
can write a single search query and remove the wrapping single quotes for all
types of reference numbers:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'info LIKE ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%ref: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it for now. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Dec 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/when-yaml-bit-me</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/when-yaml-bit-me</guid>
        
        <category>YAML,</category>
        
        <category>Rails,</category>
        
        <category>PostgreSQL,</category>
        
        <category>bugs</category>
        
        
        <category>Debugging</category>
        
      </item>
    
      <item>
        <title>Computer Science Is Not About Programming</title>
        <description>&lt;p&gt;This is not yet another war post about the difference between this and that. In
fact, what’s motivated me to write this post is a TA at my university who was
shaming students who graduate university without learning how to program
properly. This idea was intriguing to me as I thought to myself that computer
science is not about programming!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/hamada_helal_hamada_helal.jpg&quot; alt=&quot;Hamada Helal, the king of obvious&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, what I believe is that computer science is about computing. According
to Merriam-Webster, the definition of computer science is “a branch of science
that deals with the theory of computation or the design of computers”.  On the
other hand, programming is merely one way to do computation, supposedly, in a
short period of time using a big calculator that is a computer (I know, cell
phones exist!). Having computers do calculations for us is just an extra
privilege.&lt;/p&gt;

&lt;p&gt;More so, computations don’t have to be done on a computer. An A4 sheet of paper
and a pencil could be used as a computer, although this is much slower and many
times harder to follow and keep track of compared to a regular computer.  There
are indeed many ways to do computations without a programming language. A
theoretical model of computation is a model which describes how a set of
outputs are computed given a set of inputs. One of the most famous models of
computation is the &lt;a href=&quot;https://www.wikiwand.com/en/Turing_machine&quot; target=&quot;blank&quot;&gt;&lt;em&gt;Turing
machine&lt;/em&gt;&lt;/a&gt;. A
Turing machine is an abstract computer that has an infinite memory and can
sequentially traverse this memory as needed. It resembles a program which takes
an input and computes an output (in terms of accepting or rejecting the input)
but has access to an infinite memory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Computer science is about computing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have seen many students who were excellent students but were poor programmers
and that’s totally fine. Those students, if they want to, can pick up academia
and research for example, become computer scientists and excel at that.  In
contrast, I consider myself a fairly good programmer, however; I also consider
myself a not-so-good student. It doesn’t have to be a choice between either of
this or that; of course, this is not a general rule. One can be a good academic
and a good programmer at the same time.&lt;/p&gt;

&lt;p&gt;The thing about degrees is that computer science students expect that their
major should include more “programming” courses and they blame their degrees
for the lack of computer programming classes (I used to think that way when I
started my degree). However, what they are missing here is what computer
science is actually concerned with —namely, the theory behind computation.&lt;/p&gt;

&lt;p&gt;In conclusion, computer programming is only one form of doing computation.
Understanding the theory behind computation is different from writing programs
to do the computation.&lt;/p&gt;

&lt;h3 id=&quot;things-i-read-on-the-topic&quot;&gt;Things I read on the topic&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/is-it-computer-science-or-programming-c01383dacc9c&quot; target=&quot;blank&quot;&gt;Is It “Computer Science” or “Programming”?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/137103/whats-the-difference-between-computer-science-and-programming&quot; target=&quot;blank&quot;&gt;What’s the difference between computer science and programming?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/computer-science-is-not-about-programming</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/computer-science-is-not-about-programming</guid>
        
        <category>computer_science,</category>
        
        <category>programming,</category>
        
        <category>education</category>
        
        
        <category>Education</category>
        
      </item>
    
      <item>
        <title>How I Improved the Loading Speed of My Blog</title>
        <description>&lt;p&gt;In this post I’m going to demonstrate the steps I took in order to improve the
loading speed of my blog. First of all, this blog is generated by
&lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;blank&quot;&gt;Jekyll&lt;/a&gt;, the static site generator.  I
only build my static files and deploy them to GitHub pages. I use Webpack to
compile my assets and then I use Jekyll to build the whole blog.&lt;/p&gt;

&lt;p&gt;Around a year ago, I started on a mission to optimize the loading speed of my
blog after feeling that it was slow and had some rendering issues. The next two
screenshots demonstrate the difference in terms of loading time before and
after the optimization:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_old.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_old.png&quot; alt=&quot;Old Blog
Loading&quot; /&gt;&lt;/a&gt;
« old blog loading in 3.56s in Chrome developer tools »&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/images/blog_performance_new.png&quot;&gt;&lt;img src=&quot;/public/images/blog_performance_new.png&quot; alt=&quot;New Blog
Loading&quot; /&gt;&lt;/a&gt;
« new blog loading in 600ms in chrome developer tools »&lt;/p&gt;

&lt;p&gt;In the next few points, I will list the steps I took to make my blog load
faster than it used to:&lt;/p&gt;

&lt;h3 id=&quot;1-zurb-foundation&quot;&gt;1. Zurb Foundation&lt;/h3&gt;
&lt;p&gt;The first thing I started with was completely removing Zurb Foundation, the
  CSS framework. I was using Foundation mainly for its grid system but I never
  really used most of its other components. In spite of that, I was,
  unknowingly, importing all its components into my main SCSS file (which, of
  course, was atrocious). I totally removed Foundation and replaced it with
  vanilla CSS (compiled PostCSS, actually). My main &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file was 242KB
  in size. Now, it’s a 6.3KB file.&lt;/p&gt;

&lt;h3 id=&quot;2-font-awesome--font-icons&quot;&gt;2. Font Awesome &amp;amp; Font Icons&lt;/h3&gt;
&lt;p&gt;This was based on an advice from the great frontend guru &lt;a href=&quot;https://twitter.com/ahmadalfy&quot;&gt;Ahmad
  Alfy&lt;/a&gt;: replacing Font Awesome with SVGs. There
  are already many
  &lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot; target=&quot;blank&quot;&gt;articles&lt;/a&gt; that
  discuss the case for using SVGs instead of font icons. For me, having a
  smaller file size to download by specifically adding only the icons I need to
  the sprite file, and not seeing empty squares when the file is yet to be
  downloaded are two great advantages of using SVGs.&lt;/p&gt;

&lt;h3 id=&quot;3-google-analytics&quot;&gt;3. Google Analytics&lt;/h3&gt;
&lt;p&gt;Although it might be useful to some, I didn’t really use analytics that much.
  For me, the added download time did not justify using Google Analytics
  specially that the uncached &lt;code class=&quot;highlighter-rouge&quot;&gt;analytics.js&lt;/code&gt; file alone loads from Google
  servers in about 200ms.&lt;/p&gt;

&lt;h3 id=&quot;4-disqus-comments&quot;&gt;4. Disqus Comments&lt;/h3&gt;
&lt;p&gt;I believe enabling comments in my blog is essential for opening a two-way
  channel of feedback. However, &lt;a href=&quot;http://donw.io/post/github-comments/#whats-wrong-with-disqus&quot; target=&quot;blank&quot;&gt;the biggest issue with
  disqus&lt;/a&gt;
  is that it loads too many files and makes API calls to different servers for
  tracking and analytics. I have recently worked on an implementation of blog
  comments backed by GitHub issues but I haven’t deployed it yet.&lt;/p&gt;

&lt;h3 id=&quot;5-javascript&quot;&gt;5. Javascript&lt;/h3&gt;
&lt;p&gt;When I started working on this optimization, I wanted a Javascript-free
  experience in my blog. That is, I wanted to have every functionality working
  normally with or without Javascript. Removing Foundation was a big step in
  this direction because, with removing it, its Javascript depdencies were
  removed as well. I currently, use Javascript for exactly two functions; one
  for loading fonts using &lt;em&gt;Web Font Loader&lt;/em&gt;, and the other is for toggling
  between the light and the dark theme (Yes, there’s a &lt;a href=&quot;/blog/introducing-jack-and-dark-theme&quot;&gt;dark
  theme&lt;/a&gt; in this blog). Previously, two
  JS files were downloaded with a total size of 222KB and loaded in about 77ms.
  Now, it’s just a single 20KB file that loads in ~20ms. Having Javascript
  files load asynchronously using &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; to load the main index.js file also
  helped a lot in the total loading time of the blog.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Having fewer files for the browser to download, and fewer resources that
  access the network help greatly in speeding the page load specially for
  static websites such as blogs.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Aug 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/how-i-improved-the-loading-speed-of-my-blog</guid>
        
        <category>frontend,</category>
        
        <category>css,</category>
        
        <category>javascript,</category>
        
        <category>performance</category>
        
        
        <category>Performance</category>
        
      </item>
    
      <item>
        <title>On Writing</title>
        <description>&lt;h3 id=&quot;why-i-write&quot;&gt;Why I write&lt;/h3&gt;

&lt;p&gt;There maybe a lot of reasons for this. For starters, I think writing is a fun
activity. I write mainly to improve my communication skills, written
communication skills apparently. Another reason I write for is to give back to
the communities I’m involved in and maybe benefit someone someday with
something I wrote. Teaching is such a precious experience. Teaching and
teaching through writing here does not only benefit the reader but also the
writer cause when I write, I get to deepen and widen my knowledge base.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teach and you shall learn.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;writing-is-hard&quot;&gt;Writing is hard&lt;/h3&gt;

&lt;p&gt;Seriously, this is the first thing that came to my mind when I thought of
writing this article. Although it might be fun to write, it’s very difficult to
put a good article together. The biggest issue for me is when I have a fairly
good idea and I can barely write about it at length. Although I believe in
quality not quantity, some articles can be understood from only the title and a
title alone cannot make an article. Some other articles feel superficial to me
after writing them thus I keep writing articles and deleting (or sometimes,
constantly editing) them.&lt;/p&gt;

&lt;h3 id=&quot;marketing-is-also-hard&quot;&gt;Marketing is also hard&lt;/h3&gt;

&lt;p&gt;Between the downvotes and the harsh comments on Reddit and Hacker News,
marketing an article is as hard as writing it. Currently, I use Twitter and
Reddit to share my articles. The downvotes and the harsh comments with no
constructive feedback are a bit frustrating sometimes even though I believe I
don’t write for everyone. What I mean by I don’t write for everyone is that the
targeted audience for each article might differ thus building an audience for the blog is difficult.&lt;/p&gt;

&lt;h3 id=&quot;how-i-write&quot;&gt;How I write&lt;/h3&gt;

&lt;p&gt;Currently the way I write is as follows:&lt;/p&gt;

&lt;p&gt;First, I come up with an idea and/or a title, generate a page for the article,
and fire up a text editor. I start by writing the main headlines in the
article. I then start filling the main points as fast as possible without
editing them. Afterwards, I edit the article, and fix the typos.&lt;/p&gt;

&lt;p&gt;How I want to write though is writing consistently. No matter how many new
year’s resolutions I may make, I never keep writing consistently as I want to.
However recently, I’ve been writing every other week or so. I also want to
write fearlessly. The fear of writing a bad article is what always stops me
from writing or publishing an article.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jun 2018 00:00:00 +0200</pubDate>
        <link>https://aonemd.github.io/blog/on-writing</link>
        <guid isPermaLink="true">https://aonemd.github.io/blog/on-writing</guid>
        
        <category>writing,</category>
        
        <category>blogging</category>
        
        
        <category>Blogging</category>
        
      </item>
    
  </channel>
</rss>
