<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgresql on aonemd</title>
    <link>https://aonemd.github.io/tags/postgresql/</link>
    <description>Recent content in postgresql on aonemd</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://aonemd.github.io/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When YAML Bit Me</title>
      <link>https://aonemd.github.io/posts/when-yaml-bit-me/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aonemd.github.io/posts/when-yaml-bit-me/</guid>
      <description>This is the story of a bug I encountered about 3 years ago. Basically, I had a model Book that contained a serialized object attribute called info and BooksController initially contained this search query:
Book.where(&amp;#39;info LIKE ?&amp;#39;, &amp;#34;%ref: &amp;#39;#{params[:ref]}&amp;#39;&amp;#34;) The bug that surfaced at the time was that some books were not fetched when the search query contained alpha-numeric reference numbers (those that contains both digits and letters) as some reference numbers were pure digits and some were a mix of digits and alphabetical characters.</description>
    </item>
    
    <item>
      <title>Inserting Bulk Data into Postgres Using Ruby</title>
      <link>https://aonemd.github.io/posts/inserting-bulk-data-into-pg/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://aonemd.github.io/posts/inserting-bulk-data-into-pg/</guid>
      <description>I had this task where it was required to generate a lot of data into a postgreSQL database and perform some queries on the generated data. So this is going to be some kind of a crash course on Ruby and postgreSQL (and some optimization).
Requirements The database contained only two tables. The first one was:
 cup_matches(mid, round, year, num_ratings, rating) mid is the primary key for matches round is the cup round/level (e.</description>
    </item>
    
  </channel>
</rss>
